%!PS-Adobe-3.0 EPSF-3.0
%%Title: (extest.pdf)
%%Version: 1 3
%%CreationDate: (D:20010613015321)
%%DocumentData: Clean7Bit
%%BoundingBox: 34 32 565 759
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources:
%%+ font: (atend)
%%DocumentSuppliedResources:
%%+ font: (atend)
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments

34 32 moveto
565 32 lineto
565 759 lineto
34 759 lineto
closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 1
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 150 dict put
userdict /PDFVars 86 dict dup begin put
/_save 0 def
/_cshow 0 def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_lp /none def
/_doClip 0 def
/sfc 0 def
/_sfcs 0 def
/_sfc 0 def
/ssc 0 def
/_sscs 0 def
/_ssc 0 def
/_fcs 0 def
/_scs 0 def
/_fp 0 def
/_sp 0 def
/AGM_MAX_CS_COMPONENTS 10 def
/_fillColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_strokeColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_fc null def
/_sc null def
/DefaultGray [/DeviceGray] def
/DefaultRGB [/DeviceRGB] def
/DefaultCMYK [/DeviceCMYK] def
/_inT false def
/_tr -1 def
/_rise 0 def
/_ax 0 def
/_cx 0 def
/_ld 0 def
/_tm matrix def
/_ctm matrix def
/_mtx matrix def
/_hy (-) def
/_fScl 0 def
/_hs 1 def
/_pdfEncodings 2 array def
/_baselineadj 0 def
/_fTzero false def
/_Tj 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_op? false def
/_OP? false def
/_opmode 0 def
/_ColorSep5044? false def
/_tmpcolr? [] def
/_tmpop? {} def
/_processColors 0 def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 1
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
/StartLoad { dup dup not { /_save save dd } if } bd
/EndLoad { if not { _save restore } if } bd
%%EndResource
%%BeginResource: l2compat
%%Copyright: Copyright 1987-1993 Adobe Systems Incorporated. All Rights Reserved.
/cshow isdefined? not StartLoad {
/cshow {
exch /_cshow xdd
{ 0 0 _cshow exec } forall
} bd
} EndLoad
/setcmykcolor isdefined? not StartLoad {
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} EndLoad
/rectclip isdefined? not StartLoad {
/re 0 def
/rectclip { newpath re clip newpath } bd
} EndLoad
/execform isdefined? not StartLoad {
/execform {
gsave dup begin
Matrix concat
BBox aload pop
exch 3 index sub
exch 2 index sub
rectclip
PaintProc end grestore
} def
} EndLoad
/sethalftone isdefined? not StartLoad {
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} EndLoad
%%EndResource
%%BeginResource: procset pdf
%%Version: 4.0 1
%%Copyright: Copyright 1998-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
[/b/B/b*/B*/BDC/BI/BMC/BT/BX/c/cm/cs/CS/d/d0/d1/Do/DP/EI/EMC/ET/EX/f/f*/g/G/gs
/h/i/j/J/k/K/l/m/M/MP/n/q/Q/re/rg/RG/ri/s/S/sc/SC/scn/SCN/sg/Tc/Td/TD/Tf/Tj/TJ
/TL/Tm/Tr/Ts/Tw/Tz/T*/v/w/W/W*/y/'/"
/applyInterpFunc/applystitchFunc/domainClip/EF/encodeInput/gsDI/ilp/icl
/initgs/int/limit/PS/rangeClip/RC/rf/makePat
] {null def} bind forall
/v { currentpoint 6 2 roll c } bd
/y { 2 copy c } bd
/h/closepath ld
/d/setdash ld
/j/setlinejoin ld
/J/setlinecap ld
/M/setmiterlimit ld
/w/setlinewidth ld
/i {
dup 0 eq { pop _defaultflatness } if
setflat
} bd
/gsDI {
begin
/Font here { aload pop Tf } if
/LW here { w } if
/LC here { J } if
/LJ here { j } if
/ML here { M } if
/D here { aload pop d } if
end
} bd
/ilp { /_lp /none dd } bd
/sfc {
_lp /fill ne {
_sfcs
_sfc
/_lp /fill dd
} if
} dd
/ssc {
_lp /stroke ne {
_sscs
_ssc
/_lp /stroke dd
} if
} dd
/icl { /_doClip 0 dd } bd
/W { /_doClip 1 dd } bd
/W* { /_doClip 2 dd } bd
/n {
{{} {clip} {eoclip}} _doClip get exec
icl
newpath
} bd
/s { h S } bd
/B { q f Q S } bd
/B* { q f* Q S } bd
/b { h B } bd
/b* { h B* } bd
/q/save ld
/Q { restore ilp } bd
/GetCSFamily {
dup type /arraytype eq {0 get} if
} bd
/GetCompsDict
11 dict begin
/DeviceGray { pop 1 } bd
/DeviceRGB { pop 3 } bd
/DeviceCMYK { pop 4 } bd
/CIEBasedA { pop 1 } bd
/CIEBasedABC { pop 3 } bd
/CIEBasedDEF { pop 3 } bd
/CIEBasedDEFG { pop 4 } bd
/DeviceN { 1 get length } bd
/Separation { pop 1 } bd
/Indexed { pop 1 } bd
/Pattern { pop 0 } bd
currentdict
end
def
/GetComps {
GetCompsDict
1 index GetCSFamily
get exec
} bd
/cs
{
dup _fcs eq
{ pop }
{ dup /_fcs xdd
GetComps
_fillColors exch get
/_fc xdd
/_fp null dd
} ifelse
} bd
/CS
{
dup _scs eq
{ pop }
{ dup /_scs xdd GetComps _strokeColors exch get /_sc xdd /_sp null dd }
ifelse
} bd
/sc {
_fc astore pop
ilp
} bd
/SC {
_sc astore pop
ilp
} bd
/g { DefaultGray cs sc } bd
/rg { DefaultRGB cs sc } bd
/k { DefaultCMYK cs sc } bd
/G { DefaultGray CS SC } bd
/RG { DefaultRGB CS SC } bd
/K { DefaultCMYK CS SC } bd
/cm { _mtx astore concat } bd
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/RC/rectclip ld
/EF/execform ld
/PS { cvx exec } bd
/initgs {
/DefaultGray [/DeviceGray] dd
/DefaultRGB [/DeviceRGB] dd
/DefaultCMYK [/DeviceCMYK] dd
0 g 0 G
[] 0 d
0 j
0 J
10 M
1 w
true setSA
/_op? false dd
/_OP? false dd
/_opmode 0 dd
/_defaulttransfer load 5 dict begin settransfer end
0 i
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} bd
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} bd
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} bd
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} bd
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} bind def
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 4.0 1
%%Copyright: Copyright 1987-1990 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
currentscreen
dup type /dicttype eq
{ /_defaulthalftone xdd
pop pop
}
{
5 dict begin
1 [/HalftoneType /SpotFunction /Angle /Frequency ]
{ exch def } forall
/_defaulthalftone currentdict
end
dd
} ifelse
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /setcolortransfer {
settransfer pop pop pop
} bd
/_defaultcolortransfer [currenttransfer dup dup dup] dd
}
ifelse
/initialize {
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c { _sa? { pl } if curveto } bd
/setSA { /_sa? xdd } bd
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/ri/pop ld
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/_sfcs { } dd
/_sscs { } dd
/scn { sc } bd
/SCN { SC } bd
/rf {re f} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/gs
{
begin
/SA here { /_sa? xdd } if
/OP here { /_OP? xdd } if
/op here
{ /_op? xdd }
{ /OP here { /_op? xdd } if }
ifelse
/TR here
{
dup xcheck
{ concatandsettransfer }
{ aload pop concatandsetcolortransfer }
ifelse
} if
/HT here { tn5044sethalftone } if
/FL here { i } if
currentdict gsDI
end
} bd
/_sfc
{
_fp null eq
{ _fcs type /arraytype eq
{_fcs 0 get /Separation eq
{
_fcs 1 get /All eq
{
_fc aload pop 1 exch sub
/setseparationgray where pop begin setseparationgray end
}
{
1 _fcs 3 get exec _fcs 1 get
/findcmykcustomcolor where pop begin findcmykcustomcolor end
_fc aload pop
/setcustomcolor where pop begin setcustomcolor end
}
ifelse
}
{ _fc L1setcolor }
ifelse
}
{ _fc L1setcolor }
ifelse
}
{ _fc L1setcolor }
ifelse
_op? setoverprint
} bind dd
/_ssc
{
_sp null eq
{ _scs type /arraytype eq
{_scs 0 get /Separation eq
{
_scs 1 get /All eq
{
_sc aload pop 1 exch sub
/setseparationgray where pop begin setseparationgray end
}
{
1 _scs 3 get exec _scs 1 get
/findcmykcustomcolor where pop begin findcmykcustomcolor end
_sc aload pop
/setcustomcolor where pop begin setcustomcolor end
}
ifelse
}
{ _sc L1setcolor }
ifelse
}
{ _sc L1setcolor }
ifelse
}
{ _sc L1setcolor }
ifelse
_OP? setoverprint
} bind dd
/f {
{ { sfc fill }
{gsave sfc fill grestore clip newpath icl ilp}
{gsave sfc fill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/f* {
{ { sfc eofill }
{gsave sfc eofill grestore clip newpath icl ilp}
{gsave sfc eofill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/S {
{ { ssc stroke }
{gsave ssc stroke grestore clip newpath icl ilp}
{gsave ssc stroke grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/rf {re f} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 4.0 1
%%Copyright: Copyright 1987-1998 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 75 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
/_intT false dd
0 Tr
} bd
/terminate { end } bd
/_safeput
{
Level2? not
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
}
if
3 -1 roll load 3 1 roll put
}
bd
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
FontName currentdict
end
definefont pop
}
bd
/Level2?
systemdict /languagelevel known
{systemdict /languagelevel get 2 ge}
{false}
ifelse
def
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category resourcestatus
{
pop pop
/CIDFont resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckSupplements
{
1 index _pdfTextTempString cvs
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
{
/CIDFont findresource
/CIDSystemInfo get /Supplement get
exch /CMap findresource
/CIDSystemInfo get
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ pop pop true }
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckSupplements
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_fyAdj xdd
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
_fyAdj 0 ne or
{
exch _wmode _pdfConcatNames _fyAdj _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
/BaseLineAdj _fyAdj def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
/swj {
dup 4 1 roll
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
6 2 roll /_cnt 0 dd
{1 index eq {/_cnt _cnt 1 add dd} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} bd
/jss {
4 1 roll
{
pop pop
(0) exch 2 copy 0 exch put
gsave
exch false charpath currentpoint
5 index setmatrix stroke
3 -1 roll
32 eq
{
moveto
5 index 5 index rmoveto currentpoint
}
if
grestore
moveto
2 copy rmoveto
} exch cshow
6 {pop} repeat
} def
/jsfTzero {
{
pop pop
(0) exch 2 copy 0 exch put
exch show
32 eq
{
4 index 4 index rmoveto
}
if
2 copy rmoveto
} exch cshow
5 {pop} repeat
} def
/jsp
{
{
pop pop
(0) exch 2 copy 0 exch put
32 eq
{ exch 5 index 5 index 5 index 5 -1 roll widthshow }
{ false charpath }
ifelse
2 copy rmoveto
} exch cshow
5 {pop} repeat
} bd
/trj { _cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll } bd
/pjsf { trj sfc fawidthshowProc } bd
/pjss { trj _ctm ssc jss } bd
/pjsc { trj jsp } bd
/_Tjdef [
/pjsf load
/pjss load
{
dup
currentpoint 3 2 roll
pjsf
newpath moveto
pjss
} bind
{
trj swj rmoveto
} bind
{
dup currentpoint 4 2 roll gsave
pjsf
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll
currentpoint gsave newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll gsave
dup currentpoint 3 2 roll
pjsf
newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
/pjsc load
] def
/BT
{
/_inT true dd
_ctm currentmatrix pop matrix _tm copy pop
0 _rise _baselineadj add translate _hs 1 scale
0 0 moveto
} bd
/ET
{
/_inT false dd
_tr 3 gt {clip} if
_ctm setmatrix newpath
} bd
/Tr {
_inT { _tr 3 le {currentpoint newpath moveto} if } if
dup /_tr xdd
_Tjdef exch get /_Tj xdd
} bd
/Tj {
userdict /$$copystring 2 index put
_Tj
} bd
/iTm { _ctm setmatrix _tm concat 0 _rise _baselineadj add translate _hs 1 scale } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
/TD { dup /_ld xdd Td } bd
/_nullProc {} bd
/Tf {
dup 1000 div /_fScl xdd
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
Level2?
{ selectfont }
{ exch findfont exch scalefont setfont}
ifelse
currentfont dup
/_nullProc exch
/WMode known
{
1 index /WMode get 1 eq
{pop /exch}
if
}
if
load /fWModeProc xdd
dup
/FontType get 0 eq dup _cx 0 ne and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
/_fTzero xdd
dup /BaseLineAdj known
{ dup /BaseLineAdj get _fScl mul }
{ 0 }
ifelse
/_baselineadj xdd
dup /_pdfT3Font known
{ 0 }
{_tr}
ifelse
_Tjdef exch get /_Tj xdd
currentpoint iTm moveto
pop
} bd
/TL { neg /_ld xdd } bd
/Tw {
/_cx xdd
_cx 0 ne _fTzero and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
} bd
/Tc { /_ax xdd } bd
/Ts { /_rise xdd currentpoint iTm moveto } bd
/Tz { 100 div /_hs xdd iTm } bd
/Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd
/T* { 0 _ld Td } bd
/' { T* Tj } bd
/" { exch Tc exch Tw ' } bd
/TJ {
{
dup type /stringtype eq
{ Tj }
{ 0 exch Tk }
ifelse
} forall
} bd
/T- { _hy Tj } bd
/d0/setcharwidth ld
/d1 { setcachedevice /sfc{}dd /ssc{}dd } bd
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap resourcestatus
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
/MakeBoldFont
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[ PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%BeginResource: font BPDDCK+TT7A1o00
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
ct_CffDict begin
15 dict begin
/FontInfo 10 dict dup begin
/BaseFontName (TT7A1o00) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /BPDDCK+TT7A1o00 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for def
/PaintType 0 def
/FontType 1 def
/FontMatrix [.000488281 0 0 .000488281 0 0 ] def
/FontBBox { 0 0 1017 693 } def
/StrokeWidth 0 def
currentdict end
systemdict begin
dup /Private 23 dict dup begin
/-|{string currentfile exch readhexstring pop}executeonly def
/|-{def}executeonly def
/|{put}executeonly def
/BlueValues [ ] |-
/BlueScale 0.039625 def
/BlueShift 7 def
/BlueFuzz 1 def
/ForceBold false  def
/ForceBoldThreshold 0 def
/LanguageGroup 0 def
/ExpansionFactor 0.06 def
/initialRandomSeed 0 def
/lenIV 4 def
/MinFeature {16 16} def
/password 5839 def
/OtherSubrs [
{ct_CffDict/F0Subr get exec}executeonly{ct_CffDict/F1Subr get exec}executeonly{ct_CffDict/F2Subr get exec}executeonly{ct_CffDict/HSSubr get exec}executeonly] |-
/Subrs 5  array
dup 0 15 -| 68CCB9B7733DBF957B5C4F6827AC8A |
dup 1 9 -| 68CCB9B776ADDED836 |
dup 2 9 -| 68CCB9B776AC088F04 |
dup 3 5 -| 68CCB9B7F6 |
dup 4 13 -| 68CCB9B7733AC657EC3EB6EC2F |
|-
2 index /CharStrings 2 dict dup begin
/.notdef 8 -| 68CCB9B776AA6A61 |-
/hyphen 30 -| 68CCB9B776DE55DE14AABCEB82506EA2FC60F068A7407888F827839CC07F |-
end
end
put
put
dup/FontName get exch definefont pop
end
/BPDDCK+TT7A1o00 findfont /Encoding get
pop
end
/BPDDCK+TT7A1o00 findfont /Encoding get
dup 45 /hyphen put
pop
%%EndResource
[/N33/BPDDCK+TT7A1o00 1 TZ
%%BeginResource: font BPDCNI+TT7A0o00
ct_CffDict begin
15 dict begin
/FontInfo 10 dict dup begin
/BaseFontName (TT7A0o00) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /BPDCNI+TT7A0o00 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for def
/PaintType 0 def
/FontType 1 def
/FontMatrix [.000488281 0 0 .000488281 0 0 ] def
/FontBBox { 0 -32 1214 1517 } def
/StrokeWidth 0 def
currentdict end
systemdict begin
dup /Private 23 dict dup begin
/-|{string currentfile exch readhexstring pop}executeonly def
/|-{def}executeonly def
/|{put}executeonly def
/BlueValues [ ] |-
/BlueScale 0.039625 def
/BlueShift 7 def
/BlueFuzz 1 def
/ForceBold false  def
/ForceBoldThreshold 0 def
/LanguageGroup 0 def
/ExpansionFactor 0.06 def
/initialRandomSeed 0 def
/lenIV 4 def
/MinFeature {16 16} def
/password 5839 def
/OtherSubrs [
{ct_CffDict/F0Subr get exec}executeonly{ct_CffDict/F1Subr get exec}executeonly{ct_CffDict/F2Subr get exec}executeonly{ct_CffDict/HSSubr get exec}executeonly] |-
/Subrs 5  array
dup 0 15 -| 68CCB9B7733DBF957B5C4F6827AC8A |
dup 1 9 -| 68CCB9B776ADDED836 |
dup 2 9 -| 68CCB9B776AC088F04 |
dup 3 5 -| 68CCB9B7F6 |
dup 4 13 -| 68CCB9B7733AC657EC3EB6EC2F |
|-
2 index /CharStrings 4 dict dup begin
/.notdef 8 -| 68CCB9B776AA6A61 |-
/zero 145 -| 68CCB9B776DE55DE14A9EF594D1E6C8FF6B2CAF7154D482B28941A975AE63C9222E82FA9
61D5837F27A5C24787E41E91626F062F8204CB2D8F1E133A718A9EFBED533694
97E788578AC13675E413A6B06CEF6FF453ADE092F657B771D5E06DD292A923E4
E1F73C303539B5CB9C7969669E3543D98B3D394E5676E1D10F02E98D6F309976
9A188BD8518DB65BED3C703B68 |-
/one 55 -| 68CCB9B776DE55DE14A9EF560FB111A9ABB20BB4298B38B9A7C36F6D7F7B0EA2B913B33A
806D9CA5645F04DCFD7CEFA65767EA2366D718 |-
/X 67 -| 68CCB9B776DE55DE14A9EF3AA1862323C425DB5C217EE16CE294850ECC59CCF7A225283E
9698FEA19CEFC3EE90DBEF16BC4AC252274BEC7EB86EA1933F2E6E6BD000EC |-
end
end
put
put
dup/FontName get exch definefont pop
end
/BPDCNI+TT7A0o00 findfont /Encoding get
pop
end
/BPDCNI+TT7A0o00 findfont /Encoding get
dup 48 /zero put
dup 49 /one put
dup 88 /X put
pop
%%EndResource
[/N25/BPDCNI+TT7A0o00 1 TZ
%%IncludeResource Symbol
[ 1 /Sigma
/N26/Symbol -1 TZ
%%IncludeResource Helvetica
[/N14/Helvetica 1 TZ
%%BeginResource: font BPDCGG+TT79Co00
ct_CffDict begin
15 dict begin
/FontInfo 10 dict dup begin
/BaseFontName (TT79Co00) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /BPDCGG+TT79Co00 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for def
/PaintType 0 def
/FontType 1 def
/FontMatrix [.000488281 0 0 .000488281 0 0 ] def
/FontBBox { 0 0 1159 1281 } def
/StrokeWidth 0 def
currentdict end
systemdict begin
dup /Private 23 dict dup begin
/-|{string currentfile exch readhexstring pop}executeonly def
/|-{def}executeonly def
/|{put}executeonly def
/BlueValues [ ] |-
/BlueScale 0.039625 def
/BlueShift 7 def
/BlueFuzz 1 def
/ForceBold false  def
/ForceBoldThreshold 0 def
/LanguageGroup 0 def
/ExpansionFactor 0.06 def
/initialRandomSeed 0 def
/lenIV 4 def
/MinFeature {16 16} def
/password 5839 def
/OtherSubrs [
{ct_CffDict/F0Subr get exec}executeonly{ct_CffDict/F1Subr get exec}executeonly{ct_CffDict/F2Subr get exec}executeonly{ct_CffDict/HSSubr get exec}executeonly] |-
/Subrs 5  array
dup 0 15 -| 68CCB9B7733DBF957B5C4F6827AC8A |
dup 1 9 -| 68CCB9B776ADDED836 |
dup 2 9 -| 68CCB9B776AC088F04 |
dup 3 5 -| 68CCB9B7F6 |
dup 4 13 -| 68CCB9B7733AC657EC3EB6EC2F |
|-
2 index /CharStrings 2 dict dup begin
/.notdef 8 -| 68CCB9B776AA6A61 |-
/F 49 -| 68CCB9B776DE55DE14AABCEB6028E9B531C152610B13195B55CEF5A2DE8D71749CA91BA1
676234C82BBAF4A545E2EB6165 |-
end
end
put
put
dup/FontName get exch definefont pop
end
/BPDCGG+TT79Co00 findfont /Encoding get
pop
end
/BPDCGG+TT79Co00 findfont /Encoding get
dup 70 /F put
pop
%%EndResource
[/N13/BPDCGG+TT79Co00 1 TZ
%%BeginResource: font BPDCFK+TT79Bo00
ct_CffDict begin
15 dict begin
/FontInfo 10 dict dup begin
/BaseFontName (TT79Bo00) def
/ItalicAngle 0 def
/isFixedPitch false  def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end def
/FontName /BPDCFK+TT79Bo00 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for def
/PaintType 0 def
/FontType 1 def
/FontMatrix [.000488281 0 0 .000488281 0 0 ] def
/FontBBox { 0 0 1130 1290 } def
/StrokeWidth 0 def
currentdict end
systemdict begin
dup /Private 23 dict dup begin
/-|{string currentfile exch readhexstring pop}executeonly def
/|-{def}executeonly def
/|{put}executeonly def
/BlueValues [ ] |-
/BlueScale 0.039625 def
/BlueShift 7 def
/BlueFuzz 1 def
/ForceBold false  def
/ForceBoldThreshold 0 def
/LanguageGroup 0 def
/ExpansionFactor 0.06 def
/initialRandomSeed 0 def
/lenIV 4 def
/MinFeature {16 16} def
/password 5839 def
/OtherSubrs [
{ct_CffDict/F0Subr get exec}executeonly{ct_CffDict/F1Subr get exec}executeonly{ct_CffDict/F2Subr get exec}executeonly{ct_CffDict/HSSubr get exec}executeonly] |-
/Subrs 5  array
dup 0 15 -| 68CCB9B7733DBF957B5C4F6827AC8A |
dup 1 9 -| 68CCB9B776ADDED836 |
dup 2 9 -| 68CCB9B776AC088F04 |
dup 3 5 -| 68CCB9B7F6 |
dup 4 13 -| 68CCB9B7733AC657EC3EB6EC2F |
|-
2 index /CharStrings 2 dict dup begin
/.notdef 8 -| 68CCB9B776AA6A61 |-
/E 55 -| 68CCB9B776DE55DE14AB72FC4B959AAB98775AD9A100A86199470C8B110BC55E70AB2EBA
54E8D1CA6DAB630A6FB7DA974CDEB560936FA8 |-
end
end
put
put
dup/FontName get exch definefont pop
end
/BPDCFK+TT79Bo00 findfont /Encoding get
pop
end
/BPDCFK+TT79Bo00 findfont /Encoding get
dup 69 /E put
pop
%%EndResource
[/N17/BPDCFK+TT79Bo00 1 TZ
%%IncludeResource Times-Roman
[/N9/Times-Roman 1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
34 32 531 727 re W n
/N10 DefaultRGB /ColorSpace defineRes pop
/N44 16 dict dup begin
/SA false def
/TR /_defaulttransfer load def
/SM 0.02 def
end /ExtGState defineRes pop
/N10 /ColorSpace findRes CS
0 0 0 SCN
1 J
1 j
1.123 w
10 M
[]0 d
/N44 /ExtGState findRes gs
1 i
170.868 599.218 m
170.868 603.537 l
312.576 599.218 m
312.576 603.537 l
454.284 599.218 m
454.284 603.537 l
100.07401 599.218 m
100.07401 607.737 l
S 
BT
/N9 1 Tf
24.0041 0 0 24.0041 94.0744 577.85941 Tm
/N10 /ColorSpace findRes cs
0 0 0 scn
0 Tc
0 Tw
/N9 1 Tf (0)Tj
ET
241.662 599.218 m
241.662 607.737 l
S 
BT
24.0041 0 0 24.0041 226.6633 577.85941 Tm
-0.00011 Tc
/N9 1 Tf (0.1)Tj
ET
383.37 599.218 m
383.37 607.737 l
S 
BT
24.0041 0 0 24.0041 368.37151 577.85941 Tm
/N9 1 Tf (0.2)Tj
ET
525.078 599.218 m
525.078 607.737 l
S 
BT
24.0041 0 0 24.0041 510.0797 577.85941 Tm
/N9 1 Tf (0.3)Tj
ET
100.07401 616.976 m
104.274 616.976 l
100.07401 652.373 m
104.274 652.373 l
100.07401 687.89 m
104.274 687.89 l
100.07401 723.287 m
104.274 723.287 l
100.07401 599.218 m
108.47301 599.218 l
S 
BT
24.0041 0 0 24.0041 55.1976 592.7382 Tm
/N9 1 Tf (0.61)Tj
ET
100.07401 634.735 m
108.47301 634.735 l
S 
BT
24.0041 0 0 24.0041 55.1976 628.1353 Tm
/N9 1 Tf (0.62)Tj
ET
100.07401 670.132 m
108.47301 670.132 l
S 
BT
24.0041 0 0 24.0041 55.1976 663.5323 Tm
/N9 1 Tf (0.63)Tj
ET
100.07401 705.52901 m
108.47301 705.52901 l
S 
BT
24.0041 0 0 24.0041 55.1976 698.92931 Tm
/N9 1 Tf (0.64)Tj
ET
100.07401 740.92599 m
108.47301 740.92599 l
S 
BT
24.0041 0 0 24.0041 55.1976 734.3264 Tm
/N9 1 Tf (0.65)Tj
ET
170.868 740.92599 m
170.868 736.726 l
312.576 740.92599 m
312.576 736.726 l
454.284 740.92599 m
454.284 736.726 l
100.07401 740.92599 m
100.07401 732.526 l
241.662 740.92599 m
241.662 732.526 l
383.37 740.92599 m
383.37 732.526 l
525.078 740.92599 m
525.078 732.526 l
525.078 616.976 m
520.879 616.976 l
525.078 652.373 m
520.879 652.373 l
525.078 687.89 m
520.879 687.89 l
525.078 723.287 m
520.879 723.287 l
525.078 599.218 m
516.55901 599.218 l
525.078 634.735 m
516.55901 634.735 l
525.078 670.132 m
516.55901 670.132 l
525.078 705.52901 m
516.55901 705.52901 l
525.078 740.92599 m
516.55901 740.92599 l
100.07401 599.218 m
525.078 599.218 l
100.07401 740.92599 m
100.07401 599.218 l
100.07401 740.92599 m
525.078 740.92599 l
525.078 599.218 l
S 
1.40401 w
107.153 609.177 m
110.633 609.177 l
114.233 609.177 m
117.71201 609.177 l
121.312 609.177 m
124.79201 609.177 l
128.39101 609.177 m
131.631 610.617 l
134.871 612.05701 m
137.871 613.856 l
140.87 615.776 m
142.55 616.856 l
143.87 617.696 l
146.87 619.496 m
149.87 621.416 l
152.869 623.336 m
155.869 625.13499 l
158.869 627.05499 m
161.869 628.97501 l
164.868 630.77499 m
167.868 632.69501 l
170.868 634.61501 m
173.868 636.535 l
176.867 638.45399 m
179.867 640.37399 l
182.74699 642.29401 m
185.74699 644.214 l
188.746 646.254 m
191.62601 648.174 l
194.62601 650.093 m
197.62601 652.013 l
200.625 653.933 m
203.505 655.853 l
206.505 657.77299 m
209.505 659.813 l
212.504 661.73199 m
213.34399 662.332 l
215.384 663.65199 l
218.384 665.57201 m
221.384 667.492 l
224.26401 669.532 m
227.263 671.452 l
230.263 673.371 m
233.14301 675.291 l
236.14301 677.211 m
239.142 679.25101 l
242.142 680.931 m
245.62199 681.651 l
249.101 682.25101 m
252.58099 682.851 l
256.061 683.451 m
259.661 684.17101 l
263.14 684.771 m
266.62 685.37 l
270.10001 685.97 m
273.57899 686.57001 l
277.05901 687.28999 m
280.539 687.89 l
284.019 688.49001 m
287.498 689.09 l
290.978 689.69 m
294.45799 690.41 l
297.937 691.00999 m
301.41701 691.61 l
305.017 692.21001 m
308.496 692.81 l
311.976 693.53 m
312.576 693.53 l
315.45599 693.05 l
318.936 692.45 m
322.41499 691.73 l
325.895 691.13 m
329.375 690.41 l
332.854 689.81 m
336.334 689.09 l
339.814 688.49001 m
343.29401 687.89 l
346.77299 687.17 m
350.25301 686.45 l
353.733 685.85001 m
355.05299 685.61 l
357.092 684.89101 l
360.452 683.811 m
363.812 682.61099 l
367.172 681.53101 m
370.53101 680.33099 l
373.89101 679.25101 m
377.25101 678.05099 l
380.61 676.851 m
383.37 675.89101 l
383.97 676.011 l
387.45 676.491 m
391.05 676.851 l
394.52901 677.33099 m
398.009 677.811 l
401.60899 678.291 m
405.088 678.771 l
408.56799 679.25101 m
411.808 679.61099 l
412.048 679.731 l
415.408 681.05099 m
418.647 682.371 l
422.007 683.69099 m
425.24699 685.00999 l
428.48599 686.33 m
431.84599 687.64999 l
435.086 688.97 m
438.446 690.28999 l
441.685 691.49001 m
445.045 692.81 l
448.285 694.13 m
451.645 695.45 l
454.884 696.77 m
458.12399 698.089 l
461.48399 699.409 m
464.72301 700.729 l
468.08299 702.049 m
471.323 703.369 l
474.683 704.689 m
477.922 706.009 l
481.162 707.32899 m
484.522 708.52901 l
487.76199 709.84801 m
491.121 711.168 l
494.36099 712.48801 m
497.72099 713.808 l
500.96001 715.12801 m
504.2 716.448 l
S 
507.56 717.76801 m
510.8 719.088 l
514.159 720.408 m
517.399 721.72701 l
520.759 722.927 m
523.99899 724.24699 l
105.713 607.737 m
108.47301 610.49699 l
105.713 610.49699 m
108.47301 607.737 l
112.793 607.737 m
115.55299 610.49699 l
112.793 610.49699 m
115.55299 607.737 l
119.87199 607.737 m
122.752 610.49699 l
119.87199 610.49699 m
122.752 607.737 l
126.952 607.737 m
129.83099 610.49699 l
126.952 610.49699 m
129.83099 607.737 l
134.03101 610.97701 m
136.911 613.73599 l
134.03101 613.73599 m
136.911 610.97701 l
141.11 615.416 m
143.99001 618.17599 l
141.11 618.17599 m
143.99001 615.416 l
155.269 624.29601 m
158.149 627.05499 l
155.269 627.05499 m
158.149 624.29601 l
169.42799 633.05499 m
172.308 635.935 l
169.42799 635.935 m
172.308 633.05499 l
211.905 660.89301 m
214.784 663.772 l
211.905 663.772 m
214.784 660.89301 l
240.342 679.491 m
243.10201 682.371 l
240.342 682.371 m
243.10201 679.491 l
268.66 684.53101 m
271.42 687.41 l
268.66 687.41 m
271.42 684.53101 l
311.136 692.21001 m
314.01601 694.97 l
311.136 694.97 m
314.01601 692.21001 l
353.61301 684.17101 m
356.492 687.05 l
353.61301 687.05 m
356.492 684.17101 l
382.05 674.571 m
384.81 677.33099 l
382.05 677.33099 m
384.81 674.571 l
410.368 678.17101 m
413.12801 681.05099 l
410.368 681.05099 m
413.12801 678.17101 l
452.84399 695.09 m
455.724 697.96899 l
452.84399 697.96899 m
455.724 695.09 l
523.63901 723.287 m
526.51801 726.16701 l
523.63901 726.16701 m
526.51801 723.287 l
107.153 610.617 m
114.233 611.937 l
121.312 616.256 l
156.709 638.45399 l
170.868 639.894 l
213.34399 653.933 l
241.662 654.41299 l
270.10001 653.33299 l
312.576 662.21201 l
383.37 679.011 l
411.808 684.651 l
454.284 700.24899 l
S 
q
453.444 699.289 71.634 25.798 re
W n 
454.284 700.24899 m
525.078 724.24699 l
S 
Q
105.713 609.297 m
108.47301 612.05701 l
105.713 612.05701 m
108.47301 609.297 l
112.793 610.49699 m
115.55299 613.37601 l
112.793 613.37601 m
115.55299 610.49699 l
119.87199 614.81599 m
122.752 617.696 l
119.87199 617.696 m
122.752 614.81599 l
126.952 619.256 m
129.83099 622.136 l
126.952 622.136 m
129.83099 619.256 l
134.03101 623.696 m
136.911 626.575 l
134.03101 626.575 m
136.911 623.696 l
141.11 628.13499 m
143.99001 631.015 l
141.11 631.015 m
143.99001 628.13499 l
155.269 637.015 m
158.149 639.774 l
155.269 639.774 m
158.149 637.015 l
169.42799 638.45399 m
172.308 641.214 l
169.42799 641.214 m
172.308 638.45399 l
211.905 652.493 m
214.784 655.373 l
211.905 655.373 m
214.784 652.493 l
240.342 652.97301 m
243.10201 655.733 l
240.342 655.733 m
243.10201 652.97301 l
268.66 651.89301 m
271.42 654.77299 l
268.66 654.77299 m
271.42 651.89301 l
311.136 660.77299 m
314.01601 663.65199 l
311.136 663.65199 m
314.01601 660.77299 l
353.61301 670.85201 m
356.492 673.61099 l
353.61301 673.61099 m
356.492 670.85201 l
382.05 677.571 m
384.81 680.451 l
382.05 680.451 m
384.81 677.571 l
410.368 683.211 m
413.12801 686.09 l
410.368 686.09 m
413.12801 683.211 l
452.84399 698.80901 m
455.724 701.569 l
452.84399 701.569 m
455.724 698.80901 l
523.63901 722.80701 m
526.51801 725.567 l
523.63901 725.567 m
526.51801 722.80701 l
S 
BT
/N17 1 Tf
20.0079 0 0 20.0079 468.4431 636.17461 Tm
0 Tc
/N17 1 Tf (E)Tj
/N13 1 Tf
14 0 0 14 480.44209 632.09489 Tm
/N13 1 Tf (F)Tj
/N14 1 Tf
0 20.0079 -20.0079 0 54.71761 651.17329 Tm
0.00031 Tc
/N14 1 Tf [(\(R)2.60001 ]TJ /N14 1 Tf [(y\))]TJ
ET
1.123 w
170.868 429.192 m
170.868 433.511 l
312.576 429.192 m
312.576 433.511 l
454.284 429.192 m
454.284 433.511 l
100.07401 429.192 m
100.07401 437.711 l
S 
BT
/N9 1 Tf
24.0041 0 0 24.0041 94.0744 407.8336 Tm
0 Tc
/N9 1 Tf (0)Tj
ET
241.662 429.192 m
241.662 437.711 l
S 
BT
24.0041 0 0 24.0041 226.6633 407.8336 Tm
-0.00011 Tc
/N9 1 Tf (0.1)Tj
ET
383.37 429.192 m
383.37 437.711 l
S 
BT
24.0041 0 0 24.0041 368.37151 407.8336 Tm
/N9 1 Tf (0.2)Tj
ET
525.078 429.192 m
525.078 437.711 l
S 
BT
24.0041 0 0 24.0041 510.0797 407.8336 Tm
/N9 1 Tf (0.3)Tj
ET
100.07401 429.192 m
104.274 429.192 l
100.07401 442.151 m
104.274 442.151 l
100.07401 467.82899 m
104.274 467.82899 l
100.07401 480.78799 m
104.274 480.78799 l
100.07401 493.62601 m
104.274 493.62601 l
100.07401 506.465 m
104.274 506.465 l
100.07401 532.263 m
104.274 532.263 l
100.07401 545.222 m
104.274 545.222 l
100.07401 558.061 m
104.274 558.061 l
100.07401 570.89999 m
104.274 570.89999 l
100.07401 454.99001 m
108.47301 454.99001 l
S 
BT
24.0041 0 0 24.0041 59.1573 448.3902 Tm
0.0004 Tc
/N9 1 Tf (-8.5)Tj
ET
100.07401 519.424 m
108.47301 519.424 l
S 
BT
24.0041 0 0 24.0041 77.15581 512.8248 Tm
0.00191 Tc
/N9 1 Tf (-8)Tj
ET
170.868 570.89999 m
170.868 566.7 l
312.576 570.89999 m
312.576 566.7 l
454.284 570.89999 m
454.284 566.7 l
100.07401 570.89999 m
100.07401 562.381 l
241.662 570.89999 m
241.662 562.381 l
383.37 570.89999 m
383.37 562.381 l
525.078 570.89999 m
525.078 562.381 l
525.078 429.192 m
520.879 429.192 l
525.078 442.151 m
520.879 442.151 l
525.078 467.82899 m
520.879 467.82899 l
525.078 480.78799 m
520.879 480.78799 l
525.078 493.62601 m
520.879 493.62601 l
525.078 506.465 m
520.879 506.465 l
525.078 532.263 m
520.879 532.263 l
525.078 545.222 m
520.879 545.222 l
525.078 558.061 m
520.879 558.061 l
525.078 570.89999 m
520.879 570.89999 l
525.078 454.99001 m
516.55901 454.99001 l
525.078 519.424 m
516.55901 519.424 l
100.07401 429.192 m
525.078 429.192 l
100.07401 570.89999 m
100.07401 429.192 l
100.07401 570.89999 m
525.078 570.89999 l
525.078 429.192 l
S 
1.40401 w
107.153 432.552 m
108.233 435.911 l
109.433 439.151 m
110.633 442.511 l
111.713 445.87 m
112.91299 449.23 l
114.11301 452.59 m
114.233 452.95 l
114.713 456.07001 l
115.19299 459.549 m
115.793 463.02901 l
116.27299 466.629 m
116.87199 470.108 l
117.35201 473.588 m
117.952 477.06799 l
118.552 480.548 m
119.032 484.02699 l
119.632 487.627 m
120.112 491.10699 l
120.71201 494.586 m
121.192 498.06599 l
122.272 501.42599 m
123.23199 504.90601 l
124.312 508.265 m
125.392 511.625 l
126.472 514.985 m
127.43201 518.34399 l
128.991 521.34399 m
132.351 522.424 l
135.711 523.26401 m
139.19099 522.304 l
142.55 521.34399 m
146.03 520.744 l
149.50999 520.144 m
152.989 519.424 l
156.46899 518.82401 m
156.709 518.70399 l
160.069 518.464 l
163.549 517.98399 m
167.028 517.62399 l
170.62801 517.26401 m
170.868 517.144 l
174.108 516.90401 l
177.58701 516.66499 m
181.187 516.30499 l
184.66701 516.065 m
188.267 515.705 l
191.746 515.345 m
195.34599 515.105 l
198.826 514.745 m
202.30499 514.505 l
205.905 514.145 m
209.38499 513.905 l
212.98399 513.545 m
213.34399 513.545 l
216.464 513.185 l
220.064 512.94501 m
223.54401 512.58501 l
227.02299 512.22501 m
230.623 511.985 l
234.103 511.625 m
237.582 511.265 l
241.18201 511.02499 m
241.662 510.905 l
244.662 511.265 l
248.26199 511.505 m
251.741 511.86501 l
255.341 512.22501 m
258.821 512.58501 l
262.3 512.94501 m
265.89999 513.30499 l
269.38 513.545 m
270.10001 513.66499 l
272.979 513.905 l
276.459 514.02499 m
280.05901 514.38499 l
283.539 514.505 m
287.01801 514.745 l
290.618 514.985 m
294.09801 515.22501 l
297.69701 515.465 m
301.177 515.705 l
304.77699 515.94501 m
308.257 516.185 l
311.856 516.425 m
312.576 516.545 l
315.336 516.90401 l
318.81599 517.384 m
322.295 517.864 l
325.895 518.464 m
329.375 518.944 l
332.854 519.424 m
336.334 519.90401 l
339.93401 520.504 m
343.414 520.98399 l
346.89301 521.464 m
350.373 521.944 l
353.97301 522.54401 m
355.05299 522.664 l
357.452 523.024 l
360.93201 523.504 m
364.412 523.98399 l
367.892 524.584 m
371.491 525.064 l
374.97099 525.54401 m
378.451 526.144 l
381.92999 526.62399 m
383.37 526.864 l
385.41 526.504 l
388.89 525.90401 m
392.37 525.304 l
395.96899 524.584 m
399.44901 523.98399 l
402.929 523.384 m
406.408 522.784 l
409.888 522.064 m
411.808 521.70399 l
413.368 521.224 l
416.72701 520.26401 m
420.08701 519.304 l
423.567 518.224 m
426.927 517.26401 l
430.286 516.185 m
433.646 515.22501 l
437.12601 514.265 m
440.485 513.185 l
443.845 512.22501 m
447.325 511.145 l
S 
450.685 510.185 m
454.04401 509.22501 l
457.524 508.145 m
460.884 507.185 l
464.243 506.105 m
467.603 505.026 l
471.08299 504.06599 m
474.44299 502.98599 l
477.802 502.026 m
481.162 500.946 l
484.642 499.98599 m
488.002 498.90601 l
491.36099 497.946 m
494.841 496.866 l
498.201 495.90601 m
501.56 494.826 l
504.92 493.746 m
508.39999 492.786 l
511.75999 491.707 m
515.119 490.74699 l
518.479 489.66701 m
521.959 488.707 l
105.713 431.112 m
108.47301 433.991 l
105.713 433.991 m
108.47301 431.112 l
112.793 451.50999 m
115.55299 454.39 l
112.793 454.39 m
115.55299 451.50999 l
119.87199 496.98599 m
122.752 499.866 l
119.87199 499.866 m
122.752 496.98599 l
126.952 519.784 m
129.83099 522.664 l
126.952 522.664 m
129.83099 519.784 l
134.03101 521.944 m
136.911 524.82401 l
134.03101 524.82401 m
136.911 521.944 l
141.11 519.90401 m
143.99001 522.784 l
141.11 522.784 m
143.99001 519.90401 l
155.269 517.384 m
158.149 520.144 l
155.269 520.144 m
158.149 517.384 l
169.42799 515.825 m
172.308 518.584 l
169.42799 518.584 m
172.308 515.825 l
211.905 512.105 m
214.784 514.86501 l
211.905 514.86501 m
214.784 512.105 l
240.342 509.465 m
243.10201 512.345 l
240.342 512.345 m
243.10201 509.465 l
268.66 512.22501 m
271.42 515.105 l
268.66 515.105 m
271.42 512.22501 l
311.136 515.105 m
314.01601 517.864 l
311.136 517.864 m
314.01601 515.105 l
353.61301 521.224 m
356.492 524.104 l
353.61301 524.104 m
356.492 521.224 l
382.05 525.424 m
384.81 528.304 l
382.05 528.304 m
384.81 525.424 l
410.368 520.26401 m
413.12801 523.144 l
410.368 523.144 m
413.12801 520.26401 l
452.84399 507.66499 m
455.724 510.545 l
452.84399 510.545 m
455.724 507.66499 l
523.63901 486.30701 m
526.51801 489.067 l
523.63901 489.067 m
526.51801 486.30701 l
107.153 517.504 m
114.233 517.504 l
121.312 533.463 l
128.39101 542.582 l
135.47099 548.10201 l
142.55 551.702 l
156.709 556.261 l
170.868 563.94099 l
213.34399 564.42101 l
241.662 565.14101 l
270.10001 564.78101 l
312.576 556.621 l
355.05299 543.782 l
383.37 536.22301 l
411.808 529.02299 l
454.284 515.825 l
S 
q
453.444 492.30701 71.634 24.358 re
W n 
454.284 515.825 m
525.078 493.26601 l
S 
Q
105.713 516.065 m
108.47301 518.944 l
105.713 518.944 m
108.47301 516.065 l
112.793 516.065 m
115.55299 518.944 l
112.793 518.944 m
115.55299 516.065 l
119.87199 532.02299 m
122.752 534.903 l
119.87199 534.903 m
122.752 532.02299 l
126.952 541.142 m
129.83099 544.022 l
126.952 544.022 m
129.83099 541.142 l
134.03101 546.662 m
136.911 549.54201 l
134.03101 549.54201 m
136.911 546.662 l
141.11 550.26199 m
143.99001 553.14101 l
141.11 553.14101 m
143.99001 550.26199 l
155.269 554.94099 m
158.149 557.701 l
155.269 557.701 m
158.149 554.94099 l
169.42799 562.50101 m
172.308 565.38 l
169.42799 565.38 m
172.308 562.50101 l
211.905 562.981 m
214.784 565.86 l
211.905 565.86 m
214.784 562.981 l
240.342 563.701 m
243.10201 566.58 l
240.342 566.58 m
243.10201 563.701 l
268.66 563.461 m
271.42 566.22 l
268.66 566.22 m
271.42 563.461 l
311.136 555.30099 m
314.01601 558.061 l
311.136 558.061 m
314.01601 555.30099 l
353.61301 542.342 m
356.492 545.222 l
353.61301 545.222 m
356.492 542.342 l
382.05 534.783 m
384.81 537.66299 l
382.05 537.66299 m
384.81 534.783 l
410.368 527.70399 m
413.12801 530.463 l
410.368 530.463 m
413.12801 527.70399 l
452.84399 514.38499 m
455.724 517.26401 l
452.84399 517.26401 m
455.724 514.38499 l
523.63901 491.827 m
526.51801 494.70599 l
523.63901 494.70599 m
526.51801 491.827 l
S 
BT
/N26 1 Tf
21.9919 0 0 21.9919 459.9239 451.8699 Tm
0 Tc
/N26 1 Tf (\001)Tj
/N25 1 Tf
15.3887 0 0 15.3887 472.8828 447.55029 Tm
0.00011 Tc
/N25 1 Tf (X10)Tj
/N14 1 Tf
0 20.0079 -20.0079 0 57.4774 481.14751 Tm
0.0005 Tc
/N14 1 Tf (\(eV\))Tj
ET
1.123 w
170.868 256.40601 m
170.868 260.606 l
312.576 256.40601 m
312.576 260.606 l
454.284 256.40601 m
454.284 260.606 l
100.07401 256.40601 m
100.07401 264.806 l
S 
BT
/N9 1 Tf
24.0041 0 0 24.0041 94.0744 234.92799 Tm
0 Tc
/N9 1 Tf (0)Tj
ET
241.662 256.40601 m
241.662 264.806 l
S 
BT
24.0041 0 0 24.0041 226.6633 234.92799 Tm
-0.00011 Tc
/N9 1 Tf (0.1)Tj
ET
383.37 256.40601 m
383.37 264.806 l
S 
BT
24.0041 0 0 24.0041 368.37151 234.92799 Tm
/N9 1 Tf (0.2)Tj
ET
525.078 256.40601 m
525.078 264.806 l
S 
BT
24.0041 0 0 24.0041 510.0797 234.92799 Tm
/N9 1 Tf (0.3)Tj
ET
100.07401 279.924 m
104.274 279.924 l
100.07401 327.2 m
104.274 327.2 l
100.07401 374.476 m
104.274 374.476 l
100.07401 256.40601 m
108.47301 256.40601 l
S 
BT
24.0041 0 0 24.0041 65.1568 249.80679 Tm
0.0009 Tc
/N9 1 Tf (-13)Tj
ET
100.07401 303.562 m
108.47301 303.562 l
S 
BT
24.0041 0 0 24.0041 65.1568 296.9628 Tm
/N9 1 Tf (-12)Tj
ET
100.07401 350.838 m
108.47301 350.838 l
S 
BT
24.0041 0 0 24.0041 65.1568 344.23891 Tm
/N9 1 Tf (-11)Tj
ET
100.07401 398.114 m
108.47301 398.114 l
S 
BT
24.0041 0 0 24.0041 65.1568 391.515 Tm
/N9 1 Tf (-10)Tj
ET
170.868 398.114 m
170.868 393.795 l
312.576 398.114 m
312.576 393.795 l
454.284 398.114 m
454.284 393.795 l
100.07401 398.114 m
100.07401 389.595 l
241.662 398.114 m
241.662 389.595 l
383.37 398.114 m
383.37 389.595 l
525.078 398.114 m
525.078 389.595 l
525.078 279.924 m
520.879 279.924 l
525.078 327.2 m
520.879 327.2 l
525.078 374.476 m
520.879 374.476 l
525.078 256.40601 m
516.55901 256.40601 l
525.078 303.562 m
516.55901 303.562 l
525.078 350.838 m
516.55901 350.838 l
525.078 398.114 m
516.55901 398.114 l
100.07401 256.40601 m
525.078 256.40601 l
100.07401 398.114 m
100.07401 256.40601 l
100.07401 398.114 m
525.078 398.114 l
525.078 256.40601 l
S 
1.40401 w
107.153 359.358 m
109.55299 356.838 l
112.073 354.31799 m
114.233 352.158 l
114.353 351.67799 l
115.793 348.439 m
117.23199 345.19901 l
118.672 341.959 m
120.112 338.71899 l
121.672 335.60001 m
123.952 332.96001 l
126.35201 330.2 m
128.39101 327.92 l
128.631 327.56 l
131.03101 324.92101 m
133.431 322.28101 l
135.83099 319.64101 m
138.47099 317.36099 l
141.11 314.961 m
142.55 313.761 l
143.99001 312.92101 l
147.11 311.242 m
150.23 309.562 l
153.349 307.76199 m
156.349 306.082 l
159.709 304.882 m
163.069 303.802 l
166.42799 302.722 m
169.78799 301.642 l
173.26801 300.802 m
176.74699 300.203 l
180.22701 299.603 m
183.707 299.00301 l
187.30701 298.403 m
190.786 297.683 l
194.26601 297.08299 m
197.746 296.483 l
201.22501 295.883 m
204.705 295.283 l
208.185 294.563 m
211.66499 293.963 l
215.144 293.483 m
218.744 293.243 l
222.224 293.00301 m
225.823 292.64301 l
229.30299 292.403 m
232.783 292.043 l
236.382 291.80299 m
239.862 291.563 l
243.46201 291.563 m
246.942 291.923 l
250.42101 292.283 m
254.021 292.64301 l
257.50101 293.00301 m
261.10001 293.36301 l
264.58 293.72301 m
268.06 294.08299 l
271.66 294.44299 m
275.13901 294.683 l
278.739 294.923 m
282.21899 295.16299 l
285.81799 295.52299 m
289.298 295.763 l
292.89799 296.00301 m
296.37801 296.243 l
299.85699 296.483 m
303.457 296.72301 l
306.937 296.963 m
310.536 297.203 l
314.01601 297.563 m
317.496 298.043 l
321.095 298.403 m
324.575 298.883 l
328.05499 299.36301 m
331.655 299.843 l
335.134 300.203 m
338.614 300.683 l
342.214 301.162 m
345.69299 301.642 l
349.173 302.12199 m
352.653 302.48199 l
356.25301 302.96201 m
359.73199 303.442 l
363.21201 303.802 m
366.812 304.282 l
370.291 304.76199 m
373.771 305.242 l
377.371 305.60201 m
380.85001 306.082 l
384.33 306.442 m
387.92999 306.562 l
391.41 306.802 m
395.009 306.922 l
398.489 307.162 m
402.089 307.282 l
405.56799 307.40199 m
409.168 307.642 l
412.64799 307.76199 m
416.24699 307.76199 l
419.72701 307.76199 m
423.327 307.76199 l
426.80701 307.76199 m
430.40601 307.76199 l
433.886 307.76199 m
437.48599 307.642 l
441.08501 307.642 m
444.565 307.642 l
448.16499 307.642 m
451.645 307.642 l
455.244 307.642 m
458.724 307.642 l
462.32401 307.76199 m
465.80299 307.76199 l
469.403 307.882 m
472.883 307.882 l
476.48199 308.002 m
479.96201 308.002 l
483.562 308.12199 m
487.04201 308.12199 l
490.64101 308.242 m
494.121 308.242 l
497.72099 308.362 m
501.2 308.362 l
504.8 308.48199 m
508.28 308.48199 l
511.88 308.60201 m
515.479 308.60201 l
518.959 308.722 m
522.55901 308.722 l
S 
105.713 358.03799 m
108.47301 360.798 l
105.713 360.798 m
108.47301 358.03799 l
112.793 350.718 m
115.55299 353.59801 l
112.793 353.59801 m
115.55299 350.718 l
119.87199 334.64 m
122.752 337.399 l
119.87199 337.399 m
122.752 334.64 l
126.952 326.48 m
129.83099 329.36 l
126.952 329.36 m
129.83099 326.48 l
134.03101 318.561 m
136.911 321.44099 l
134.03101 321.44099 m
136.911 318.561 l
141.11 312.32201 m
143.99001 315.201 l
141.11 315.201 m
143.99001 312.32201 l
155.269 304.522 m
158.149 307.282 l
155.269 307.282 m
158.149 304.522 l
169.42799 299.843 m
172.308 302.722 l
169.42799 302.722 m
172.308 299.843 l
211.905 292.283 m
214.784 295.043 l
211.905 295.043 m
214.784 292.283 l
240.342 289.883 m
243.10201 292.763 l
240.342 292.763 m
243.10201 289.883 l
268.66 292.883 m
271.42 295.763 l
268.66 295.763 m
271.42 292.883 l
311.136 296.00301 m
314.01601 298.763 l
311.136 298.763 m
314.01601 296.00301 l
353.61301 301.40199 m
356.492 304.282 l
353.61301 304.282 m
356.492 301.40199 l
382.05 305.002 m
384.81 307.76199 l
382.05 307.76199 m
384.81 305.002 l
410.368 306.32201 m
413.12801 309.202 l
410.368 309.202 m
413.12801 306.32201 l
452.84399 306.202 m
455.724 309.082 l
452.84399 309.082 m
455.724 306.202 l
523.63901 307.40199 m
526.51801 310.282 l
523.63901 310.282 m
526.51801 307.40199 l
107.153 327.8 m
114.233 318.201 l
121.312 304.40199 l
128.39101 297.323 l
135.47099 293.123 l
142.55 290.243 l
156.709 286.76401 l
170.868 288.444 l
213.34399 288.564 l
241.662 291.08299 l
270.10001 293.243 l
312.576 294.44299 l
355.05299 298.52299 l
383.37 300.683 l
411.808 302.842 l
454.284 304.282 l
S 
q
453.444 303.32201 71.634 5.16 re
W n 
454.284 304.282 m
525.078 307.642 l
S 
Q
105.713 326.36 m
108.47301 329.24001 l
105.713 329.24001 m
108.47301 326.36 l
112.793 316.881 m
115.55299 319.64101 l
112.793 319.64101 m
115.55299 316.881 l
119.87199 302.96201 m
122.752 305.842 l
119.87199 305.842 m
122.752 302.96201 l
126.952 295.883 m
129.83099 298.763 l
126.952 298.763 m
129.83099 295.883 l
134.03101 291.683 m
136.911 294.563 l
134.03101 294.563 m
136.911 291.683 l
141.11 288.804 m
143.99001 291.683 l
141.11 291.683 m
143.99001 288.804 l
155.269 285.32401 m
158.149 288.20399 l
155.269 288.20399 m
158.149 285.32401 l
169.42799 287.004 m
172.308 289.883 l
169.42799 289.883 m
172.308 287.004 l
211.905 287.12399 m
214.784 289.883 l
211.905 289.883 m
214.784 287.12399 l
240.342 289.64301 m
243.10201 292.52299 l
240.342 292.52299 m
243.10201 289.64301 l
268.66 291.923 m
271.42 294.683 l
268.66 294.683 m
271.42 291.923 l
311.136 293.00301 m
314.01601 295.883 l
311.136 295.883 m
314.01601 293.00301 l
353.61301 297.08299 m
356.492 299.963 l
353.61301 299.963 m
356.492 297.08299 l
382.05 299.36301 m
384.81 302.12199 l
382.05 302.12199 m
384.81 299.36301 l
410.368 301.40199 m
413.12801 304.162 l
410.368 304.162 m
413.12801 301.40199 l
452.84399 302.842 m
455.724 305.722 l
452.84399 305.722 m
455.724 302.842 l
523.63901 306.202 m
526.51801 309.082 l
523.63901 309.082 m
526.51801 306.202 l
S 
BT
/N26 1 Tf
21.9919 0 0 21.9919 457.0441 346.9987 Tm
0 Tc
/N26 1 Tf (\001)Tj
/N25 1 Tf
15.3887 0 0 15.3887 470.00301 342.679 Tm
0.00011 Tc
/N25 1 Tf (X11)Tj
/N14 1 Tf
0 20.0079 -20.0079 0 65.9967 308.2419 Tm
0.0005 Tc
/N14 1 Tf (\(eV\))Tj
ET
1.123 w
170.868 86.25999 m
170.868 90.58 l
312.576 86.25999 m
312.576 90.58 l
454.284 86.25999 m
454.284 90.58 l
100.07401 86.25999 m
100.07401 94.78 l
S 
BT
/N9 1 Tf
24.0041 0 0 24.0041 94.0744 64.90221 Tm
0 Tc
/N9 1 Tf (0)Tj
ET
241.662 86.25999 m
241.662 94.78 l
S 
BT
24.0041 0 0 24.0041 226.6633 64.90221 Tm
-0.00011 Tc
/N9 1 Tf (0.1)Tj
ET
383.37 86.25999 m
383.37 94.78 l
S 
BT
24.0041 0 0 24.0041 368.37151 64.90221 Tm
/N9 1 Tf (0.2)Tj
ET
525.078 86.25999 m
525.078 94.78 l
S 
BT
24.0041 0 0 24.0041 510.0797 64.90221 Tm
/N9 1 Tf (0.3)Tj
ET
100.07401 97.179 m
104.274 97.179 l
100.07401 151.77499 m
104.274 151.77499 l
100.07401 206.25 m
104.274 206.25 l
100.07401 124.41701 m
108.47301 124.41701 l
S 
BT
24.0041 0 0 24.0041 77.15581 117.81779 Tm
0.00191 Tc
/N9 1 Tf (-4)Tj
ET
100.07401 179.013 m
108.47301 179.013 l
S 
BT
24.0041 0 0 24.0041 77.15581 172.41319 Tm
/N9 1 Tf (-3)Tj
ET
170.868 227.96899 m
170.868 223.769 l
312.576 227.96899 m
312.576 223.769 l
454.284 227.96899 m
454.284 223.769 l
100.07401 227.96899 m
100.07401 219.569 l
241.662 227.96899 m
241.662 219.569 l
383.37 227.96899 m
383.37 219.569 l
525.078 227.96899 m
525.078 219.569 l
525.078 97.179 m
520.879 97.179 l
525.078 151.77499 m
520.879 151.77499 l
525.078 206.25 m
520.879 206.25 l
525.078 124.41701 m
516.55901 124.41701 l
525.078 179.013 m
516.55901 179.013 l
100.07401 86.25999 m
525.078 86.25999 l
100.07401 227.96899 m
100.07401 86.25999 l
100.07401 227.96899 m
525.078 227.96899 l
525.078 86.25999 l
S 
1.40401 w
107.153 225.689 m
108.47301 222.32899 l
109.793 219.089 m
111.233 215.85001 l
112.55299 212.61 m
113.873 209.37 l
114.713 205.89 m
115.313 202.411 l
116.033 198.931 m
116.632 195.451 l
117.35201 191.972 m
117.952 188.492 l
118.672 185.01199 m
119.272 181.532 l
119.87199 178.05299 m
120.592 174.453 l
121.192 170.97301 m
121.312 170.733 l
122.392 167.73399 l
123.71201 164.37399 m
124.912 161.134 l
126.112 157.774 m
127.312 154.41499 l
128.75101 151.175 m
130.791 148.295 l
132.83099 145.41499 m
134.871 142.536 l
137.39101 140.01601 m
140.03101 137.616 l
142.67 135.336 m
145.78999 133.536 l
148.91 131.85699 m
151.91 130.05701 l
155.02901 128.377 m
156.709 127.41701 l
158.269 126.937 l
161.629 125.737 m
164.98801 124.657 l
168.34801 123.577 m
170.868 122.617 l
171.70799 122.49699 l
175.188 121.897 m
178.787 121.41701 l
182.267 120.81799 m
185.74699 120.218 l
189.226 119.618 m
192.70599 119.01801 l
196.186 118.418 m
199.666 117.81799 l
203.265 117.218 m
206.745 116.618 l
210.22501 116.01801 m
213.34399 115.53799 l
213.70399 115.53799 l
217.18401 115.298 m
220.784 115.17799 l
224.26401 114.938 m
227.86301 114.698 l
231.343 114.578 m
234.94299 114.338 l
238.422 114.09801 m
241.662 113.978 l
242.022 113.978 l
245.502 114.218 m
249.101 114.45799 l
252.58099 114.81799 m
256.061 115.058 l
259.661 115.418 m
263.14 115.658 l
266.74001 115.89799 m
270.10001 116.258 l
270.22 116.258 l
273.819 116.498 m
277.299 116.618 l
280.899 116.858 m
284.37801 116.978 l
287.978 117.218 m
291.45799 117.338 l
294.938 117.578 m
298.537 117.81799 l
302.13699 117.938 m
305.617 118.17799 l
309.216 118.298 m
312.576 118.53799 l
312.696 118.53799 l
316.17599 118.89799 m
319.776 119.138 l
323.255 119.498 m
326.855 119.73801 l
330.33501 120.09801 m
333.93401 120.338 l
337.414 120.698 m
340.894 120.937 l
344.493 121.297 m
347.97301 121.537 l
351.573 121.897 m
355.05299 122.13699 l
358.532 122.49699 m
362.132 122.737 l
365.612 123.097 m
369.211 123.33701 l
372.69099 123.69701 m
376.291 123.937 l
379.771 124.297 m
383.37 124.537 l
386.85001 125.017 m
390.33 125.49699 l
393.929 125.97701 m
397.409 126.33701 l
400.88901 126.817 m
404.368 127.297 l
407.968 127.77699 m
411.448 128.257 l
414.92799 128.617 m
418.52699 129.097 l
422.007 129.577 m
425.487 129.937 l
428.966 130.41701 m
432.56599 130.77699 l
436.04601 131.257 m
439.526 131.617 l
443.125 132.097 m
446.605 132.577 l
450.08501 132.936 m
453.68401 133.416 l
457.164 133.896 m
460.644 134.37601 l
464.12399 134.976 m
467.72301 135.45599 l
S 
471.203 135.936 m
474.683 136.416 l
478.162 137.01601 m
481.642 137.496 l
485.242 137.976 m
488.72099 138.576 l
492.201 139.056 m
495.681 139.536 l
499.161 140.01601 m
502.75999 140.616 l
506.24001 141.09599 m
509.72 141.576 l
513.19901 142.17599 m
516.799 142.65601 l
520.27901 143.136 m
523.759 143.73599 l
105.713 224.24899 m
108.47301 227.009 l
105.713 227.009 m
108.47301 224.24899 l
112.793 207.21001 m
115.55299 210.09 l
112.793 210.09 m
115.55299 207.21001 l
119.87199 169.293 m
122.752 172.173 l
119.87199 172.173 m
122.752 169.293 l
126.952 150.33501 m
129.83099 153.215 l
126.952 153.215 m
129.83099 150.33501 l
134.03101 140.256 m
136.911 143.136 l
134.03101 143.136 m
136.911 140.256 l
141.11 133.896 m
143.99001 136.776 l
141.11 136.776 m
143.99001 133.896 l
155.269 125.97701 m
158.149 128.85699 l
155.269 128.85699 m
158.149 125.97701 l
169.42799 121.297 m
172.308 124.05701 l
169.42799 124.05701 m
172.308 121.297 l
211.905 114.09801 m
214.784 116.978 l
211.905 116.978 m
214.784 114.09801 l
240.342 112.53799 m
243.10201 115.418 l
240.342 115.418 m
243.10201 112.53799 l
268.66 114.81799 m
271.42 117.698 l
268.66 117.698 m
271.42 114.81799 l
311.136 117.09801 m
314.01601 119.978 l
311.136 119.978 m
314.01601 117.09801 l
353.61301 120.81799 m
356.492 123.577 l
353.61301 123.577 m
356.492 120.81799 l
382.05 123.097 m
384.81 125.97701 l
382.05 125.97701 m
384.81 123.097 l
410.368 126.817 m
413.12801 129.69701 l
410.368 129.69701 m
413.12801 126.817 l
452.84399 132.097 m
455.724 134.856 l
452.84399 134.856 m
455.724 132.097 l
523.63901 142.536 m
526.51801 145.295 l
523.63901 145.295 m
526.51801 142.536 l
107.153 153.215 m
114.233 142.17599 l
121.312 119.498 l
128.39101 107.49899 l
135.47099 100.179 l
142.55 95.38 l
156.709 89.38 l
170.868 88.17999 l
213.34399 88.06 l
241.662 90.7 l
270.10001 93.34 l
312.576 98.13901 l
355.05299 108.339 l
383.37 114.09801 l
411.808 119.498 l
454.284 126.817 l
S 
q
453.444 125.85699 71.634 15.239 re
W n 
454.284 126.817 m
525.078 140.256 l
S 
Q
105.713 151.77499 m
108.47301 154.655 l
105.713 154.655 m
108.47301 151.77499 l
112.793 140.73599 m
115.55299 143.616 l
112.793 143.616 m
115.55299 140.73599 l
119.87199 118.058 m
122.752 120.937 l
119.87199 120.937 m
122.752 118.058 l
126.952 106.05901 m
129.83099 108.819 l
126.952 108.819 m
129.83099 106.05901 l
134.03101 98.85899 m
136.911 101.619 l
134.03101 101.619 m
136.911 98.85899 l
141.11 93.94 m
143.99001 96.82001 l
141.11 96.82001 m
143.99001 93.94 l
155.269 87.94 m
158.149 90.82001 l
155.269 90.82001 m
158.149 87.94 l
169.42799 86.74001 m
172.308 89.5 l
169.42799 89.5 m
172.308 86.74001 l
211.905 86.62 m
214.784 89.5 l
211.905 89.5 m
214.784 86.62 l
240.342 89.25999 m
243.10201 92.14 l
240.342 92.14 m
243.10201 89.25999 l
268.66 91.89999 m
271.42 94.78 l
268.66 94.78 m
271.42 91.89999 l
311.136 96.7 m
314.01601 99.57899 l
311.136 99.57899 m
314.01601 96.7 l
353.61301 106.899 m
356.492 109.778 l
353.61301 109.778 m
356.492 106.899 l
382.05 112.658 m
384.81 115.418 l
382.05 115.418 m
384.81 112.658 l
410.368 118.058 m
413.12801 120.937 l
410.368 120.937 m
413.12801 118.058 l
452.84399 125.377 m
455.724 128.257 l
452.84399 128.257 m
455.724 125.377 l
523.63901 138.81599 m
526.51801 141.576 l
523.63901 141.576 m
526.51801 138.81599 l
S 
BT
/N26 1 Tf
21.9919 0 0 21.9919 414.5677 191.1317 Tm
0 Tc
/N26 1 Tf (\001)Tj
/N25 1 Tf
15.3887 0 0 15.3887 427.5266 186.812 Tm
0.00011 Tc
/N25 1 Tf (X11)Tj
/N33 1 Tf
21.9919 0 0 21.9919 455.24429 191.1317 Tm
0 Tc
/N33 1 Tf (-)Tj
/N26 1 Tf
0.6002 0 TD
/N26 1 Tf (\001)Tj
/N25 1 Tf
15.3887 0 0 15.3887 481.40199 186.812 Tm
0.00011 Tc
/N25 1 Tf (X10)Tj
/N14 1 Tf
0 20.0079 -20.0079 0 68.8764 138.21609 Tm
0.0005 Tc
/N14 1 Tf (\(eV\))Tj
20.0079 0 0 20.0079 285.5784 43.78391 Tm
0 Tc
/N14 1 Tf (E)Tj
14 0 0 14 298.89729 39.8243 Tm
0.0009 Tc
/N14 1 Tf (esmr)Tj
20.0079 0 0 20.0079 330.0947 43.78391 Tm
0.0005 Tc
/N14 1 Tf (\(Ry\))Tj
ET
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Helvetica
%%+ font Times-Roman
%%+ font Symbol
%%DocumentSuppliedResources:
%%+ font BPDCNI+TT7A0o00
%%+ font BPDCFK+TT79Bo00
%%+ font BPDDCK+TT7A1o00
%%+ font BPDCGG+TT79Co00
%%EOF
