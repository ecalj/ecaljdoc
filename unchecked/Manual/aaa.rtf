{\pard \ql \f0 \sa180 \li0 \fi0 \u8226?{\b Reference}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \line \u8226? Jan2017 Add minimum description for syml generator at Sec.{\field{\*\fldinst{HYPERLINK "#sec:getsyml"}}{\fldrslt{\ul
4.7.1
}}}
\line \u8226? Aug2019 slight modification for CMD35\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Introduction\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The ecalj\u160?\u160?is an first-principles electronic-structure calculations package with some unique features. With ecalj\u160?, we can do not only standard calculations (LDA/GGA/LDA+U, relaxation of atomic positions), but also the quasiparticle self-consistent GW calculations(QSGW), linear responses (charge and spin), Wannier functions (and U of them).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is base on an unique one-body problem solver, the PMT method (=the Linearized APW+MTO method) . Thus we identify the QSGW method implemented in ecalj\u160?as the PMT-QSGW method. Introduction to the PMT-QSGW is given in Sec.{\field{\*\fldinst{HYPERLINK "#sec:fecalj"}}{\fldrslt{\ul
1.1
}}}
. Today \u8220"QSGW\u8221" is accepted as a standard procedure in the electronic structure calculations .\par}
{\pard \ql \f0 \sa180 \li0 \fi0 First, see README.org shown at {\field{\*\fldinst{HYPERLINK "https://github.com/tkotani/ecalj#ecalj-"}}{\fldrslt{\ul
https://github.com/tkotani/ecalj#ecalj-
}}}
 (or ecalj/README.org in the package). Free to download ecalj\u160?\u160?package from it, and use it. The QSGW code is version controlled by git.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The ecalj\u160?\u160?is related to a FP-LMTO package lmv7 seen at ecalj/Document/Manual/CategoryAndToken.org (or html).\line The lmv7 and ecalj are branched at year 2009. After branched, we added new features: simple install and test; all codes are in f90 (no C compiler); new methods, especially PMT-QSGW; MPI parallelization for QSGW; simple usage with automatic setting of default files by python ver2; a small tool to convert VASP POSCASR to ecalj, and so on. PMT-QSGW shows more stable convergence than the previous version, FP-LMTO-GW {\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 In cases to treat magnetic systems which have intrinsic magnetic fluctuations, we may need to be careful about initial condition or mixing procedure to get convergence. In cases, we need to start from LDA+U results as initial condition from which we start QSGW. Let me know about such trouble.\par}
}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u160?\line \u160?\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8211-\line \u160?\u160?package mainly consists of two parts. One is (in ecalj/lm7K/), the other is (in ecalj/fpgw/).\line , based on \line We can perform standard calculations such as LDA,GGA,LDA+U, atomic position relaxation, and so on. In addition, the PMT part has an interface to perform GW (and QSGW) calculation: the one-body part can include a given non-local exchange-correlation potential stored in a file sigm.*. {\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 In the case of using sigm.*, total energy shown in the console output (also in save.*) are just the indicator, not the meaningful total energy\par}
}. The QSGW calculation is performed by a script gwsc, which has an iteration loop calling the one-body program (lmf) and many-body part (GW part) alternatively. The many-body part generate the file sigm.*. See Fig.{\field{\*\fldinst{HYPERLINK "#gwscpicture"}}{\fldrslt{\ul
[gwscpicture]
}}}
 and around.\line , based on \line As the inputs for the {\i G}{\i W}calculation, we have to supply the eigenfunctions and the eigenvalues from the one-body part to the GW part. The eigenfuncions re-expanded by the two types of basis functions, the atomic-like argumentation functions in the muffin-tin(MT) spheres, and the plane-waves in the interstitial region, say, the interstitial plane-wave (IPW) hereafter. IPW is defined as the usual plane waves in the interstitial region, but zero within MTs\u8217'. The IPWs + \u8221"atomic like functions within MTs\u8221" make \u8220"a basis set to expand eigenfuncitons\u8221". See Eq.(17) of .\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We need another basis set to expand \u8220"product of eigenfuncions\u8221". That is, the mixed product bases (MPB)\line , which consists of the two kinds of bases (caution: do not mixed up with the basis set for eigenfuncitons); (i)the local atom-centered functions confined to MT spheres, so-called the product basis; (ii) IPW. The product-basis are calculated from products of solutions to the Schr\u246?dinger equation within the MT sphere. The Coulomb matrix {\i v}, the dynamically screened Coulomb interaction {\i W}, and so on, are expanded in the MPB. It can virtually span all the space made of product of eigenfunctions (but, in practical calculations, we need to use a small size of the bases to reduce computational time). We include full energy-dependence of {\i W}({\i \u969?}). See Sec.3 of .\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Recently T.Kotani includes the Wannier function generator, which was originally developed by T.Miyake and H.Kino on top of previous version of GW part. Thus the Wannier functions (including effective interactions) can be generated in the PMT-QSGW. (U parameters in the full-screening and cRPA).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Uniqueness of the ecalj package.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We will explain two unique points of ecalj\u160?.\line {\b PMT}:\line Central part in an electronic structure packages is one-body problem solver. It means how to calculate eigenvalues/eigenfunctions for a given one-body potential. Inversely, we have to generate new one-body potential for given eigenfunctions/eigenvalues based on the density functional theory (DFT) in the LDA or GGA (In the followings, LDA means both of LDA and GGA). Then we can make the electron density self-consistent by iterations until converged, and obtain total energy of ground states. Then we can calculate atomic forces by perturbation. Based on such an one-body problem solver, we can implement kinds of methods; e.g, dielectric function, magnetic susceptibility, transport and so on. Furthermore, we can implement higher-level approximations such as the QSGW method explained below. An one-body problem solver (in linear methods) are characterized by\line \u160?\u160?(i) linear combinations of what basis set to represent eigenfunctions;\line \u160?\u160?(ii) how to represent electron density and one-body potential.\line In ecalj\u160?, we use the PMT method  as the one-body problem solver. The PMT method is a new all-electron full potential method. It uses not only the augmented plane waves (APW) but also the muffin-tin orbitals (MTO) together, in addition to the local orbital (lo\u8217's), to represent the eigenfunctions (no other methods use two kinds of augmented waves together). Thus eigenfunctions are expanded in the linear combinations of the APWs, MTOs, and the lo\u8217's. The formulation is clarified in Ref.. Then the electron density and the one-body potential are given in the \u8220"3-components representation\u8221". That is, the electron density (one-body potential) is divided into three components,\line \u160?\u160?\u160?\u8220"smooth part + onsite muffin-tin (MT) part \u8722? counter part\u8221".\line Here the counter part is in order to remove smooth part within MTs. This formalism (Soler-Williams formalism ) is also used in the projected augmented wave (PAW) method such as VASP.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We now usually use highly localized MTOs together with APWs of low energy cutoff (3\u8196?\u8764?\u8196?4 Ry). {\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 current implementation have not yet efficiently use this locality; this must allow us to speed up one-body problem solver.\par}
} I think this is promising not only for efficient DFT/QSGW scheme, but also for kinds of applications in future.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\line In ecalj\u160?, we can perform the GW calculation. The usual GW approximation is so-called \u8220"one-shot GW\u8221" starting from LDA. It usually only calculates differences between the quasiparticle energies (QPEs) and the LDA eigenvalues by a perturbation (only diagonal part of self energy for the LDA eigenfunctions). Its ability is limited; it may fail when its starting point (eigenfunctions and eigenvalues supplied by LDA) is problematic. This is the reason why we originally develop the QSGW method. The QSGW now becomes popular and taken as a possible candidate to go beyond current limitation of such GW and LDA/GGA . In principle, results given by QSGW do not depend on LDA anymore; the LDA are only used to prepare initial condition for self-consistency iteration cycle of the QSGW calculation {\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 Exactly speaking, we use LDA idea for efficient implementation of QSGW; thus obtained results are slightly dependent on the choice of LDA or GGA\par}
}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Usually the QPEs obtained by QSGW reproduce experiments better than LDA. For example, the band gap by GGA for GaAs is about 0.5 eV in contrast to the experimental value of 1.69 eV {\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 We undo electron-phonon effect (0.06eV) and spin-orbit effect (0.11eV) from the true the experimental value 1.52 eV.\par}
}. On the other hand, the QSGW predicts about 1.8\u8764? 1.9eV, a few tenth of eV larger than experiment (for practical use, we sometimes use \u8220"hybrid functional between QSGW and LDA\u8221" so as to obtain smaller band gap). Even in the case of NiO and so on, the QSGW gives reasonable results (there is a tendency to give a little larger band gaps than experiments). This is in contrast to the case of the one-shot GW applied to NiO, where we can not have good agreement with experiments because the stating points in LDA is problematic.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The ecalj\u160?\u160?have other functions. LDA+U, atomic forces and relaxation (in GGA/LDA), core level spectroscopy and so on. In addition, we can calculate dielectric functions and magnetic responses from QPEs and the quasiparticle eigenfunctions given by LDA/QSGW. But total energy in QSGW is still in research (shown total energies in QSGW calculations are dummy now).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The QSGW calculations are very time-consuming; roughly speaking, it takes 10 or more times expensive than usual one-shot GW (although we can reduce computational time by choosing computational conditions). Thus the size of systems which we can treat is limited to ten atom in a cell or something, say, with a node of 16 cores; computation may require a week or so to have reasonable convergence. (heavy atoms require longer computational efforts, light atoms faster; non-magnetic systems are easier. We still have much room to accelerate the method, but not have done yet so much. Minimum MPI parallelization is implemented). The computational effort is \u8196?\u8733?\u8196?{\i N}{\super 4} in the most time-consuming part of QSGW.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 What do we expect for QSGW?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Let us recall hybrid functionals such as B3LYP, and LDA+U. In hybrid functional methods, we use Vxc = (1-{\i \u945?})*LDA+{\i \u945?}*(Fock exchange like term), where {\i \u945?} is taken to be \u8196?\u8764?\u8196?0.25 usually {\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 exactly speaking, we have range cutoff for Fock exchange term in the HSE functional in addition\par}
}. The {\i \u945?} can be dependent on materials; for metals {\i \u945?} should be almost zero. For larger band gap insulator, {\i \u945?} becomes larger. {\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 If you use {\i \u945?}\u8196?=\u8196?1 (Hartree-Fock limit), the band gap of Si becomes 20eV or something.\par}
} Despite of success of the functional, its ability is limited. For example, it is known that a hybrid functionals fail to describe metals such as bcc Fe. On the other hand, we have LDA+U method which succeeded to describe materials including localized electrons. However, it contains kinds of ambiguity and U is chosen by hand. The important part of the hybrid functional methods and LDA+U is the non-local potential. It is missing in the DFT. As we discussed above, they give some success but not satisfactory. We somehow need to have a method to determine high-quality non-local potential (a substitution of the exchange-correlation potential in LDA). It is the QSGW method.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note two important aspects of non-local potential (missing character in the local potential used in DFT). One is the onsite non-locality; it is also taken into account by LDA+U model. However, note that relative shift of O(2p) band with respect to the center of 3d band is not in LDA+U. The other is the off-site non-locality (mainly between nearest neighbors), which may relate to LUMO-HOMO gap. A non-local potential can behave a projector which push down only the HOMO states (valence band) to lower energy. This can be in the hybrid functional but not in LDA+U.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In the QSGW, we determine such a non-local potential with the calculation of the GW method, in a self-consistent manner (we repeat GW calculations until converged). We can expect QSGW much more than hybrid methods/LDA+U. Roughly speaking, because the QSGW automatically determine U of LDA+U, or alpha of the hybrid functionals. More accurately speaking, we determine not only {\i G}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}0 but also {\i W} (the screened Coulomb interaction) self-consistently. Here {\i W} corresponds to U and alpha. Thus QSGW gives reasonable results even if it is applied to metals such as Fe. For systems with metallic screening, it gives small non-locality (results are close to those of LDA). For systems with large band gap, QSGW gives large enough non-locality (like 0.25*(Fock exchange)).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Since we now need to treat complex systems, e.g, metal on insulator, it is very essential to treat kinds of materials on a same footing.\line The main purpose of QSGW is to determine an one-particle effective Hamiltonian {\i H}{\super 0} {\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 people often pronounce this \u8220"H-naught\u8221"\par}
}, which describes the quasiparticle picture (or independent-particle picture) for the system we calculate. In other words, QSGW divides the full many-body Hamiltonian {\i H} into {\i H}\u8196?=\u8196?{\i H}{\super 0}\u8197?+\u8197?({\i H}\u8197?\u8722?\u8197?{\i H}{\super 0}). The screened Coulomb interaction {\i W} is determined self-consistently in the QSGW iteration cycle.\line In comparison with LDA, we see differences;\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Band gap. QSGW tends to give slightly larger than experiments. It looks systematic.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Band width. Usually, sp bands are enlarged (except very low density case such as Na). This is the case for homogeneous electron gas. As for localized bands like 3d electrons, they can be narrowed.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Relative position of bands. e.g. O(2p) v.s. Ni(3d). More localized bands tends to get more deeper. Exchange splitting between up and down (like LDA+U) get larger. In cases such as NiO, magnetic moment become larger; closer to experimental values.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Hybridization of 3d bands with others. QSGW tends to make eigenfunctions localized.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 However, reality is complexed, and not so simple in cases.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Rule in this manual\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab This font is for executable file(program) or shell scripts.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab echo\u160?3|hbasfp0  means doing hbasfp0 with the argument \u8217'3\u8217' supplied as the standard input (read(*,*) in fortran).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab This font is for files, directories, contents of files, or variables used in codes.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab ctrl.si,rst.si and so on mean the case of Si. You may need to replace the extension si for your case. (this extension is given by user. Lower case, number, and underscore are allowed.) In the followings, ctrl.* means a file wish such an extension.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab There are files named foobarU and foobarD, which are for up spin (isp=1) and for down spin(isp=2), respectively; for example, SEXU and SEXD. We sometimes use foobarU to denote foobarU and foobarD together.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b k} vector in the Brillouin zone is called as {\b q} or {\b k}.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 What can we do with the ecalj package?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 At Feb.2015, what we can do is as follow. We have limited parallelization. (e.g. k point parallel).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab LDA/GGA LDA+U, calculations, atomic forces and relaxation. Spin-orbit is included only for co-linear spin-density cases.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Quasi-particle(QP) energy in the 1st-iteration from LDA. (one-shot {\i G}{\i W})\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Make band plot for LDA and the QP energies.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Spectrum function of the self-energy {\i \u931?}. Life time (imaginary part) of QPs.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Dielectric function, and its inverse. (including local-field effect or not).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab QP self-consistent {\i G}{\i W}(QSGW)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab magnetic susceptibility.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Wannier function. (not only one-body part, but also effective interaction {\i W} and cRPA)\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Install\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Install and minimum tests are easy; even in a note PC, e.g., we can use gfortran in Ubuntu. In Thinkpad T480s (2018) install may take five minutes, and all tests may take another fifteen minutes.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For productive runs, we may need multi-cores. Current implementation for parallelization by MPI is limited (not so much especially for the dielectric function part yet). Thus, probably, it may be not so efficient to use too many cores.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Follow the instruction of ecalj/README.org.\line or we can see the same one at {\field{\*\fldinst{HYPERLINK "https://github.com/tkotani/ecalj/README.org"}}{\fldrslt{\ul
https://github.com/tkotani/ecalj/README.org
}}}
. We have a command ecalj/InsallAll.ifort and so on. This command installs ecalj\u160?and run a series of install tests automatically.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Binaries and Scripts\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Main binaries and Scripts contained in ecalj\u160?are\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab ctrlgenM1.py\line Generate default input file ctrl.*from the structure file ctrls.*. The latter file only contains information of crystal structure.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab lmfa\line Spherical atom calculation as initial condition, and core charge.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab lmchk\line Check atomic positions, crystal symmetry, and computational conditions. Check ID of MuffinTins (MTs of atoms specified by ctrl file is re-ordered by computer.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab lmf and lmf-MPIK LDA/GGA,LDA+U calculations. (or we can use Vxc in QSGW instead). We mainly use lmf-MPI ($\{\\bf k\}$-parallel version) instead of lmf.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab PROCAR mode of lmf: Fat band mode.\line -np 4 lmf-MPIK \u8211-mkprocar \u8211-band:fn=syml mgo@ gives PROCAR\line (Try an example \u160?/ecalj/MATERIALS/MgO/. Run ./job at the directory).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab gwsc\line QSGW calculation\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab ,jobUUUUUUtdos,jobUUUUUUpdos@\line band, fermi surface, tdos, pdos plot.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab \line Run cu -np 4 10 10 10@. This write down all band energies (around Ef) for 10x10x10 in BZ. Then we can view it with xcrysden as \u8211-bxsf fermiup.bxsf@ (usage of xcrysden need to be written here). With \u8211-allband added for , we can write all the bands. So, we need this option if you like to write iso-energy surface at high (or low) energy.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab epsPP\line Dielectric funciton without local field correction (LFC).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab eps\line Dielectric funciton with LFC\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab epsPP\line Non-interacting transverse spin polarization.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab gw\line One-shot GW calculation. This also show life-time of QPs (QPU). (we need make it parallelized...)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab genMLWF\line Wannier functions and matrix elements of {\i W} on it. A implementation of cRPA included.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab dqpu\line A small python script to compare QPU.* files (eigenvalues are compared) numerically.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 tests\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Install.ifort run tests at /TestInstall@.\line In the following, :gwUUUUUUlmfh@ means \u8217'>siUUUUUUgwUUUUUUlmfh@\u8217' at /TestInstall/@; this test is performed with the Makefile at the directory.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 si:gwUUUUUUlmfh/              Results: QPU \line
si:gwsc/                        : QPU,log.si\line
gas:gwsc/                       : QPU,log.gas\line
nio:gwsc/                       : QPU,log.nio\line
feUUUUUUepsPPUUUUUUlmfhUUUUUUchipm:            : ChiPM* \line
gas:epsUUUUUUlmfh/                   : EPS*\line
gas:epsPPUUUUUUlmfh/                 : EPS*\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (These are just samples; not for practical calculations)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Directory structure\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ecalj\line
\u9500?\u9472?\u9472? InstallAll.ifort, Install.gfortran ! install and test\line
\u9500?\u9472?\u9472? Document/\line
\u9500?\u9472?\u9472? fpgw/       ! full potential GW code\line
\u9500?\u9472?\u9472? fpgw/Wannier  ! MaxLoc Wannier and cRPA code.\line
\u9500?\u9472?\u9472? lm7K/       ! PMT method \line
\u9500?\u9472?\u9472? MATERIALS/  !jobUUUUUUmaterials.py contains examples. \line
\u9500?\u9472?\u9472? StructureTool/ ! POSCAR converter, and structure tool\line
\u9500?\u9472?\u9472? GetSyml/ ! Brillouin zone and symmetry lines generator and visualizer.\line
\u9500?\u9472?\u9472? TestInstall/   ! Install test; this is invoked from Install.*\line
\u9492?\u9472?\u9472? TOOLS/      !Tools for developers\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Theory (note)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Except the technical details, we need to know minimum for these theories.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab DFT in LDA/GGA.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab GW\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab QSGW\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 There are literatures as for GW. A recent one is Ref.. In addition, it is better to know the basics of the PMT method (LAPW+LMTO method) . Here is a small note for {\i G}{\i W}.\line \line The Green\u8217's function $G(\{\\bf r\},\{\\bf r\}',\\omega)$ is the central quantity in the GW calculation. In the one-particle theory (mean-field theory/non-interacting case), the Schr\u246?dinger eq. is $$\\begin\{aligned\}
(i \\frac\{\\partial \}\{\\partial t\} - HUUUUUU0) \\psi(\{\\bf r\},t)=0 \\label\{sch0\}\\end\{aligned\}$$ Here {\i H}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}0 is the one-particle Hamiltonian which contains electrostatic potential plus exchange-correlation potential $VUUUUUU\{\\rm xc\}$ (here we don\u8217't care how it is given. This should be static but can be non-local as Fock term). When we have (unkown) source term $J(\{\\bf r\},t)$ instead of 0 in the right hand side of , we can calcuate $\\psi(\{\\bf r\},t)$ by multipling inversion of the operator $(i \\frac\{\\partial \}\{\\partial t\} - HUUUUUU0)$. This is the (non-interacting) Green funciton $G(\{\\bf r\},\{\\bf r\}',\\omega)$ defined as $$\\begin\{aligned\}
(i \\frac\{\\partial \}\{\\partial t\} - HUUUUUU0) G
= \\delta(t-t')\\delta(\{\\bf r\}-\{\\bf r\}'). \\label\{g0def\}\\end\{aligned\}$$ As this shows, {\i G} is the inverse matrix of the operator $(i \\frac\{\\partial \}\{\\partial t\} - HUUUUUU0)$, (we pay attention to the boundary condition, especially for time-direction: retarted, advanced or time-ordered). Thus we can write $G=1/(i \\frac\{\\partial \}\{\\partial t\} -HUUUUUU0)=1/(\\omega -HUUUUUU0)$. In other words, the Green function {\i G} is the integration kernel in order to convert a differential equation to an integral equation. This is the same as the case of Poisson equation (Laplacian) for the electrostatic problem;then $1/|\{\\bf r\}-\{\\bf r\}'|$ is the Green function for the conversion (then we calculate electro static field $\\phi(\{\\bf r\})$ for give source term $\\rho(\{\\bf r\})$.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In the case of electro static problem, we have two ways to solve the problem. One is the direct method to solve differential equation, the other is using such integration kernel. They are equivalent, but the latter is easy to handle and suitable for numerical calculations (under the assumption of \u8220"superposition low\u8221", that is, linear response). Although $G(\{\\bf r\},\{\\bf r\}', t-t')$ contains time variables (to describe wave propagation), essentials are the same.\line \line $G(\{\\bf r\},\{\\bf r\}',\\omega)$ is the quantity which is well defined even in the many-body perturbation theory. It is defined as the expectation value as $\\langle 0|V\{\\psi\}(\{\\bf r\}t) V\{\\psi\}^\\dagger(\{\\bf r\}' t')| 0 \\rangle$ (this is not accurate. See literatures..). Here we use the second-quantized field-operator {\i V}{\i \u968?}. This definition of {\i G} is a natural extension of the one-particle case.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 However, there are differences in the {\i G} of one-particle case and many-body case. In the one-particle case, we have no interaction between electrons. Thus an electron added to the ground state (which is by filling electrons up the Fermi energy) is the eigenstate. An electron going on can not be an eigenstate, because of the correlation effect and exchange effect.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Let me explain the correlation effect. In contrast to this, one-particle state (=the quasiparticle(QP)) in the many-body theory can be not the eigenstate; it moves in the sea of ohter electrons and holes, which can be excited to other states, or an moving electron can move with polalized cloud of other electrons and holes. Its motion is affected by oher electrons. It will lose energy gradually; the QP can have life time. This may be identified as the correlation effect.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Let me explain the exchange effect. This is due to the Fermi statistics. The electron, which you focus on, can not be distinguished from other electrons. (Thus mu-on can not feel this effect. {\i G} for mu-on in solids only contains pure correlation effect). From a point of view, this exchange effect is interpreted as a hopping effect, sudden jump from an electron to another elecron (actually the Hartree-Fock theory gives zero effective mass at the Fermi energy for metallic systems).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We can include both of the effects in the GW calculation at the lowest order. Exactly speaking, these two effects are really mixed up. However, in GW (since GW is at the lowest order), these two are clearly separated.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The rigorous equation for {\i G} is $$\\begin\{aligned\}
\\left(i \\frac\{\\partial \}\{\\partial t\} - HUUUUUU0 + 
(\\Sigma(\{\\bf r\},\{\\bf r\}',t-t')-VUUUUUU\{\\rm xc\})\\right) G
= \\delta(t-t')\\delta(\{\\bf r\}-\{\\bf r\}'). \\label\{gdef\}\\end\{aligned\}$$ Only the difference is adding $\\Sigma(\{\\bf r\},\{\\bf r\}',t-t')-VUUUUUU\{\\rm xc\}$. In other words, all unknown effects are pushed into this term. Many body effect are pushed into (downfolded or projected into) the self-energy (=dynamical one-particle potential) $\\Sigma(\{\\bf r\},\{\\bf r\}',t-t')$. We don\u8217't treat many-body quantities such as $X(\\bfrUUUUUU1 tUUUUUU1, \\bfrUUUUUU2 tUUUUUU2, \\bfrUUUUUU3 tUUUUUU3)$ directly in the {\i G}{\i W} calculations.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The {\i G}{\i W} method is how to give the $\\Sigma(\{\\bf r\},\{\\bf r\}',t-t')$ in the lowest order. Because of the long-range property of the Coulomb interaction, we need to have a special technique (not a simple perturbation). $\\Sigma(\{\\bf r\},\{\\bf r\}',t-t')$ is calculated as the product of {\i G}\u8197?\u215?\u8197?{\i W}, where {\i G} is (usually) just the non-interacting Green function given in . {\i W} is the dynamically screened Coulomb interaction calculated in RPA.\line \line Note that completely cancels the effect of $VUUUUUU\{\\rm xc\}(\{\\bf r\},\{\\bf r\}')$ since it is included in {\i H}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}0. Thus this division is not meaningful if we can solve a problem completely. However, what we can do is only the perturbation. Quantities for {\i H}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}0 is taken as the basic quantities. On it, we apply the perturbation. Equivalently we can have a division {\i H}\u8196?=\u8196?{\i H}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}0\u8197?+\u8197?({\i H}\u8197?+\u8197?{\i H}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}0), where {\i H} is the many-body Hamiltonian.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In priniple, we can start from any $VUUUUUU\{\\rm xc\}$. However, as long as we use perturbation theory, we have to minimize the effect of $\\Sigma(\{\\bf r\},\{\\bf r\}',t-t')-VUUUUUU\{\\rm xc\}$. The degree of freedom of the choice of $VUUUUUU\{\\rm xc\}$ is used to minimize it. This is the self-consistent pertubation theory idea for QSGW.\line If $\\Sigma(\{\\bf r\},\{\\bf r\}',t-t')-VUUUUUU\{\\rm xc\}$ give small effect, we can use the concept of the QP (independent particle picture) as the basis to evaluate physical quantities.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We have to determine best (or optimum) $VUUUUUU\{\\rm xc\}$. How to do it? An idea is that we should determine it so that the size of $\\Sigma(\{\\bf r\},\{\\bf r\}',t-t')-VUUUUUU\{\\rm xc\}$ should be smallest (how to measure the size?). Or, based on the Landau-Silin\u8217's theory, the QPs contained in {\i G} should be reproduced by {\i H}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}0. In anyway, this ends up with the self-consitent petrurbation theory. For trial $VUUUUUU\{\\rm xc\}$ (and electron density), we have {\i H}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}0; from {\i H}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}0 we can calculate $\\Sigma(\{\\bf r\},\{\\bf r\}',t-t')$. Then we have to determine new $VUUUUUU\{\\rm xc\}$ in a method. This is repeated until converged. No unique choice for the method. Thus we testes some possible ways and now we usually use a standard procedure as described in Ref. .\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 LDA/GGA calculations and Plots\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Calculations are performed by following steps. These steps are detailed in the following sub-sections.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To identify a set of files used for a material we calculate, we use an extension to files. For example, files explained below are with extensions (only lower case allowed) of materials. For example, {\f1 ctrls.cu} and {\f1 ctrl.cu}. In this case {\f1 cu} is the extension. Any extension works. Other possible examples are {\f1 ctrls.lagao3}, {\f1 ctrl.wgantest1}, and so on.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab Write crystal structure file ctrls.*, which contains crystal structure. It can be by hand, or convert it from POSCAR (in VASP). There is a tool to convert between POSCAR and ctrls.* (See ecalj/StructureTool/README.txt for the tool. we have vasp2ctrl and ctrl2vasp. Type them without arguments to see help.)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab Generate ctrl.*from ctrls.*by a script {\f1 ctrlgenM1.py}, {\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 ctrlgenM1.py exists originally at ecalj/lm7K/ (ctrlgenM1.py was already copied to your BINDIR= defined in ecalj/Install.ifort in the installation).\par}
}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Here {\f1 ctrl.*} is the main control file which contains all required information to perform calculations. ctrl.* contains not only the content of ctrls.*, but also other information needed for calculations. If necessary, we edit the generated {\f1 ctrl.*} file before next step.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab Check crystal structure. lmchkis to confirm the crystal structure (space-group symmetry and so on). lmchkis applied not to ctrls.*but to ctrl.*. ctrls.*never used in the following steps.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 : If a crystal structure is only slightly different from a structure with higher symmetry, the lmchkmay give a wrong crystal symmetry. In such a case, you have to \u8220"standardize structure\u8221" by VESTA or some other tools. This occurs e.g., when we use a structure numerically relaxed by VASP.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab Run lmfa (calculations of spherical atoms (MT sites) in the cell). It also calculates core eigenfunctions and valence electron charge to set up initial condition. Then we run main calculation of LDA by {\f1 lmf}. It repeats iterations, and end up with converged results in LDA. Main result (electron density satisfying self-consistency) is stored in restart file {\f1 rst.*} (binary file). It finished within a second.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 5.\tx360\tab Run LDA/GGA calculations. We can run the LDA/GGA calculation by lmf or lmf-MPIK (-MPIK means kpoint parallel version).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 6.\tx360\tab Post processing.\line Plot energy band, DOS, PDOS, by running scripts. We can use scripts job for band plot (need syml.si file (symmetry line for band plot)). We also have job, job, job and so on for DOS, PDOS, fermi surfaces. Since we use gnuplot to plot them, meanings of obtained data is apparently clear.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Write crystal structure file, ctrls\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Let me show some samples of crystal structure files ctrls.*.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab \f1 ~/ecalj/lm7K/TESTsamples/Cu/ctrls.cu\line
------from here ------------------\line
% const da=0 alat=6.798\line
STRUC  ALAT=\{alat\} DALAT=\{da\}\line
       PLAT=  0.0 0.5 0.5   0.5 0.0 0.5    0.5 0.5 0.0\line
SITE    ATOM=Cu POS=0 0 0\line
------to here ------------------\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab \f1 ecalj/lm7K/TESTsamples/GaAs/ctrl.gaas\line
------from here ------------------\line
#id  = GaAs\line
%const bohr=0.529177 a=5.65325/bohr \line
STRUC\line
     ALAT=\{a\} \line
     PLAT=0 0.5 0.5  0.5 0 0.5  0.5 0.5 0 \line
SITE\line
     ATOM=Ga POS=0.0 0.0 0.0\line
     ATOM=As POS=0.25 0.25 0.25\line
------to here ------------------\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab \f1 ecalj/lm7K/TESTsamples/SrTiO3/ctrls.srtio3 \line
------from here ------------------\line
%const da=0 au=0.529177\line
%const d0=1.95/au a0=2*d0 v=a0^3 a1=v^(1/3)\line
HEADER  SrTiO3 cubic \line
STRUC   ALAT=\{a1\} DALAT=\{da\} \line
        PLAT=1 0 0  0 1 0  0 0 1\line
SITE\line
      ATOM=Sr POS=1/2 1/2 1/2\line
      ATOM=Ti POS= 0   0   0\line
      ATOM=O  POS=1/2  0   0\line
      ATOM=O  POS= 0  1/2  0\line
      ATOM=O  POS= 0   0  1/2\line
------to here ------------------\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Lines starting from \u8217'#\u8217' are neglected as comment lines. Lines starting from \u8217'{\f1 % const}\u8217' define variables and set values (in these cases, {\f1 da}, {\f1 alat}, and {\f1 bohr}, and so on). Then the variable {\f1 alat} is referred to as {\f1 \{alat\}}; in the cu case, {\f1 \{alat\}} means 6.798. Lines not start from "#" nor "%" are main content in ctrls.*. {\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 For these variables, we can overlay values when we start programs. For example,\u8217'lmf -vdalat=0.1 si\u8217' means that {\f1 alat} is recorded in save.si file.\par}
}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that we have two tags of \u8220"categories\u8221" "STRUC" and "SITE". (\u8220"HEADER\u8221" tag is also; but it is just for user\u8217's memo shown in console output). These tags should start from the first column. Thus ctrls.*is divided into multiple \u8220"categories\u8221". In a category, we have \u8220"tokens\u8221" such as ALAT, DLAT, PLAT. These under STRUC category. ALAT+DALAT specify unit of length in this ctrl file. These are in a.u. (= bohr radius=0.529177\u197?).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The unit cell is given by PLAT (as noted, ALAT+DALAT as unit). In the above example of GaAs, three primitive cell vectors specified by nine numbers after PLAT=; they give three primitive vectors; PLAT1=(0,0,0.5), PLAT2=(0.5, 0.0, 0.5), and PLAT3=(0.5, 0.5, 0). DALAT is convenient to change lattice constant; but it is fixed to be zero here; thus no effect in this example.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that SITE category can have multiple ATOM tokens. The number of ATOM token under SITE should be the same as number of atoms in the primitive cell. In the case of GaAs; SITE contain multiple ATOM tokens. POS= just next to ATOM is taken as subtokens under ATOM token. {\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 This may looks slightly uncomfortable since the end of range of ATOM is not clearly shown; it end just at the next ATOM token or new category.\par}
} In cases, we specify such subtokens as SITE.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In the SITE category, we place atoms (MT names) in the primitive cell. In these cases we use defaults atomic symbol (MT names) for {\f1 ATOM}. POS is in the Cartesian coordinate (in the unit of ALAT+DALAT).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To test ecalj, you may make a test directory and copy a ctrls.*to your directory. If you have VESTA and ecalj/StructureTool/ installed, you can see its structure by\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1   $ viewvesta ctrls.cu\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (here $ means command prompt).\par}
{\pard \ql \f0 \sa180 \li720 \fi0 NOTE: As written in ecalj/README, you have to install VESTA and {\f1 viewvesta}. Then set VESTA= at the top of ecalj/Structure/viewvesta, and make softlink to it. The command {\f1 viewvesta}({\f1 ~/ecalj/StructureTool/viewvesta.py}) generate {\f1 POSCARUUUUUUcu.vasp} first, then send it to VESTA. {\f1 viewvesta} also accept {\f1 POSCARUUUUUUcu.vasp} directly. Except names starting from {\f1 ctrl} and {\f1 ctrls}, {\f1 viewvesta} sends the name to VESTA directly. We need extension \u8217'.vasp\u8217' to recognize it is written in VASP format. We have samples in {\f1 ~/ecalj/StructureTool/sample}.\line A tool {\f1 vasp2ctrl} converts POSCAR.vasp to ctrls.. \u8220"\u8211-help\u8221" show a small help.\line \u8226? ecalj/StructureTool/ is not tested well. Not believe it so much... We will fix it on your request. Another possible way is using cif2cell.\par}
{\pard \ql \f0 \sa180 \li720 \fi0 If you have a cif file, run\par}
{\pard \ql \f0 \sa180 \li720 \fi0 \f1 cif2cell foobar.cif -p vasp --vasp-cartesian --vasp-format=5\par}
{\pard \ql \f0 \sa180 \li720 \fi0 And convert POSCAR to ctrls. cif2cell is available from github.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In {\f1 ctrls.srtio3}, we use an expression 1/2 to give POS. We can use mathematical expression instead of values. Mathematical expressions such as \u8220"\u8197?+\u8197?\u8197?\u8722?\u8197?\u8197?*\u8197?/ sqrt(...)\u8221" are recognized. (instead of {\f1 3**2}, use {\f1 3^2}. Use parenthesis, and no space for an expression). We can use default atomic symbols (to check default atom name (MT name) type {\f1 ctrlgenM1.py --showatomlist}). Instead of such default symbols, we can use your own symbol as\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     SITE\line
      ATOM=M1 POS=1/2 1/2 1/2\line
      ATOM=M2 POS= 0   0   0\line
      ATOM=O  POS=1/2  0   0\line
      ATOM=O  POS= 0  1/2  0\line
      ATOM=O  POS= 0   0  1/2\line
    SPEC\line
      ATOM=M1 Z=38\line
      ATOM=M2 Z=22\line
      ATOM=O  Z=8\par}
{\pard \ql \f0 \sa180 \li0 \fi0 . Then we have to add extra category SPEC where we set Z number. (You can use Z=37.5 for virtual crystal approximation, however, you can not do it in ctrls now. Edit it in ctrl file. Such a procedure will be explained in other place.xxx)\line This is an example for Antiferro NiO:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 #id  = NiO\line
%const bohr=0.529177 a=7.88\line
STRUC   ALAT=\{a\} PLAT= 0.5 0.5 1.0  0.5 1.0 0.5  1.0 0.5 0.5\line
SITE    ATOM=Niup POS=  .0   .0   .0\line
        ATOM=Nidn POS= 1.0  1.0  1.0\line
        ATOM=O POS=  .5   .5   .5\line
        ATOM=O POS= 1.5  1.5  1.5\line
SPEC\line
    ATOM=Niup Z=28 MMOM=0 0  1.2 0\line
    ATOM=Nidn Z=28 MMOM=0 0 -1.2 0\line
    ATOM=O Z=8 MMOM=0 0 0 0\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In this case, we define Niup and Nidn sites. These are recognized as Ni atom because of given Z number in SPEC. The subtoken MMOM=Ms,Mp,Md,Mf... re to specify number of magnetic moments ($\\muUUUUUUB$) for s,p,d,f channels (difference of up - down electrons within MT sites) as initial condition. In this case, we set n(up)-n(down)=1.2 for Niup site for d channel. Even just one ATOM name is given by yourself, all ATOM in SPEC should be given (in this case SPEC for O should be given).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We can see other samples in {\f1 ~/ecalj/lm7K/TESTsamples/*/ctrls.*}. (we also have a sample generator. See later section.) Note that ctrls file is jut in order to generate default ctrl file in the followings. Not from ctrls but from ctrl, we can start calculations. (thus ctrls is not needed if we prepare ctrl file directory).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is possible to add {\f1 RELAX= 0 0 1} after {\f1 SITEUUUUUUATOMUUUUUUPOS}; this means structure relaxation along z-axis (also need to set {\f1 DYN} category given in Document/Manual/CategoryAndToken.org). but its defaults are given (but commented out) automatically in the ctrl file generated by the procedure described in the following section). We detail it in other place xxx.\line After {\f1 ctrl.*} is generated as shown below, we can run a command {\f1 lmchk} to check weather crystal structure is correctly given or not. It finish in a second. It show symmetry information, and so on used in the calculation.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : Positions of atoms are not necessarily fixed by ctrl.* when you restart calculation with rst.* file, because atomic positions are read from rst.*. We need to pay attention when we use DYN option because lmf run may save relaxed atomic positions into the rst.*. As \u8220"lmf \u8211-help\u8221" shows, si \u8211-rs=1,1,1,0,0@ can read atomic position from ctrl file.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Generate default ctrl from ctrls by ctrlgenM1.py\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To run programs of lm7K (lmfa, lmf, lmchk) in ecalj, we need an input file {\f1 ctrl.*}, which contains not only structures but also other settings. To generate {\f1 ctrl.*} from {\f1 ctrls.*}, we have a command "ctrlgenM1.py" (written in python 2.x and call fortran programs(lmfa,lmchk) internally). Two steps required to complete ctrl file: (i) we give reasonable options when we run ctrlgenM1.py. Then (ii) we may edit the ctrl file afterward. In anyway, ctrl file is the starting point of calculations; ctrls is required just in order to generate ctrl.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 At first, try {\f1 ctrlgenM1.py} without arguments. It shows help. To generate {\f1 ctrl} from {\f1 ctrl}, type\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1    $ ctrlgenM1.py cu --nk1=8\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Here cu specify ctrls.cu. The option \u8211-nk1=8 means the number of division of the Brillouin zone for integration. It means 8x8x8 division. If we like to use 8x8x4, we have to supply three arguments \u8211-nk1=8 \u8211-nk2=8 \u8211-nk3=4. The above command gives following console output.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     $ ctrlgenM1.py cu --nk1=8\line
     === INPUT arguments (--help gives default values) === \line
      --help  Not exist\line
      --showatomlist  Not exist\line
      --nspin=1\line
      --nk=8\line
      --xcfun=vwn   !(bh,vwn,pbe) \line
      --systype=bulk !(bulk,molecule)\line
      --insulator  Not exist !(do not set for --systype=molecule)\line
\line
    ...\line
\line
    OK! A template of ctrl file, ctrlgen2.ctrl.cu, is generated.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As we see above, options which you specified are shown at the beginning of the console output (in this case \u8211-nk1=8). Others such as \u8211-nspin=1 are default settings. If we like to perform spin-polarized calculations, we add other option \u8217'\u8211-nspin=2\u8217' as\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     ctrlgenM1.py nio --nspin=2 --nk1=6\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (NOTE: In the spin-polarized case, we need to set initial condition of size of magnetic moment at each atoms. Set it in {\f1 ctrls.*} as in the previous section, or edit MMOM of ctrl file ({\f1 MMOM=s p d f ...}) to be like {\f1 MMOM=0 0 1.2}.). The {\f1 ctrlgenM1.py} generates ctrl file named as {\f1 ctrlgenM1.ctrl.cu}. To do calculations, copy it to ctrl.cu so that lmf can recognize it.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1    cp ctrlgenM1.ctrl.cu ctrl.cu\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 crystal structure checker: lmchk\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Do lmchk to confirm that we can let lmf know correct crystal structure. It also show crystal structure informaiton, equivalent sites, site index and so on.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1    lmchk --pr60 cu  (--pr# gives more informations if # is number)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then it reads {\f1 ctrl.cu}. {\f1 --pr60} is an option of verbose. Bigger number gives more information.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Lattice info, Space group symmetry operations (in lmf format), and their generators (these operations can be generated from a few of them.)\line See SYMGRP in Document/Manual/CategoryAndToken.org. about how to represent the operations.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Show atomic positions in ctrl file.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Tabulate MT radius and distance between atomic sites.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (lmchk \u8211-help shows help, but difficult to see. Not need to read it first.)\line lmchk is also shows atom (MT site) id (position and class(equivalent positions). This is needed to interpret PDOS.\line :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 ctrl file\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is not necessary to look into ctrl file first, although some details are explained in the generated ctrl file. Please compare obtained results by lmf with those by other packages or literatures; let me know if you find something strange or your questions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is necessary to edit ctrl file to use full ability of lmf. For example, LDA+U, atomic position relaxation, core level spectroscopy, Change setting of default MTO and lo, better mixing procedure for stable convergence; higher accuracy, and so on.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 But a few of ctrl file is easy to modify. Search these words and read explanations embedded in ctrl file.\line (1)XCFUN\line (choice of XC\u8212-it is not need to repeat ctrlgenM1.py). It is also possible to change number of k points for sampling, to modify crystal structure slightly, and so on; all things needed are in ctrl. It is not needed to repeat ctrlgenM1.py again.\line (2)SO\line To obtain correct dispersion around top of valence at {\i \u915?} point for GaAs, we need to set SO=1 and NSPIN=2. QSGW calculation (by gwsc) do not allow this option now; Thus we run lmf (or lmf-MPIK) with such settings changed in ctrl file, after QSGW is converged.\line {\f1 lmf --input} shows what can we write in ctrl file. But more than half are not for users, but for developers (or irrelevant now).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Run LDA/GGA calculations, and get convergence\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Here we show how to get converged results from a {\f1 ctrl} file.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 At first, we need initial guess of charge density. It can be given by a super position of atomic charge density. To obtain the charge density, we solve atoms first. It is by\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1    $ lmfa gaas | tee llmfa\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It takes just a few seconds. Here tee is a command of Linux. It keeps console output (standard output) to a file (llmfa in this case).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then try\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     $ grep conf llmfa\par}
{\pard \ql \f0 \sa180 \li0 \fi0 . Then you see a key point that\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 conf:SPECUUUUUUATOM= Ga : --- Table for atomic configuration ---\line
conf:  isp  l  int(P) int(P)z    Qval     Qcore   CoreConf\line
conf:    1  0       4  0         2.000    6.000 => 1,2,3,\line
conf:    1  1       4  0         1.000   12.000 => 2,3,\line
conf:    1  2       4  3        10.000    0.000 => \line
conf:    1  3       4  0         0.000    0.000 => \line
conf:    1  4       5  0         0.000    0.000 => \line
conf:-----------------------------------------------------\line
conf:SPECUUUUUUATOM= As : --- Table for atomic configuration ---\line
conf:  isp  l  int(P) int(P)z    Qval     Qcore   CoreConf\line
conf:    1  0       4  0         2.000    6.000 => 1,2,3,\line
conf:    1  1       4  0         3.000   12.000 => 2,3,\line
conf:    1  2       4  3        10.000    0.000 => \line
conf:    1  3       4  0         0.000    0.000 => \line
conf:    1  4       5  0         0.000    0.000 => \line
conf:-----------------------------------------------------\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is an initial electron distribution, and how we divide core and valence. In this case core charge Qcore are \u8220"6 electron for s channel=1s,2s,3s and 12 electron for 2s and 3p\u8221". Qcore is treated by frozen core approximation. See Sec.2.5 in Ref.{\field{\*\fldinst{HYPERLINK "#kotani2015pmt"}}{\fldrslt{\ul
[kotani2015pmt]
}}}
. Qval means electrons for valence s,p,d channels. The valence channels are 4s,4p,4d,4f (if we set EH=s,p,d,f) in this case The int(P)z column is for local orbital. Thus we have 3d treated as local orbital. (ecalj allow add one local orbital per {\i l}.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The isp index means spin (1 or 2), since \u8211-nspin=1 (when we invoke ctrlgenM1.py) for GaAs, no isp=2 exist. In summary we have 4s,4p,4d,3d,4f as valence. This means we use corresponding number of MTOs and local orbitals.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 After lmfa, let us start main calculation.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     $ lmf cu\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In unix, we ca save console output to llmf by {\f1 $ lmf cu | tee llmf}. As it starts iteration calculations, it shows similar output again and again (it is a little too noisy now). Then you end up with self-consistent result as\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     ......\line
   it  8  of 30    ehf=   -3304.895853   ehk=   -3304.895853\line
 From last iter    ehf=   -3304.895856   ehk=   -3304.895855\line
 diffe(q)=  0.000003 (0.000007)    tol= 0.000010 (0.000010)   more=F\line
c ehf=-3304.8958531 ehk=-3304.8958529\line
 Exit 0 LMF \line
 CPU time:    7.024s     Mon Aug 19 02:03:19 2013   on  \par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\f1 it  8  of 30} means it stop at 8th iteration, although we set maximum number of iteration 30. Note that this number is given by {\f1 ITERUUUUUUNIT=30} in {\f1 ctrl.cu}). {\f1 ehf} and {\f1 ehk} are the ground state energy in Ry. They are calculated in a little different procedure. Although they are different during iterations, it finally get to be the almost the same number. (But they can be slightly different even converged for large systems. But you don\u8217't need to care it so much).\line NOTE: ehk:Hohenberg-Kohn energy, ehf: Harris-Faulkner energy.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8220"grep diffe lllmf\u8221" shows how the changed of total energy (and charges) during iteration. diffe mean changes of energy with previous iteration, (q) is for electron density difference as well. See also save.* file, which only show ehk and ehk obtained by each iteration.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8220" grep gap llmf\u8221" shows how the band gap changes (in the usual setting), two same numbers per iteration are shown now.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Thus we do have ground state energy. Although output of lmf is long, most of all are to monitor convergence (we will shrink it). As long as it converged well, you don\u8217't need to look into it in detail. Eigenvalues are shown as\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1  bndfp:  kpt 1 of 4, k=  0.00000  0.00000  0.00000   ndimh = 122\line
 -1.2755 -1.2008 -1.2008 -0.2052 -0.2052 -0.2052 -0.0766 -0.0766 -0.0766\line
 -0.0174 -0.0174 -0.0174  0.1094  0.1095  0.1095  0.2864  0.2864  0.4170\line
  0.4170  0.4736  0.6445  0.6445  0.6445\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is at k= 0.00000 0.00000 0.00000 . (because of historical reason, two same bndfp: are shown in each iteration; two band path method). \u8220"{\f1 lmf cu| grep -A6 BZWTS}\u8221" shows the Fermi energy (for insulator, we see band gap). Deep levels which gives little dependence on k are core like levels. These are in Ry; zero level is not so meaningful (for convenience, it is simply determined from the potential at MT boundaries).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 rst.* contains is the main output which contains electron density. mix.* is a mixing file (which keeps iteration history). When you restart lmf again, it read rst.cu and mix.cu. If you start from lmfa result, please remove them. We can do parallel calculation with lmf-MPIK, we can invoke it with mpirun -np 8 lmf-MPIK cu. It should give the same answer.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 DOS, PDOS plot\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We already have script to plot dos, band, and pdos from the result of lmf self-consistent calculations. We have scripts\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     jobUUUUUUtdos, jobUUUUUUband, jobUUUUUUpdos\par}
{\pard \ql \f0 \sa180 \li0 \fi0 . Look into these scripts, and then you see how to plot them.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For total DOS plot, it is better to check ctrl file; {\f1 BZUUUUUUTETRA=1}(this is default; thus make sure that {\f1 BZUUUUUUTETRA} do not exist or {\f1 BZUUUUUUTETRA=1}). In addition, it might be better to enlarge number of k point {\f1 NKABC} in ctrl file to have smooth curve. Then we do\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     jobUUUUUUtdos cu\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This shows total DOS as\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: img/doscu.eps]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The range of DOS and division of total DOS is given by DOSMAX and NPTS in ctrl. Edit tdos.cu.glt for gnulot for your presentation. Please look into job file in your bin directory. It is a small script.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For PDOS plot,\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     jobUUUUUUpdos cu\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It shows figures (number of figures are number of atoms in the cell) in gnuplot (they are written in the same position on X-window; move top one a little). The command {\f1 jobUUUUUUpdos} is a little time-consuming because we use no symmetry to distinguish all lm channels. (PDOS is not yet implemented for SO=1 case; spin-orbit coupling $\\L\\dot S$ is added.) We can edit script of gnuplot (pdos.site*.*.glt) for your purpose. To plot again, run\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1   gnuplot -persist pdos.site001.cu.glt\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In principle, meanings of all data files are shown (see at the bottom of console output about lm ordering in a line), thus not so difficult to rewrite *.glt. For example, to plot eg and t2g separately. (NOTE: site id is shown by lmchk).\line : Usually lmf and so on recognize options such as -v option. For example, \u8217' lmf gaas -vnspin=2\u8217' or \u8217'lmf gaas -vso=1\u8217'. This option changes values of variables defined in {\f1 % const} section. This is recorded in save.* file, and also shown at the top of console output. However, joband so on, do not yet accept these options. Thus we need to modify ctrl file without using -v option. Or you need to write these option to these command by hand (we will fix this problem in future.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Band plot\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For band plot, we have to set symmetry lines along which we plot eigenvalues. Collections {\f1 syml.*} are in ecalj/MATERIALS/. (On Jan2017, we prepared automatic generator of syml.* See Sec.{\field{\*\fldinst{HYPERLINK "#sec:getsyml"}}{\fldrslt{\ul
4.7.1
}}}
). Choose and modify one of them and rename it. I will gather other samples soon. \u8217'BZ wikipedia\u8217' or something else will help you to interpret it.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To do band plot, we need {\f1 syml.cu} in your directory.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1    $ cp ~/ecalj/MATERIALS/Cu/syml.cu .\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then check {\f1 syml.cu}; it is\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     21  .5 .5 .5     0  0 0   L Gamma\line
    21   0  0  0     1  0 0   Gamma X\line
    0   (this is the terminator line)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We supply ten data for each lines (integer, three real, three real, two words). First line means, we calculate eigenvalues for {\b k} points from {\b k}=(0.5,0.5,0.5) to {\b k}=(0,0,0). "L Gamma" are names of two end points (.5 .5 .5) and (0 0 0) in this case. These names are used in a gnuplot script for band plot (bndplot.isp*.glt). Second line means, we calculate eigenvalues for k points from {\b k}=(0,0,0) to {\b k}=(1,0,0). 3rd line means calculation just stop here. Units of {\b k} are in 2{\i \u960?}/{\f1 ALAT} (or 2{\i \u960?}/(ALAT+DALAT)@ if {\f1 DALAT} exist.). A line starting from \u8217'#\u8217' is neglected (comment line).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To do band plot, run\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     $ jobUUUUUUband cu\par}
{\pard \ql \f0 \sa180 \li0 \fi0 . This is for both nspin=1 and nspin=2 (These scripts try to determine the Fermi energy first. You may skip it in cases (but need to change the script)).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: img/bandcu.eps]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 syml genearator\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Jan2017, we added directory ecalj/GetSyml, which contains automatic generator of symmetry-line file syml.* from  ctrl.*). Simultaneously, we plot a picture of BZ showing the symmetry lines by matplotlib. See ecalj/GetSyml/README. We use open softwares spglib and seekpath (these should be installed separetely). We have to add acknoledgement to them (see README) )when we use this generator.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Useful samples: ecalj/MATERIAL/\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Not only {\f1 ecalj/lm7K/TestSamples} (some of them are by older version), We have a material database in {\f1 ecalj/MATERIALS/}. Move to the directory, and type\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1   $ ./jobUUUUUUmaterials.py\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then it shows a help. You see\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ...\line
=== Materials in Materials.ctrls.database are:===\line
  2hSiC  3cSiC  4hSiC  AlAs  AlN  AlNzb  AlP  AlSb  Bi2Te3  C\line
  CdO  CdS  CdSe  CdTe  Ce  Cu  Fe  GaAs  GaAsUUUUUUso  GaN\line
  GaNzb  GaP  GaSb  Ge  HfO2  HgO  HgS  HgSe  HgTe  InAs\line
  InN  InNzb  InP  InSb  LaGaO3  Li  MgO  MgS  MgSe  MgTe\line
  Ni  NiO  PbS  PbTe  Si  SiO2c  Sn  SrTiO3  SrVO3  YMn2\line
  ZnO  ZnS  ZnSe  ZnTe  ZrO2  wCdS  wZnS\line
...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 . For these simple materials (now 57 materials), input files can be generated, and run them automatically by a command {\f1 ./jobUUUUUUmaterials.py} below. The ctrls are stored in {\f1 ecalj/MATERIALS/Materials.ctrls.database} in a compact manner (in addition, options passed to ctrlgenM1.py and options to lmf-MPIK are included). See {\f1 ecalj/MATERIALS/README} about how to add new material to it; it is not difficult. The command {\f1 ./jobUUUUUUmaterials.py} gives ctrls.* for these materials from descriptions in the {\f1 Materials.ctrls.database}. And then it generates ctrl file by calling ctrlgenM1.py internally, and run lmfa lmf-MPIK successively (when no \u8211-noexec).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Try {\f1 ./jobUUUUUUmaterials.py Fe --noexec}. (not fe but Fe as it shown above) at {\f1 ecalj/MATERIALS/}. Then it makes a directory Fe/ and set ctrl.fe (also ctrls.fe) in the directory. Without \u8217'\u8211-noexec\u8217', it does calculation for Fe successively. As for NiO and Fe, we see that {\f1 ./jobUUUUUUmaterials.py} gives SPECin generated ctrls and ctrl files. (Look into ctrls.fe; we need SPEC section when we add MMOM.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Try {\f1 jobUUUUUUmaterials.py GaAs Si}.\line Then directories GaAs/ and Si/ are generated. See {\f1 save.*} files containing total energies iteration by iteration. Starting from {\f1 ctrl.*} in these directory, the command perform DFT calculations (Console output is stored in {\f1 llmf}, {\f1 save.*} gives total energies. {\f1 rst.*} contains self-consistent density, from which we can calculate energy bands and so on).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8220"{\f1 ./jobUUUUUUmaterials --all --noexec}\u8221" generates ctrls and ctrl files of these materials. \u8220"{\f1 ./jobUUUUUUmaterials --all}\u8221" do self-consistent LDA calculations for materials (it takes an hour or more. To change the number of cores for lmf-MPIK, set option -np (number of core). See help of {\f1 ./jobUUUUUUmaterials} (type this without arguments).\line To make band plot and so on for Fe, follow instructions already explained.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1   $ ./jobUUUUUUmaterials.py Fe  (and need to type return)\line
  (If you like start over, remove Fe/ under it first).\line
  $ cd Fe\line
  $ ./jobUUUUUUmaterials.py fe\line
    (but it might be better to do --noexec, and observe Fe/ctrls.fe and\line
    Fe/ctrl.fe first. grep conf llmf shows the initial electron distribution).\line
  $ cat save.fe  (this shows total energies of each iteration. 'c ' at\line
    the first column gives converged result. 'h ' is from atm file.)\line
        If it does not ends with 'c ...' line, something strange\line
    occurs. see llmf (console out put of lmf is saved to llmf).\line
  $ cp ../syml.fe .\line
  $ jobUUUUUUband fe -np 4 \line
        (As I said, this shell script do not yet accept\line
        options to lmf. Look into the script).\line
        (This calculate fermi energy first for safe; it takes\line
        some time)       \line
  $ jobUUUUUUtdos fe\line
  $ jobUUUUUUpdos fe (as I said, this supress space-group symmetry, thus time consuming).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 At the end of {\f1 jobUUUUUUpdos}, we show a help which pdos data is where (In pdos file, we have 26 numbers a line; first is energy, 2-26 are pdos for s,p,d,f,g; which is which are shown in the help). See joblmf file also (it contains options to invoke lmf. This is shown in save.*. In principle, options in joblmf should be passed to band plot and so on. But not yet implemented (it is not so difficult; I have to do it).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 After doing {\f1 ./jobUUUUUUmaterials} foobar, you may like move it back to original... In such a case, git works. At {\f1 ecalj/}, do\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1   $ mv MATERIALS MATERIALS.bk\line
  $ git checkout MATERIALS\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then you can see {\f1 MATERIALS/} is moved back to just downloaded one.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 How to add spin-orbit coupling?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 In the LDA level calculations, we can use\line
SO=0 (no SO), SO=1(LdotS), or SO=2(LzSz) schemes.\line
However, SO=1 is not the non-collinear method\line
(z-direction is assumed to be spin direction; in cases\line
we may need to primitive cell so that the z-direction\line
is the spin direction).\line
\line
Within LDA, we have two possible ways.\line
(A) Do LDA and/or QSGW with SO=0 first.\line
Then apply the spin-orbit coupling by perturbation.\line
or (B) do self-consitent LDA calculations with SO=1 (or =2).\line
For semiconductors, we think you observe little differences.\line
\line
Let me explain the case (A).\line
After converged with nspin=1, create new directory and copy\line
  ctrl.gas, rst.gas, sigm.gas, QGpsi,\line
to it. Then we set\line
  nspin=2 \line
  METAL=3 (usually this is default)\line
  SO=1  (this is ldots calculation off-diagonal elements included).\line
  Q=band (we do not change potential.)\line
in ctrl.gas. \line
Then run\line
>lmf gas >& llmfUUUUUUSO\line
You can see "band gap with SO" by \line
> grep gap llmfUUUUUUSO.\line
Then you can see two same lines.\line
  VBmax = 0.101949  CBmin = 0.236351  gap = 0.134402 Ry = 1.82786 eV\line
  VBmax = 0.101949  CBmin = 0.236351  gap = 0.134402 Ry = 1.82786 eV\line
(two lines per iteration is shown in metel mode).\line
This is the band gap with SO as a first-order perturbation \line
on top of the "QSGW without SO". When you use ctrl fil e generated by\line
ctrlgenM1.py. You can do the above procedure with\line
>lmf --rs=1,0 gas -vnit=1 -vso=1 -vnspin=2 -vmetal=3 --quit=band\line
(--rs=1,0 read rst.gas but not write rst.gas. Run lmf --help.\line
 The switch -v (-vso=1 in this case) replaces so=0 with so=1. \line
 This is recorded in save.gas file).\line
\line
For band plot, you can use the same procedure \line
for the case without SO. (Look into the shell script jobUUUUUUband.\line
You have to modify it so that \line
  '--rs=1,0 gas -vnit=1 -vso=1 -vnspin=2 -vmetal=3 --quit=band' \line
is added to arguments for >lmf --band:syml ...).\line
(--quit=band is not necessary if we like to renew eigenfunctions\line
self-consistent. Anyway we expect little differences.)\line
\line
---\line
\line
\\noindent QSGW with SO:\\\\\line
For given sigm file, it is possible to attain self-consisency with SO=1(or=2) with keeping sigm (then we do not set Q=band). \line
However, this imply that Vxc is fixed in QSGW, \line
it is not necessary better than the above procedure.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 PROCASR (VASP format) generator\par}
{\pard \ql \f0 \sa180 \li0 \fi0 PROCASR mode for lmf (not yet in lmf-MPIK) Band weight decomposition. (Size of circles show the size of components. Superposed on band plot). See /MATERIALS/MgOUUUUUUPROCAR/README@, May19.2014\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 efermi.lmf\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is generated by lmf(lmf-MPI), which is used in the job.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Effective mass calculation\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 New band plot and effective mass calculation (curvature):\line
(see sample at ecalj/MATERIALS/massUUUUUUfitUUUUUUtest/ and its README).\line
------------\line
We now read syml.* in lm7K/fp/bndfp.F. Thus jobUUUUUUband is changed\line
(nspin=1 or nspin=2 is automatically choosed by jobUUUUUUband command).\line
We do not use plbnd anymore. If necessary, you can modify\line
"writeband" subrouitne in lm7K/fp/bndfp.F by yourself.\line
\line
Follow steps to get effective mass...\line
1. \line
New syml read label of k point. It is shown by the gnuscript\line
file "bandplot.glt". Type "gnuplot -p bandplot.isp1.glt" and so on,\line
when you like to remake band plot.\line
\line
2. \line
New syml allow a special input suitable to determine effective mass\line
for semiconductor. An example of new syml is (this is a case of GaAs)\line
------ syml example start ------------------\line
#NOTE: ndiv2, ninit2 nend2 etolv etolc are for mass mode.\line
#ndiv qleft(1:3) qright(1:3) llabel rlabel  ndiv2 ninit2 nend2 etolv(Ry) etolc(Ry)\line
5  0 0 0   .5 .5  .5    Gamma  L  257 1   32     0.1 0.01\line
5  0 0 0    1.  0  0    Gamma  X  \line
5  0 0 0   .75 .75 0    Gamma  K  257 1   32     0.1 0.01\line
-------  end ----------------------\line
New feature is start from the next columns of symmetry points labels.\line
In this example, 257 means a line connecting 0 0 0 (Gamma) and .5 .5 .5 (L) is divided\line
into 256. Then we only calculate from the 1st point to the 32th point\line
among 257 points.\line
\line
Then we see not only band*.spin*, but also\line
we have files such as "Band001Syml001Spin1.dat" \line
files which contains eigenvalues for selected bands, that is,\line
we make a table of detailed plot of energy bands \line
whose energy E at Gamma (exactly speaking, at\line
left-end point), is evaltop-etolv (Ry) < E < econtop + etolc(Ry).\line
\line
(As its head line shows, Band*Syml*.dat file contains data\line
 isyml,iq, ib,isp, QPE-EF, QPE-QPE(start), |q|, mass=2*2*(QPE-QPE(start))/|q|**2).\line
 here QPE(start) is QPE at the left-end of sym line.)\line
\line
This sample is only for Gamma-L and Gamma-K.\line
\line
Let us use this example for GaA and run jobUUUUUUband.\line
(e.g., jobUUUUUUband gaas -np 2 -vnspin=2 -vso=1; \line
 note that -vfoobar=xxx replace value of foobar with xxx in ctrl.gaas)\line
Then you can see not only bandplot.isp1.glt.\line
Then you can see usual energy bands plot in addition to the dense energy bands\line
superposed on it. The dense energy bands are controlled by\line
the part "257 1   32     0.1 0.01". In the current version, set all lines\line
of etolv and etolc are the same.\line
\line
There are useful data, not only the eigenvalues in "Band001Syml*Spin*.mass" \line
files. But, anyway, we have to determine effective mass from the eigenvalues\line
on the dense symmetry mesh.\line
\line
\line
3. \line
Least square fit by gnuplot. \line
\line
We have an example is at ~/ecalj/MATERIALS/massUUUUUUfitUUUUUUtest\line
Look into ./job and run it. \line
See README in it.\line
----\line
For your convenience, we have dE/dk in the bnd*.spin* files.\line
This is useful to determine the Fermi surface.\line
See the efermi.lmf to read the Fermi energy.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 density and |eigenfunction|{\super 2} plot\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We can generate density and $\\sumUUUUUU\{n\} |\{\\bf k\}n\{\{\\bf k\}n\}(\{\\bf r\})|^2$ by {\f1 --density} mode (after 18mar2016) Usages are\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 >mpirun -np 24  lmf-MPIK si --density \par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is for density. We have {\f1 smrho.xsf}, and {\f1 rho1mt*}(1st components) and {\f1 rho2mt*}(2nd components).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 >mpirun -np 24  lmf-MPIK si --density,iq=1,ib=5\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\f1 iq=1} means Gamma point. See index shown by the console output of {\f1 lmf}. The index {\f1 ib} is the band index.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 >mpirun -np 24  lmf-MPIK si --density,iq=1,ib=5,6,7\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In this case we have sum for {\f1 ib=5,6,7}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Use xcrysden as\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 >xcrysden --xsf smrho.xsf\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then open menu \u8217'Tools\u8594?DetaGrid\u8217'. Then plot isosurface and/or planes. For example, you need to set isovalue, and/or turn on \u8217'display color plane\u8217' buttons.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 LDA+U\par}
{\pard \ql \f0 \sa180 \li0 \fi0 There is a document of {\field{\*\fldinst{HYPERLINK "file://../BACKUP/MarksOriginalDoc/fp.html#ldaplusu"}}{\fldrslt{\ul
file://../BACKUP/MarksOriginalDoc/fp.html#ldaplusu
}}}
. But I include all required things here. Usage is slighly changed. We have examples at\line \u160?/ecalj/MATERIALS/erasldau,GdNldau@. I am going to add some samples.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To run LDA+U calculaiton, we need two extra steps in addition to usual LDA calculaitons:\line Step.(1) Set three tokens in ctrl file. LDA+U type, Parameters U and J.\line Step.(2) Prepare occnum.{\i ext} (initial condition of diagonal part of the density matrix).\line Let us explain one by one.\line \line For the point (1), we have a new line in SPECsections. In ecalj/MATERIALS/erasldau, it is\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1        IDU= 0 0 2 2 UH= 0 0 0.1 0.632 JH= 0 0 0 0.055\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The SPECtoken tells lmf that no U is to be added to the s or p channels, but that a U is to be added to the d and f channels. IDU=2 specifies LDA+U functional style 2; this is the "Fully Localized Limit" described in Liechtenstein, PRB 52, R5467 (1995)). IDU=1 specifies the "Around Mean Field" functional (Petukhov, PRB 67, 153106 (2003)). U=0.1 Ry is included on the d orbital, and U=0.632 is included on the f orbital. Additionally J=0.055 is put on the f orbital.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \line It is stored in .ext@. In principle, the density-matrix is read from and written to the file .ext@. Thus, in principle, we need a dmats.ext as an initial condition. However, we usually use diagonal-only density matric occunum.ext instead. If no .ext@, we read .eras@ instead. We explain it afterwards. Two density-matrices (for each spin) are written to this file in a (2l+1) by (2l+1) block for each l block for which a U is defined. dmats.ext is an ASCII file which you can read, and it\u8217's quite useful to interpret what\u8217's going on. The diagonal parts are the occupation numbers and are the most important. It is in the spherical harmonics (not the real harmonics). The harmonics is defined in the ecaljdetail.tex.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that in the LDA case, complete information is contained in the density, stored in file rst.ext. In the LDA+U, the Density-matrix is stored in file dmats.ext. Thus complete information is contained in the combination of rst.ext and dmats.ext.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The density matrix is printed out in the standard output. It can be represented on the real harmonics. To check it, run\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 >lmf eras --quit=dmat\par}
{\pard \ql \f0 \sa180 \li0 \fi0 . This stops promptly without side effect. Then the symmetrized density matrix represented on the spherical harmonics and real harmonics are shown (we make symmetrization for the given SYMOPS in ctrl file).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 .(2)@\line Usually it is too tedious to supply dmats.ext itself. Instead, you can supply an "occupation numbers" file occnum.ext, which is a starting guess for the density-matrix (its diagonal part). occnum.ext has one line of (2l+1) numbers for the occupation numbers of the first spin, following by a line with the occupation numbers for the second spin. In the case of ecalj/MATERIALS/erasldau, we have occnum.eras.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Er has 11 f electrons, 7 of which go into the majority channel and 4 into the minority channel. There is some choice in which m states to fill and which to keep empty. A key point is that the self-consistent solution you end up with will depend on this choice. The ErAs test uses the following input file for occnum.eras :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1   0 0 0 0 0\line
  0 0 0 0 0\line
  1 1 1 1 1 1 1\line
  0 1 1 1 1 0 0\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The first and second lines are occupation numbers for the majority and minority d channel; the third corresponds to the majority f channel where all states are taken to be filled. The last line corresponds to the minority f channel. In this case, m=-2,-1,0,1 are filled and m=-3,2,3 are empty. As the script notes, different choices of starting occupation numbers lead to different self-consistent solutions. The one with the lowest energy is that which satisfies Hund\u8217's rule (m=0,1,2,3 filled and m=-3,-2,-1 empty).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is possible to use \u8217'real harmonics (see ecalj/fpgw/exec/jobpdos for definition)\u8217' instead of \u8217'spherical harmonics\u8217'. As for occnum.ext, you can use\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 % real\line
  0 0 0 0 0\line
  0 0 0 0 0\line
  1 1 1 1 1 1 1\line
  0 1 1 1 1 0 0\par}
{\pard \ql \f0 \sa180 \li0 \fi0 . Here {\f1 '% real'} means on the basis of real harmonics. Check whether this is correctly supplied or not by >lmf \u8211-quit=dmat eras@.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To run with spin-orbit coupling, set HAM=1, then run >grep IORBTM -A20 llmf , here llmf is the standard output of lmf. Then you see orbital moments at \u8217'IORBTM\u8217'.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 NOTE for gwsc:\line When you just like to generate initial condition for gwsc by LDA+U, you have to exit right after sigm generated (add right after {\i e}{\i c}{\i h}{\i o}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}{\i r}{\i u}{\i n}{\i e}{\i c}{\i h}{\i o}\u8196?=\u8196?=ix \u8217'iteration over==\u8217'@ in gwsc). Then gwsc stops right after sigm generated. Then you have to remove or comment out IDU (or set all zero) in ctrl file. Then run lmf together with obtained sigm file. This is because sigm contains LDA+U kind of effect. After this, check energy band (jobband) for check. And run usual gwsc\u8212- then you can perform QSGW with the LDA+U\u8217's initial condition.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 QSGW after LDA+U\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We modified 7K/subs/mUUUUUUrdctrl.F@(feb2019), so that An option which makes \u8220"QSGW after LDA+U\u8221" easy to run. A line for atom section\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1        IDU=0 0 0 12  UH=0 0 0 .7  JH=0 0 0 0\par}
{\pard \ql \f0 \sa180 \li0 \fi0 works in ctrl file. Here 12=10+2 instead of 2 means that we set UH=JH=0 when sigm.* exits. Thus we can perform QSGW(without U term) calculaiton, after LDA+U calculaiton. This can be convenient for cases when we control the initial condition of QSGW.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 partially occupied core-hole\par}
{\pard \ql \f0 \sa180 \li0 \fi0 See {\field{\*\fldinst{HYPERLINK "file://../BACKUP/MarksOriginalDoc/fp.html#ldaplusu"}}{\fldrslt{\ul
file://../BACKUP/MarksOriginalDoc/fp.html#ldaplusu
}}}
 around. Search the keyword ldau in fp/lmfp.F \u8594? sudmtu.F which read occnum.gdn.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Core-hole procedure is one of the important procedure. An example setting for Nd case is\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 --------------------------\line
      ATOM=Nd Z=60 R=3.00\line
      C-HOLE=4f C-HQ=-11 P=6.5,6.5,5.5,5.2\u12288?\u12288?<-- this line is added\line
--------------------------\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab C-HOLE=4f means that 4f core is to set \u8220"core hole\u8221".\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab P=6.5,6.5,5.5,5.2 is to set principle (fractinal) quantum number explicitly for valence electrons. \u12288?To set this, try lmfa nd|grep conf first. The you can see the electronic configulation of an atom. Key point here is to set \u8220"5.2\u8221" for f channel. Thus 4f is treated as core and 5f as valence. Fractional parts (0.2 of 5.2) means the radial funciton contains nodes as 5f and closer to the energy right on the change of 4f to 5f. If 5.9, it is closer to the enrgy almost have noded of 6f.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab C-HQ means that corehole is \u8722?\u65297?\u65297?. Thus we have only 14-11=3 electrons for 4f (spherically occupied).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab Run lmfa. If it does not show that (warning) atom not neutral@, it is the neutral atom. You can also chage the message tagged by core hole:@ Simultaneously you can control initial total valence charge by {\f1 Q=...}\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Very recently (aug2019), I fixed a bug of EFERMI(fermi energy for GW calculaiton, given by /main/heftet.m.F@) for the case C-HOLE is supplied.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 How to run QSGW calculation?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In the QSGW, we calculate a {\i non-local exchange-correlation potential} $V^\{\\rm xc\}(\{\\bf r\},\{\\bf r\}')$, by a procedure of GW calculation (very time-consuming part). Then difference $V^\{\\rm xc\}(\{\\bf r\},\{\\bf r\}')V-VUUUUUU\{\\rm xc\}^\{\\rm
LDA\}(\{\\bf r\})\\delta(\{\\bf r\}-\{\\bf r\}')$ is stored into sigm.* file. The potential file is a key to perform QSGW calculations as seen in Fig.{\field{\*\fldinst{HYPERLINK "#gwscpicture"}}{\fldrslt{\ul
[gwscpicture]
}}}
. The contains static non-local potential $\\SigmaUUUUUU\{\\rm QSGW\}-VUUUUUU\{\\rm xc\}^\{\\rm LDA\}$.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then, we again do one-body calculation by lmf (or lmf-MPIK) where we add this sigm to one-body potential ; when we run or -MPIK@(k-parallel mpi version), is read and added to the one-body potential if we have HAM=12 in ctrl.*. Thus this means that we replace $VUUUUUU\{\\rm xc\}^\{\\rm LDA\}(\{\\bf r\})\\delta(\{\\bf r\}-\{\\bf r\}')$ with $V^\{\\rm xc\}(\{\\bf r\},\{\\bf r\}')$.\line This iteration cycle is performed by a script \u8220"gwsc\u8221" as we explain later on. (In the default setting of {\f1 ctrl.*} file, lmf try to read sigm.* file as long as it exists. If not, do lmf or lmf-MPIK calculation.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To start QSGW calculation by gwsc, we need not only ctrl.si, but also another input file GWinput. Its template GWinput.tmp can be generated by the Step.2 as follows.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As a summary, you have to follow steps below in order to perform QSGW calculation.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab Perform from the Step.1 thru the Step.4 (up to lmfa) in Sec.{\field{\*\fldinst{HYPERLINK "#lm7K-scf"}}{\fldrslt{\ul
4.5
}}}
. (as same as the case of LDA/GGA).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 You don\u8217't need to perform LDA calculation in advance, since gwsc perform LDA/GGA calculation at its beginning. (It means that we start from the one-body Hamiltonian {\i H}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}0 in LDA/GGA as initial condition.In cases, LDA/GGA give poor initial conditions for QSGW; in such a case, we may need another trick to prepare starting point.).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 [Caution: We have to use the same ({\i l} in the expansion of eigenfunctions in each MT) for all the MT spheres. (This is due to historical reason; we may need to fix this.)] xxx need to explain xxx\par}
{\pard \ql \f0 \sa180 \li360 \fi0 The purpose of this script is to get GWinput.tmp. Other files generated are not used in the following stage.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab .\line GWinput is the input file describing the computational conditions for {\i G}{\i W}calculation. Usually, the default setting gives reasonable results. To reduce computational time, we may use (atom)=2@ for oxygen sites (this may be also other small atoms.). lcut GWinput -A1@ shows for each atomic sites) These step 2. and step 3. are just only to get GWinput.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 GWinput\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In order to perform QSGW, one another input file {\f1 GWinput} (no extension) is necessary in addition to {\f1 ctrl.*}. Thus all input files for QSGW is just two files, ctrl.* and GWinput. A template {\f1 GWinput} can be generated by a script {\f1 mkGWINUUUUUUlmf2}. You may have to modify it in cases for your purpose.\line Let us start from ctrls.si;\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 #id  = Si\line
%const bohr=0.529177 a= 5.43095/bohr\line
STRUC\line
     ALAT=\{a\} \line
     PLAT=0 0.5 0.5  0.5 0 0.5  0.5 0.5 0 \line
SITE\line
     ATOM=Si POS=0.0 0.0 0.0\line
     ATOM=Si POS=0.25 0.25 0.25\par}
{\pard \ql \f0 \sa180 \li0 \fi0 . Do {\f1 ctrlgenM1.py si --tratio==1.0 --nk1=6} and copy ctrlgenM1.ctrl.si to ctrl.si. NOTE: the option \u8211-tratio=1.0@ means we use touching MT; this can be checked by {\f1 lmchk si}; since defaults is almost unity (\u8211-tratio=0.97@), this is irrelevant, just to explain options.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We have to write {\f1 GWinput}. The default is given automatically by a command {\f1 mkGWINUUUUUUlmf2};\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     $ lmfa si (lmfa is needed to do in advance).\line
    $ mkGWINUUUUUUlmf2 si\line
    ......\line
    == Type three integers n1 n2 n3 for Brillowin Zone meshing for GW! ==\line
     n1=\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then it pause and ask numbers. You have to type three numbers as 2+ return + 2+return+2 return.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     == Type three integers n1 n2 n3 for Brillowin Zone meshing for GW! ==\line
     n1= 2\line
     n2= 2\line
     n3= 2\line
    2 2 2\line
    ...(skip)...\line
    OK! GWinput.tmp is generated!\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Generated file is {\f1 GWinput.tmp}; you have to copy it to {\f1 GWinput}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     $ cp GWinput.tmp GWinput\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These \u8217'2 2 2\u8217' you typed is reflected in a section \u8217'n1n2n3 2 2 2 \u8217' in {\f1 GWinput}. This means 2x2x2 (8 points in 1st BZ). You can edit it, and change it to e.g. \u8217'n1n2n3 4 4 4\u8217' if you like to calculate self-energy on dense BZ mesh 8x8x8.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The template of GWinput is usually not so bad. But it may give a little expensive setting (or not very good enough in cases).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 NOTE: GWinput allows some options. Some newer points are\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab For the atoms without 3d involved, you can use lcutmx=2. Typically we use lcutmx=2 for oxygen.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab 0 0.0001@ given in GWinput is effective to stabilize the convergence for metals.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Run gwsc script\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Let us perform QSGW calculation. For this purpose, we use a script {\f1 gwsc}. We need to do {\f1 lmfa} in advance. Then do (not need to do {\f1 lmf});\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     gwsc (number of iteration+1) -np (number of nodes) (id of ctrl)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If (number of iteration+1)=0, it gives one-shot calculation from LDA. But it is different from the usual one-shot; since it calculates off-diagonal elements of self-energy also, we can plot energy band dispersion. In cases (for usual semiconductors), it can give rather reasonable results in comparison with experiments from practical point of view.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is an example of one iteration of QSGW cycle. (now a little different but essentially similar)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 takao@TT4:~/ecalj/test1$ gwsc 0 -np 2 si\line
gwsc 0 -np 2 si\line
### START gwsc: ITER= 0, MPI size=  2, TARGET= si\line
--- No sigm nor sigm.$TARGET files for starting ---\line
 ---- goto sc calculation with given sigma-vxc --- ix=,0\line
No sigm ---> LDA caculation for eigenfunctions \line
        Start  mpirun -np 2 /home/takao/ecalj/TestInstall/bin/lmf-MPIK  si > llmfUUUUUUlda \line
OK! --> Start  echo 0| /home/takao/ecalj/TestInstall/bin/lmfgw si > llmfgw00 \line
OK! --> Start  echo 1|/home/takao/ecalj/TestInstall/bin/qg4gw > lqg4gw \line
OK! --> Start  echo 1|mpirun -np 2 /home/takao/ecalj/TestInstall/bin/lmfgw-MPIK  si> llmfgw01 \line
OK! --> Start  /home/takao/ecalj/TestInstall/bin/lmf2gw >llmf2gw\line
OK! --> Start  echo 0|/home/takao/ecalj/TestInstall/bin/rdata4gwUUUUUUv2  > lrdata4gwUUUUUUv2 \line
OK! --> Start  echo 1| /home/takao/ecalj/TestInstall/bin/heftet > leftet \line
OK! --> Start  echo 1| /home/takao/ecalj/TestInstall/bin/hchknw > lchknw \line
OK! --> Start  echo 3| /home/takao/ecalj/TestInstall/bin/hbasfp0 > lbasC \line
OK! --> Start  echo 3| mpirun -np 2 /home/takao/ecalj/TestInstall/bin/hvccfp0 > lvccC \line
OK! --> Start  echo 3| mpirun -np 2 /home/takao/ecalj/TestInstall/bin/hsfp0UUUUUUsc > lsxC \line
OK! --> Start  echo 0|/home/takao/ecalj/TestInstall/bin/hbasfp0  > lbas \line
OK! --> Start  echo 0| mpirun -np 2 /home/takao/ecalj/TestInstall/bin/hvccfp0  > lvcc \line
OK! --> Start  echo 1|  mpirun -np 2 /home/takao/ecalj/TestInstall/bin/hsfp0UUUUUUsc > lsx \line
OK! --> Start  echo 11|  mpirun -np 2 /home/takao/ecalj/TestInstall/bin/hx0fp0UUUUUUsc > lx0 \line
OK! --> Start  echo 2|  mpirun -np 2 /home/takao/ecalj/TestInstall/bin/hsfp0UUUUUUsc  > lsc \line
OK! --> Start  echo 0|  /home/takao/ecalj/TestInstall/bin/hqpeUUUUUUsc  > lqpe \line
OK! --> == 0 iteration over ==\line
OK! --> Start  mpirun -np 2 /home/takao/ecalj/TestInstall/bin/lmf-MPIK  si > llmfUUUUUUgwscend.0 \line
OK! ==== All calclation finished for gwsc 0 -np 2 si ====\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Here {\f1 echo (integer)} is readin in at the beginning of the code. To see it, please look into gwsc script (gwsc is at ecalj/fpgw/exec/ and copied to your bin/ by make install2). In anyway, this console output shows calculations finished normally.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Now we get rst.si and sigm.si file which contains (static version of) self-energy minims $VUUUUUU\{\\rm xc\}^\{\\rm LDA\}$. What we did is the one-shot GW from LDA result; but note that we calculate not only diagonal elements but also off-diagonal elements.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We can write energy dispersion (band plot) in the same manner in LDA. To do it, we need rst.si, sigm.si, ctrl.si, QGpsi. (but QGpsi is quickly reproduced). After you have syml.si (e.g. in ecalj/MATERIALS/), Do\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     $ jobUUUUUUband si\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: img/bandoneshotsi.eps]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 [sigwscone]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can observe large band gap as shown in the Fig.{\field{\*\fldinst{HYPERLINK "#sigwscone"}}{\fldrslt{\ul
[sigwscone]
}}}
. (To see it again, {\f1 gnuplot bnds.gnu.si -p}. All plots are in gnuplot, thus it is easy to replot it as you like).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We have QPU file (and also QPD for spin=2), which contains content of the diagonal part of self-energy. It will be explained elsewhere.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can make total DOS and PDOS plot by\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     $ jobUUUUUUtdos si\line
    $ jobUUUUUUpdos si\par}
{\pard \ql \f0 \sa180 \li0 \fi0 CAUTION:pdos plot is not allowed for so=1. (even tdos\u8211-> ask to t.kotani.)\line To get final QSGW results, we have to repeat iteration until eigenvalues are converged. Note that total energy shown by console output llmf (and also shown in save file) is not so meaningful in the QSGW; we just take it as an indicator to check convergence. Let us repeat 5 iteration more. "-np 2" means one core to use.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 $ gwsc 5 -np 2 si\line
### START gwsc: ITER= 5, MPI size=  2, TARGET= si\line
 --- sigm is used. sigm.$TARGET is softlink to it  ---\line
 ---- goto sc calculation with given sigma-vxc --- ix=,0\line
 we have sigm already, skip iter=0\line
 ---- goto sc calculation with given sigma-vxc --- ix=,1\line
 ...(skeip here) ...\line
\line
OK! --> == 5 iteration over ==\line
OK! --> Start  mpirun -np 2 /home/takao/ecalj/TestInstall/bin/lmf-MPIK  si > llmfUUUUUUgwscend.0 \line
OK! ==== All calclation finished for gwsc 0 -np 2 si ====\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that we do skip 0th iteration (it is for one-shot from LDA) since we start from rst.si and sigm.si given by one-shot LDA. Thus we do just five iterations. Information of eigenvalues are in {\f1 QPU.(number)run} files. (for magnetic systems with nspin=2), wee have {\f1 QPD.(number)run} also). Check it by ls;\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     $ ls QPU.*run\line
    QPU0.run  QPU.1run  QPU.2run  QPU.3run  QPU.4run  QPU.5run\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (These are overwritten when we again repeat gwsc; be careful.) Note that {\f1 QPU0.run} was old one when you did 1-shot GW from LDA at the beginning. In anyway *.0run are confusing files; remove them).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In order to check convergence calculations going well during iteration, do\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1    $ grep gap llmf*\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This shows how band gap changes in llmf.*run files. In metal cases, we need to compare QPU file, magnetic moment or {\f1 grep '[xc] save.*}; this shows end of lmf iteration. Energy is not so meaningful but can be indicator to convergence.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Let us check convergence of the QSGW calculations. For this purpose, it is convenient to take a difference of QPU(QPD) files by a script {\f1 dqpu}. These files are human readable. To compare {\f1 QPU4.run} and {\f1 QPU5.run}, do\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     $ dqpu QPU.3run QPU.4run\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then we see a list of numbers (these are the differences of values in QPU files). Then it shows at the bottom as\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     Error! Difference>2e-2 between:   QPU.4run   and   QPU.5run  \line
    :  sum(abs(QPU-QPD))= 0.05736\par}
{\pard \ql \f0 \sa180 \li0 \fi0 but you don\u8217't need to care it so much. You rather need to check the difference of values. I can say most of all difference (especially around the Fermi energy are ) are almost 0.00eV or 0.01eV, we can judge QPEs are converged. If not converged well, you may need to repeat {\f1 gwsc} again. (when the size of two QPU files are different, dqpu stops.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: img/bandoneshotsi.eps]\cf0} {\cf1 [image: img/bandggasi.eps]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: img/bandqsgwgaas.eps]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Spectrum function: How to calculate $\\langle \{\\bf q\}n|\\Sigma(\\omega)|\{\\bf q\}n\\rangle$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We have an example at ecalj/MATERIALS/SiSigma/, where you can just type job. It calls a shell script gwsigma, which is just a modification of gwsc for spectrum function plotting. If you have sigm.*, it will automatically read it as in the case of gwsc.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 By the script gwsigma, we calculate the diagonal elements $\\rangle \\psi(\{\\bf q\},n)|\\sigmaUUUUUU\{\\rm c\}(\\omega) |\\psi(\{\\bf q\},n)\\langle$. Thus we need to set $\{\\bf q\}$ and band index {\i n} for which we calcualte. In addition, we need to set resolution of {\i \u969?}.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab Set <QPNT> section. This section is to set the q point, and band index for which we calculate the self energy. In addition, energy mesh for plotting is set.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 (A) Set q point set \line
\line
   If you set \line
  ----------\line
  *** all q -->1, otherwise 0;  up only -->1, otherwise 0\line
           1           0\line
  ----------\line
  You will have self-energy for all irreducible k points. This may be needed for A(omega).\line
  or \line
  You have to set all q points as\line
  ----------\line
  *** q-points, which shoud be in qbz.,See KPNTin1BZ.\line
           3            <--- number of readin q point \line
  1     0.0000000000000000     0.0000000000000000     0.0000000000000000 <--1st number is irrelevant\line
  2    -0.5000000000000000     0.5000000000000000     0.5000000000000000\line
  3     0.0000000000000000     0.0000000000000000     1.0000000000000000\line
  ----------\line
   To know allowed q points on regular mesh point, run the command "mkGWINUUUUUUlmf2", then\line
   supply n1,n2,n3. The templete of GWinput.tmp contains all possible q points. Edit it.\line
  \line
   NOTE:Anyq option can allow you to specify any q points by shifted mesh technique.\line
   (if necessary, but only for some special purpose).\line
\line
(B) Band index set\line
  It is specified by the section\line
  ----------\line
  *** no. states and band index for calculation.\line
  2\line
  4  5\line
  ----------\line
  means the self-energy for band index 4 and 5. Just two bands.\line
  If you like to plot self energy from 1 through 8, use\line
  *** no. states and band index for calculation.\line
  8\line
  1 2 3 4 5 6 7 8\line
  ----------\line
  If you need 17 bands for example, it should be 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\line
  in addition to 17 (number of bands at the first line).   \line
\line
\line
(C) energy mesh set\line
  At the bottom of <QPNT> section, we have\line
  ----------------\line
  *****\line
   0.01 2.0\line
  ----------------\line
   Two real number should be supplied.\line
   These are dwplot and omegamaxin, read in hsfp0.m.F by a line \line
     read (ifqpnt,*,err=2038,end=2038) dwplot,omegamaxin\line
   dwplot (=0.01 Ry) is mesh for self energy.\line
   omegamaxin=(2.0 Ry) means the range "-2 Ry to 2 Ry" for self-energy plot.\line
\line
   Note that imaginary part of Sigma is given as the comvolution of ImW(omega) and the pole of Green's function\line
   (esmr in GWinput gives energy smearing of the pole). Resolution for Im W (near omega=0) is by dw in GWinput.)\line
   I think that the reolution of self-energy is ~ 0.05 eV in the default setting.\line
   This is because \{\\tt dw\} \\sim \{\\tt esmr\} \\sim 0.05 eV. \par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab \f1   Run gwsigma. This will run \line
    echo 4| mpirun -np 24 hsfp0,\line
  after dielectric funcition is calculated.\line
  Then we have SEComg.UP (DN) files, Look for file handle, ifoutsec,\line
  for the file in fpgw/main/hsfp0.m.F to see format for the file. \line
  (not hsfp0.sc.m.F but hsfp0.m.F). Search a line\line
       open(ifoutsec,file='SEComg'//sss) (around hsfp0.m.F L1052)\line
   You can find that we use folloing lines to plot SEComg.*.\line
    ----------------                    \line
           write(ifoutsec,"(4i5,3f10.6,3x,f10.6,2x,f16.8,x,3f16.8)")\line
     &          iw,itq(i),ip,is, q(1:3,ip),  eqx(i,ip,is),\line
     &          (omega(i,iw)-ef)*rydberg(),  hartree*zsec(iw,i,ip) !,sumimg                                                   ----------------                    \line
     This means we use energy in eV. \line
     iw:      omega index\line
     itq(iq): band index specified by <QPNT>\line
     ip:      k point index specified by <QPNT>\line
     is:      spin index\line
     q:       q vector (cartesian in 2pi/alat)\line
     eqx:     eigenvalue in eV. (I think relative to the Fermi energy)\line
     (omega(i,iw)-ef)*rydberg():  omega relative to the Fermi energy\line
     hartree*zsec(iw,i,ip):       Self energy. real and imaginary part.(complex, two values)\line
\line
   You can only repeat echo 4| mpirun -np 24 hsfp0 \line
   when you change setting in <QPNT> section.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab Example. There is an example MATERIALS/SiSigma/\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1   plot 'SEComg.UP' u ($9):($10) w l,'' u ($9):($11) w l\line
  can give a plot for Re (SigmaUUUUUUc(omega)) and Im(SigmaUUUUUUc).\line
\line
  9th:  energy in eV   (omega(i,iw)-ef)*rydberg()\line
  10th: real part      Re hartree*zsec(iw,i,ip) \line
  11th: imag part      Im hartree*zsec(iw,i,ip) \par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab To get integrated spectrum function (DOS), we need to superpose all the spectrum function (All q points and all band index). Be careful about the degeneracy (multiplicity) for each q points. You have to build it from SEComg file. To know the multiplicity, search following lines ofkeyword Multiplicity in the console output of qg4gw (lqg4gw).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Anyway, consider about \u8220"is it worth to do?\u8221" To confirm your result, use sum rule (sum of spectrum weight). And pay attention to the relation between real and imag parts (Hilbert transformation).\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 gwsc script to perform QSGW\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 outputs of gwsc\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: gwsc2014-12-091.eps]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When gwsc runs normally, it gives console output as follows. This is a case for ctrl.gaas for\line >gwsc 10 -np 24 gaas@\line . Without arguments, typing gwsc shows usage as\line >An example of usage: gwsc 5 -np 4 si, where 5 means 5+1 iterations@\line . We recommend you do look into the script gwsc. It uses run, which is a special subroutine of bash; but not so difficult to understand it. (In the followings, we assume /home/binx/ is your bin directory at which we have all binaries for ecalj.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ### START gwsc: ITER= 10, MPI size=  24, TARGET= gaas\line
--- No sigm nor sigm.$TARGET files for starting ---\line
 ---- goto sc calculation for given sigma-vxc --- ix=,0\line
No sigm ---> LDA caculation for eigenfunctions \line
OK! --> Start echo --- | mpirun -np 24 /home/binx/lmf-MPIK gaas > llmfUUUUUUlda \line
OK! --> Start echo 0 | /home/binx/lmfgw gaas > llmfgw00 \line
OK! --> Start echo 1 | /home/binx/qg4gw  > lqg4gw \line
OK! --> Start echo 1 | mpirun -np 24 /home/binx/lmfgw-MPIK gaas > llmfgw01 \line
OK! --> Start echo --- | /home/binx/lmf2gw  > llmf2gw \line
 ... (preparation stage ends here; start main stage) ...\line
OK! --> Start echo 0 | /home/binx/rdata4gwUUUUUUv2  > lrdata4gwUUUUUUv2 \line
OK! --> Start echo 1 | /home/binx/heftet  > leftet \line
OK! --> Start echo 1 | /home/binx/hchknw  > lchknw \line
OK! --> Start echo 3 | /home/binx/hbasfp0  > lbasC \line
OK! --> Start echo 3 | mpirun -np 24 /home/binx/hvccfp0  > lvccC \line
OK! --> Start echo 3 | mpirun -np 24 /home/binx/hsfp0UUUUUUsc  > lsxC \line
OK! --> Start echo 0 | /home/binx/hbasfp0  > lbas \line
OK! --> Start echo 0 | mpirun -np 24 /home/binx/hvccfp0  > lvcc \line
OK! --> Start echo 1 | mpirun -np 24 /home/binx/hsfp0UUUUUUsc  > lsx \line
OK! --> Start echo 11 | mpirun -np 24 /home/binx/hx0fp0UUUUUUsc  > lx0 \line
OK! --> Start echo 2 | mpirun -np 24 /home/binx/hsfp0UUUUUUsc  > lsc \line
OK! --> Start echo 0 | /home/binx/hqpeUUUUUUsc  > lqpe \line
OK! --> Start echo --- | mpirun -np 24 /home/binx/lmf-MPIK gaas > llmfUUUUUUoneshot \line
  ... (this is the end of main stage) ...\line
== 0 iteration over ==\line
 ---- goto sc calculation for given sigma-vxc --- ix=,1\line
OK! --> Start echo --- | mpirun -np 24 /home/binx/lmf-MPIK gaas > llmf \line
OK! --> Start echo 0 | /home/binx/lmfgw gaas > llmfgw00 \line
   ... (lines here omitted ) ...\line
OK! --> Start echo 0 | /home/binx/hqpeUUUUUUsc  > lqpe \line
== 1 iteration over ==\line
   ... (lines here omitted ). ..\line
== 2 iteration over ==\line
   ... (this repeat until ITER= 10(the first argument to gwsc) ) ...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This shows that gwsc invoke lmf-MPIK,lmfgw,qg4gw,... successively. echo\u160?3|hbasfp0  means running a fortran program hbasfp0 with the argument \u8217'3\u8217' from the standard input (read(*,*) in fortran code). We can divide these successive calls to \u8220"preparation stage\u8221" and \u8220"main stage\u8221". Preparation stage is just to prepare eigenfunctions and so on which are required for the \u8220"main stage\u8221" of GW calculation. At the end of \u8220"main stage\u8221", we have the potential file sigm.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As it shows, console output are going to l* files.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b Preparation stage of gwsc}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 At the end of this stage, we get required eigenfunctions, BZmesh data, and so on, which are required for the main stage. Note that {\b echo 0 | lmfgw} means supply an integer to the fortran program {\b lmfgw} from standard input by read(*,*).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab lmf-MPIK (k-parallel version of lmf)\line This is the one-body calculation for given sigm.gaas. At the beginning, we do not have sigm.gaas. In this case lmf-MPIK just perform LDA/GGA calculation.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b echo 0 | lmfgw}:\line Get some small information files to start {\b qg4gw}. If you type just lmfgw, and observe what occurs. It shows a menu and pauses (asking you to supply an integer); then we supply 0 in this case. (If we do {\b echo 0 | lmfgw}, no pause occurs.)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b echo 1 |qg4gw} : Get $\{\\bf k\}$ points used in the {\i G}{\i W}calculations and the corresponding $\{\\bf G\}$ vectors. And what is the irreducible k point (See console output of qg4gw. gwsc keeps it in lqg4gw).\line Since we use the offset-Gamma method for BZ integration for {\i G}\u8197?\u215?\u8197?{\i W}, we need shifted mesh points to calculate {\i W} at offset-Gamma points. The $\{\\bf q\}$ vectors of offset-Gamma method is in Q0P file. (If you have two points in Q0P, we see two shifted mesh points in addition to regular mesh points.) Remember that cutoff of $\{\\bf G\}$ is given by QpGcutand QpGcut in GWinput. (Based on the experiences, we use smaller QpGcut to reduce computational time. Explained in other section xxx).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b echo 1 | lmfgw-MPIK} : Calculate the LDA eigenfunctions, eigenvalues, and $\\langle \\psi | V^\{\\rm LDA\}UUUUUU\{\\rm xc\}| \\psi \\rangle$ at the irreducible $\{\\bf k\}$ points (shown at the bottom of output lqg4gw of qg4gw.)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b lmf2gw}: store these data into DATA4GW2 and CphiGeig, whose I/O is controlled by a key subroutine {\b gwinput2.f}.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b Main stage of gwsc}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We can start the main stage of {\i G}{\i W}calculation from these files;\line DATA4GWUUUUUUV2 CphiGeig QGpsi QGcou Q0P QIBZ SYMOPS BZDATA HAMindex CLASS@;\line these files contains eigenfunctions and so on in the manner of Eq.(17) of , eigenvalues and other required information. This is the starting point of the GW calculation.\line \par}
{\pard \ql \f0 \sa180 \li0 \fi0 : computational conditions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : Crystal structures and so.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : Eigenvalues and Eigenfunctions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : q and G vector for the eigenfunctions(q means {\b k} in the previous section),\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : q and G vector for the Coulomb matrix\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : q points near q=0 instead of q=0 (offset Gamma points)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : irreducible q points (This is also contained in BZDATA).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : point group operation\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : q points date (and tetrahedron weights if necessary) for BZ integrals.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : Hamiltonian index, all required complex index for Hamiltonian of PMT method. (See the top of subroutine write in lm7K/subs/m.F. This is also in fpgw/gwsrc/m.F. Identical files are in two different directory\u8212- it should be avoided in future.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : class information or atomic sites (equivalent sites).\line With these files, we do the main stage as\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b rdata4gw2}: Read DATA4GW2 and so on, and decompose it into files required in the followings. And calculate PPOVL* files (overlap matrix of interstitial plane waves. Because of technical reasons some different types of PPOVL* with {\b q}-point index).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b heftet} : Get the Fermi energy EFERMI by tetrahedron method. It is used in {\b hx0fp0}.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b hchknw} : stores the number of required {\i \u969?} points along real-axis into NW.\line (NW is not essentially used, but is supposed to exist in the followings.)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b echo 3|hbasfp0}: gives the product basis for Core exchange.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b echo 0|hvccfp0}: gives the Coulomb matrix for the Core exchange.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b echo 3|hsfp0}: gives the Core exchange part of the self-energy. {\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 Correlation part due to cores is neglected. In future, we will switch to a version without PB for core part to reduce computational time and for numerical accuracy.\par}
}\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b echo 0|hbasfp0}: gives the product basis.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b echo 0|hvccfp0}: gives the Coulomb matrix {\i v}.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b echo 1|hsfp0}: gives the exchange part of the self-energy.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b echo 11|hx0fp0}: gives the correlated part of the screened Coulomb interaction {\i W}\u8197?\u8722?\u8197?{\i v}.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b echo 2|hsfp0}: gives the correlated part of the self-energy.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b echo 0|hqpe}: gather data and write down final results into sigm, QPU, TOTE.UP files.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b Other functions (or scripts)}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In addition to {\b gw}, there are some other additional scripts and functions.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b gw} : The one-shot {\i G}{\i W}calculation. Lifetime(impact ionization rate) of QPs.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b gwsc} : QSGW calculation explained here\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b \u160?epsPP, eps} : Dielectric function without or with local-field effects.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab run-mode 4 of {\b hsfp0}: to plot the spectrum function {\i \u931?}({\i \u969?}).(need to be fixed again probably).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b epsPP} : non-interacting spin susceptibility. One-degree of freedom like Rigid moment approx. After it ends, you need to do and/or to get the full spin susceptibility.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b genMLWF} : Wannier funciton and its matrix elements of the Screened Coulomb interaction.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Usage problems, QandA error messages.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1.Bandplot for FSMOMMETHOD/=0 \line
  Even when you use FSMMOMMETHOD/=0 in GWinput for gwsc, \line
  you need to set FSMOMMETHOD=0 (or comment it out) when you run jobUUUUUUbandUUUUUUnspin2.\line
  [If you run jobUUUUUUbandUUUUUUnspin2 with FSMOMMETHOD/=0, it make a shift \line
  (adding bias magnetic field).]\line
\line
2.Note that ctrlgenM1.py automatically set this for --systype=molecule.\line
   Then we have \line
       TETRA=0\line
       N=-1  #Negative is the Fermi distribution function W= gives temperature.\line
       W=0.001 #W=0.001 corresponds to T=157K as shown in console\line
   In addiiton, FSMOM (nUUUUUUup-nUUUUUUdown) is needed (FSMOMMETHOD=1)if we\line
   have magnetic moment.\line
\line
3. core>evalence message.\line
   Ecore is grater than Evalence.\line
   For save, we do not allow this.\line
   Complare ECORE file and valence levels, shown in log file or\line
   console output.\line
\line
4. If you see a error message from lmf (e.g., internally called in the gwsc script).;\line
  Exit -1 rdsigm: Bloch sum deviates more than allowed tolerance (tol=5e-6)\line
  You have to enlarge RSRNG so that lmf finsh normally.\line
\line
5. Back ground charge and fractional Z.\line
   You can use fractional numbers for ATOMUUUUUUZ, and also can set\line
   valence charge by BZUUUUUUZBAK (I removed BZUUUUUUVAL).\line
   You see console out put, e.g,\line
     "Charges:  valence    19.80000   cores     8.00000   nucleii   -28.00000\line
        hom background       .20000   deviation from neutrality:      0.00000\line
   . This is a case with BZUUUUUUZBAK=.2.\line
\line
   NOTE: at the first iteration, Charges: shows such as\line
     Charges:  valence     8.00000   cores    20.00000   nucleii   -28.00000\line
      hom background     0.12300   deviation from neutrality: 0.12300\line
      because of the initial condition by superposition of atoms. It show\line
      deviation seems nonzero. But charge should be conserved from the\line
      next iteration.\line
\line
6. Not converged in metal. --->mixing may help\line
   For example, if you try metal such as Bi2Sr2CuO6, it may fail at LDA/GGA level.\line
   Then use ITER MIX=A2,b=.2. or something (.2 means it only mix 20% of output to give\line
  new input for next iteration). Then I see convergence. (b is the\line
   mixing parameter.\line
\line
7. Use PZ or not.\line
   If spillout of core is not so small (more then 0.05 or something.),\line
   it is better to use PZ(lo). Treat the core as valecne.\line
   Bi4d is such a case. Maybe use PZ=0,0,4.9\line
\line
8. Core treatment \line
   See 10.1103/PhysRevB.76.165106 (Eq.35 and after).\line
   Now I usually not use CORE2 (CORE1 only).\line
\line
9. ERROR EXIT! rgwina: 2nd wrong l valence\line
   This may be because you use wrong GWinput.\line
   Back it up. And run mkGWINUUUUUUlmf2 (any n1 n2 n3 is fine).\line
\line
10. Known bug.\line
    Error occurs when system is anisotroic such as CuAlTe2. \line
    Temporary fix is "Add token NPWPAD=100 in HAM category".\line
    (guess of used APW fails (more than expected)).\line
    CuAlTe2,CuGaTe2 cases.\line
\line
11. Known bug\line
    a little unstable when metal GGA, especially when we have large empty regions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Cautions for usage\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab == not meaningful total energy in QSGW===\line Total energy shown in QSGW mode in current version is not meaningful. (just treat as an indicator to convergence).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab == Do we use VWN or GGA for QSGW? ===\line In principle, QSGW results should not depends on VWN or GGA (XCFUN=1 or 103 in ctrl). But there is minor dependence, because\line 1. frozen core density.\line 2. core eigenfunctions.\line 3. radial basis functions\line 4. Slight numerical reason\line (This is probably because Sigma-interpolation procedure But not exactly figured out yet \u8594? affect about 0.02eV as for band gap for GaAs. ). In anyway, use VWN (HAM=1) as standard. And such technical things affects, 0.05 eV level of error for band gap.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab EH and EH2 : For si, if EH and EH2 are the same, the following error occurred.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1  fexit,fexit2,fexit3 error retval=          -1\line
 Exit -1 zhevUUUUUUtk2: nev /=nevx something wrong.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 The large EH, EH2 get to be meaningless. We usually use up to \u8196?\u8764?\u8196?2. (If you use very large EH such as E\u8196?\u8764?\u8196?10, I am not so sure weather it is )\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab  The options about the product basis within MT. (SeungWoo\u8217's memo)\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 <PRODUCTUUUUUUBASIS>\line
 tolerance to remove products due to poor linear-independency\line
  0.100000D-02 ! =tolopt\par}
{\pard \ql \f0 \sa180 \li360 \fi0 When the product basis are made, we may have poorly linear independent basis. For example, one in the set \{{\i f}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}1,\u8198?{\i f}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}2,\u8198?...,\u8198?{\i f}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}{\i n}\} would be almost give by a linear-combination of others. We need to make the linear-independent set. Therefore, after calculating the overlap matrix \u10216?{\i f}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}{\i i}|{\i f}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}{\i j}\u10217?. We do diagonalization, then we remove eigenvectors corresponding to small eigenvalues than {\f1 tolopt}. See the {\b hbasfp0} command in {\b gwsc}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 lcutmx(atom) = maximum l-cutoff for the product basis.\line
  4  4  4  2  2  4  4\par}
{\pard \ql \f0 \sa180 \li360 \fi0 For $\\phiUUUUUU1 \\times \\phiUUUUUU2$ case, |{\i l}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}1\u8197?\u8722?\u8197?{\i l}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}2|\u8196?\u8804?\u8196?{\i l}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}{\i t}{\i o}{\i t}\u8196?\u8804?\u8196?|{\i l}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}1\u8197?+\u8197?{\i l}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}2|. So \u8216'lcutmx\u8217' changes the maximum cutoff for the l{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}{\i t}{\i o}{\i t}. The order is the same as the order of atoms in the {\b ctrl} file.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1   atom   l  nnvv  nnc !\line
    1    0    3    3\line
    1    1    3    2\line
    1    2    2    1\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \u8216'atom\u8217' means the atom number identified in the {\b ctrl} file.\line \u8216'l\u8217' is the angular momentum quantum number.\line \u8216'nnvv\u8217' is the number of radial functions (valence) on the augmentation-waves.\line \u8216'nnc\u8217' is the number of radial functions for core.\line The latter two ones, \u8216'nnvv\u8217' and \u8216'nnc\u8217', will be understood more clearly if you see the following ones.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1   atom   l    n  occ unocc  ! Valence(1=yes,0=no)\line
    1    0    1    1    1   ! 5SUUUUUUp  -----\line
    1    0    2    0    0   ! 5SUUUUUUd\line
    1    0    3    1    1   ! 4SUUUUUUl\line
    1    1    1    1    1   ! 5pUUUUUUp\line
    1    1    2    0    0   ! 5pUUUUUUd\line
    1    1    3    1    1   ! 4pUUUUUUl\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Above options are about the product basis set within MT (Valence).\line \u8216'atom\u8217' and \u8216'l\u8217' are explained above. \u8216'nnvv\u8217' for \u8216'atom = 1 and l = 0\u8217' was \u8216'3\u8217' so this case we have 3 basis (\u8216'n = 1, 2, 3\u8217')\line \u8216'n\u8217' is the degree of freedom of the radial function, {\i \u981?}. \u8216'n = 1\u8217' means {\i \u981?}, \u8216'n = 2\u8217' means {\i \u981?\u775?}, and \u8216'n = 3\u8217' means kind of $\\ddot\\phi$, which the dot above the letter represents the differentiation with respect to the energy. So \u8216'n = 1 and 2\u8217' is related to the linearization of the radial function and \u8216'n = 3\u8217' is the local orbital which is restricted in MT. The local orbital can be modified changing \u8216'PZ\u8217' in the {\b ctrl} file. Finally, the number of the basis set which is needed for expanding eigenfunctions is ({\i l}\u8197?+\u8197?1){\super 2}\u8197?\u215?\u8197?{\i n}.\line \u8216'occ\u8217' and \u8216'unocc\u8216' mean that we use only ones that checked as \u8216'1\u8217', in other words we neglects \u8216'0\u8217' cases for making product basis. Be careful for confusion with name \u8216'occ\u8217' and \u8216'unocc\u8217'. These don\u8217't mean that occupied or unocc. When making product basis, $M = \\phiUUUUUU1 \\times \\phiUUUUUU2$, \u8216'occ\u8217' corresponds to $\\phiUUUUUU1$ and \u8216'unocc\u8217' to $\\phiUUUUUU2$. For example,\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1   atom   l    n  occ unocc  ! Valence(1=yes,0=no)\line
    1    0    1    1    1   ! 5SUUUUUUp  -----\line
    2    3    1    0    1   ! 4fUUUUUUp\par}
{\pard \ql \f0 \sa180 \li360 \fi0 If the options are like the above, the product basis will be consists of ($\\phiUUUUUU1 = \\phiUUUUUU\{atom=1,l=0\}) \\times (\\phiUUUUUU2 = \\phiUUUUUU\{atom=1,l=0\})$, ($\\phiUUUUUU\{atom=1,l=0\} \\times \\phiUUUUUU\{atom=2,l=3\}$). As you can see, ($\\phiUUUUUU1 = \\phiUUUUUU\{atom=2,l=3\}$) is skipped.\line In the {\b ctrl} file, \u8216'EH\u8217' controls the l part. As for \u8216'EH\u8217', (s, p, d, f) are used but {\b GWinput} file uses (s, p, d, f, g). \u8216'EH\u8217' : HEAD part. \u8216'GWinput\u8217' : contains TAIL part... need more explanation.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1   atom   l    n  occ unocc  ForX0 ForSxc ! Core (1=yes, 0=no)\line
    1    0    1    0    0      0    0    ! 1S -----\line
    1    0    2    0    0      0    0    ! 2S\line
    1    0    3    0    0      0    0    ! 3S\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Above options are about the product basis set within MT (Core).\line \u8216'nnc\u8217' for \u8216'atom = 1 and l = 0\u8217' was \u8216'3\u8217' so this case we have 3 basis (\u8216'n = 1, 2, 3\u8217')\line Finally, for the convergence check, we can modify the following three things, (i) tolerance, (ii) lcutmx, and (iii) occ and unoccu.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \line
\line
== one show QSGW (not one-shot GW) ==\line
  one-shot QSGW can be useful in cases.\line
  As it contains off-diagonal part, we can resolve band tanglement\line
  problem in Ge (no band gap).\line
\line
== Restart calculation in lda ==\line
 lmf(lmf-MPIK) read rst.* in defaluts.\line
 rst contains electron density.\line
 If rst is already converged, it stops after two iteration.\line
 rst contains atomic positions.\line
 So, in order to read atomic positions change in ctrl,\line
 Use options shown in lmf --help.\line
\line
== Restart calculation in qsgw ==\line
  To remove mixsigm* (mixing for sigm), maybe required.\line
\line
== iteration check ===\line
  First, watch console output of gwsc (do redirect to output file)\line
  Need to check OK! signs arrayed on 1st columns.\line
\line
  gwsc iteration is time cosuming,\line
  So we need to check calculations are normally going on or not.\line
\line
  Memory inefficiency.\line
  Set 'KeepEigen off' an 'KeepPPOVL' off.\line
  In fact, out code is still inefficient for memory usage.\line
  \line
  grep gap llmf ---> minimum gap at mesh point.\line
  see save.* ,or grep '[xc] ' save.*\line
  the end of iteration of lmf is shown as x or c.\line
  (if failed, QPU file. \line
  dqpu QPU.4run QPU.3run\line
  As for usual semi-conductor, accuracy abou t0.1 eV is limit of current implementation.\line
  Set vwn (xcfun=1) looks better (stable) for GW.\line
\line
  $grep rms lqpe* \line
  shows\line
           ...  rmsdel=2.44D-04\line
           ...  rmsdel=4.91D-03\line
           ...   rmsdel=2.44D-04\line
           ...   rmsdel=3.37D-04\line
  If rsmdel is getteing to be smaller, it is on convergence path.\line
  (but in magnetic cases, it may give be too good even not yet going to\line
    be converged..., beccause magnetic energy is so small)\line
\line
  grep diffe llmf  ---> difference of energies of each iteration.\line
\line
  ehf (harris energy)\line
  ehk (Hohenberg kohn energy)\line
\line
== emax cutoff for APWs. ==\line
  We can not use so many APWs in current version,\line
  because of overcompleteness (this is because null vector within MTs), \line
  In anyway, use pwemax=3 as standard (test it with 4 or 5).\line
  To avoid failure of calculation, we may use smaller MT radius for\line
  alkali, and alkali-earth elements. \line
  In feature, I think we can introduce pseudopotentials for these atoms only.\line
\line
== Check Used MTO \line
 Near beginig of console output, what MTO you use is shown as: (GaAs case).\line
 sugcut:  make orbital-dependent reciprocal vector cutoffs for tol= 1.00E-06\line
 spec      l    rsm    eh     gmax    last term    cutoff\line
  Ga       0*   1.13  -1.00   6.579    1.19E-06    1459\line
  Ga       1*   1.13  -1.00   7.028    1.26E-06    1807\line
  Ga       2*   1.13  -1.00   7.475    1.09E-06    2109\line
  Ga       3    1.13  -1.00   7.920    1.06E-06    2637\line
  Ga       0*   1.13  -2.00   6.579    1.19E-06    1459\line
  Ga       1*   1.13  -2.00   7.028    1.26E-06    1807\line
  Ga       2    1.13  -2.00   7.475    1.09E-06    2109\line
  As       0*   1.18  -1.00   6.300    2.13E-06    1243\line
  As       1*   1.18  -1.00   6.720    1.26E-06    1471\line
  As       2*   1.18  -1.00   7.140    1.37E-06    1837\line
  As       3    1.18  -1.00   7.558    1.05E-06    2229\line
  As       0*   1.18  -2.00   6.300    2.13E-06    1243\line
  As       1*   1.18  -2.00   6.720    1.26E-06    1471\line
  As       2    1.18  -2.00   7.140    1.37E-06    1837\line
\line
== gwsc cause error stop.\line
 Have you ever changed MTO setting? Consistent with GWinput?\line
\line
== QSGW for Fe.\line
  It is better to use 3p as core. Furthermore, 3d+4d as valence is better. \line
  Thus we need to set PZ=0,3.9,4.5\line
  I also got aware that emaxUUUUUUsigm should be large enough (4$\\sim$5 Ry) \line
  to have smooth band dispersion. n1n2n3 can be 10x10x10.\line
\line
== RSRNGE: enlarge RSRNGE ===\line
  Use RSRNGE=10 or so (in cases, RARNGE=20 or more is required), \line
  for large number of k points. Try and enlarge it if it fails with a\line
  message "Exit -1 rdsigm: Bloch sum deviates more than allowed tolerance (tol=5e-6)".\line
  We will have to make it automatic in future.\line
  Detailed memo (for deverlopers) is at the bottoem of ecalj/Document/BACKUP/MarksOriginalDoc/gw.html.\line
\line
== Q0P check\line
   In cases, it is better to use Q0Pchoice=2 instead of default Q0Pchoice=1.\line
   (For slabs, Q0Pchoice=2 may be better; need check more. In anyway,\line
    it is problematic to use unbalanced k points for anisotropic cell).\line
    See Copmuter Physics Comm. 176(2007)1-13).\line
\line
=== When calculation in LDA level fails ===\line
when calculation fails in LDA level.\line
  (1) smaller MT\line
  (2) fewer PW. smaller pwemax.\line
  (3) core as semicore.\line
\line
\line
=== LDA+U ===\line
not yet written...\line
\line
=== MAE by rotating crystal ===\line
(we have a sample at lm7K/TESTsmaples/MAEtest/, but only in GGA/LDA).\line
\line
=== spin wave ===\line
J calculation.\line
\line
\line
====\line
If not stable convergence in gwsc, try to set\line
mixbeta 0.5\line
(and/or mixpriorit 3 or something)\line
at the begining of sigma.\line
\line
\line
=======\line
cleargw (directory):\line
This command clean up up intermediate files under (directory).\line
This recursively into deeper level. Be careful, or edit it.\line
I use it as '>cleargw .'\line
\line
\line
\line
------------------------------------\line
Magnetic moment within MTs are shown as\line
------------------------------------\line
 charges:       old           new     \line
 smooth      17.240314     17.240740   ...\line
 mmom         0.000024     -0.000010   \line
 site    1    6.207135      6.206590  \line
 mmom         1.062276      1.062991  <--- here\line
 site    2    6.207115      6.206834  \line
 mmom        -1.062323     -1.062958  <--- here\line
 site    3    1.172718      1.172918  \line
 mmom         0.000011     -0.000011  \line
 site    4    1.172718      1.172918  \line
 mmom         0.000011     -0.000011  \line
In this case, MTsite1 has 1.062991 and MTsite2 has -1.062958.\line
>grep 'lin mix' -A30 llmf \line
can take out this message (if console output is in llmf).\line
\line
\line
-----------------------------\line
ORBITAL MOMENT in pertubation:\line
-----------------------------\line
Try \line
>lmf nio --rs=1,0 -vso=1 --quit=band >llmf\line
After converged, try\line
>grep IORBTM -A20 llmf\line
Then llmf shows shows orbital moment in first order perturbation.\line
(Here --rs=1,0 read rst.* file but not change it. See >lmf --help.\line
--quit=band means quit just after band calculation.)\line
\line
== EPS mode,\line
  Check Im part of chi0 is smoothly damping at high energy (typically\line
  1Ry or larger enengy range). If there is some large Im part remains,\line
  something strange (usually due to orthogonality problem of\line
  eigenfunctions when you set low q).\line
\line
   Related source codes are in ecalj/lm7K/ .\line
   A command ecalj/lm7K/ctrlgenM1.py can generate 'standard input file (ctrl file)' \line
   just from a given crystal structure file called as ctrls file. \line
   Binaries are lmf and lmf-MPIK (MPI k-parelell verion).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 lmf \u8211-help\par}
{\pard \ql \f0 \sa180 \li0 \fi0 lmf \u8211-help show option of \u8211-rs=(five numbers); this let lmf know how to read atm.* file which is the initial atom file by lmfa.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Wannier function \par}
{\pard \ql \f0 \sa180 \li0 \fi0 We can generate Wannier functions (maximally localized Wannier Functions or similar) by a script genMLWF. It automatically perform cRPA calculation sucessively. (If it is not necessary, insert \u8217'exit\u8217' in genMLWF, after it performs 2@).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Try to run examples in /MATERIALS/SampleUUUUUUMLWF/@. Read in it. To run the script genMLWF, we need to get by editing .tmp@. (2@ contains default Wannier section). In addition, we have some settings (energy windows and so on). This is the example of the initial conditions for Cu case. 5 is the number of Wannier function. The most left one means {\i \u981?} index and the right one of it is {\i \u981?\u775?} index. They are written in the {\b @MNLA} file.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then we can run genMLWF. After it finished, we can analyze it results. (if you don\u8217't need Wannier funciton plot, You can skip a line of wanplot in genMLWF. Then we don\u8217't need to set {\f1 visUUUUUUwanUUUUUU*} options.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 lwmatK1 and lwmatK2\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you input the following command\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 >grep Wan lwmatK*\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You will get the following results. (This case : Cu cases)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 lwmatK1:  Wannier    1    1   24.644475    0.000000 eV\line
lwmatK1:  Wannier    1    2   24.644576    0.000000 eV\line
lwmatK1:  Wannier    1    3   25.471361    0.000000 eV\line
lwmatK1:  Wannier    1    4   24.644575    0.000000 eV\line
lwmatK1:  Wannier    1    5   25.470946    0.000000 eV\line
lwmatK2:  Wannier    1    1    0.000000 eV   -21.263759   -0.000000 eV\line
lwmatK2:  Wannier    1    2    0.000000 eV   -21.263839    0.000000 eV\line
lwmatK2:  Wannier    1    3    0.000000 eV   -21.931033   -0.000000 eV\line
lwmatK2:  Wannier    1    4    0.000000 eV   -21.263839   -0.000000 eV\line
lwmatK2:  Wannier    1    5    0.000000 eV   -21.930702   -0.000000 eV\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \line
### Wanneir Branch now under developing (imported from T.Miyake's Wannier and H.Kino's).\line
   A. make at ecalj/fpgw/Wannier/ directory, and do make, and make install. \line
      (need to check Makefile first). You first have to install fpgw/exec/ in advance.\line
   B. Samples are at these directories. \line
      MATERIALS/CuMLWFs (small samples),\line
      MATERIALS/CuMLWF/\line
      MATERIALS/CuMLWFs/\line
      MATERIALS/FeMLWF/      \line
      MATERIALS/NiOMLWF/\line
      MATERIALS/SrVO3MLWF/\line
   C. With GWinput and ctrl.*, run \line
      >genMLWF\line
      at these directories.\line
      In GWinput, we supply settings to generate Wannier funcitons. (Sorry,not documentet yet..)\line
   D. After genMLWF, do\line
      >grep Wan lwmatK*\line
      then compare these with Result.grepWanlwmatK\line
      These are onsite effective interactions (diagonal part only shown).\line
      *.xsf are for plotting the Maximally localized Wannier funcitons.\line
Anyway, documentaion on Wannier is on the way half.\line
Time consuming part (and also the advantage) is for effective interaction in RPA.\line
Look into the shell script genMLWF; you can skip last part if you don't need the effective interaction.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 ctrl file details\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A ctrl file is usually generated from a ctrls file by the {\f1 ctrlgenM1.py} (a crystal structure file is not \u8220"ctrl\u8221" but \u8220"ctrls\u8221".). It contains self explanation. Here we give complementary explanations to it. Let us Look into a ctrl file. This is a head part of {\f1 ctrl.cu} generated by ctrlgenM1.py:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     ### This is generated by ctrlgenM1.py from ctrls \line
    ### For tokens, See Document/Manual/CategoryAndToken.org.\line
    ### Do lmf --input to see all effective category and token ###\line
    ### It will be not so difficult to edit ctrlge.py for your purpose ###\line
    VERS    LM=7 FP=7        # version check. Fixed.\line
    IO      SHOW=T VERBOS=35 TIM=2,2\line
                 # SHOW=T shows readin data (and default setting at the begining of \line
    console output)\line
                 # It is useful to check ctrl is read in correctly or not\line
                   (equivalent with --show option).\line
                 # larger VERBOSE gives more detailed console output.\line
    SYMGRP find  # 'find' evaluate space-group symmetry automatically.\line
                 # Usually 'find is OK', but lmf may use lower symmetry\line
    ...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that {\f1 #} means comment lines. We can also use lines starting from {\f1 % const ...} to define variables and set constant.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We see \u8220"categories\u8221" such as {\f1 VERS}, {\f1 IO}, and so on. The beginning of categories are starting from the first column. Under categories, we have "tokens" such as {\f1 VERBOSE}. Thus we specify full name of token {\f1 VERBOSE} under category {\f1 IO} as {\f1 IOUUUUUUVERBOSE}.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 IOUUUUUUTIM} is for debugging. It shows which subroutines are called and so on. Bigger number shows deeper subroutines.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 SYMGRP} is a category without token under it; we set generators of space group (See explanation in previous paragraph). When we set {\f1 find}, it automatically calculate symmetry of crystal lattice. If we like to enforce symmetry, set some of generators which are shown by lmchk.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab We see {\f1 ctrls} is embedded in the {\f1 ctrl} by {\f1 ctrlgenM1.py}.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1     ... (skip) ...\line
    % const  da=0 alat=6.798\line
    STRUC   ALAT=\{alat\} DALAT=\{da\}\line
            PLAT=  0.0 0.5 0.5  0.5 0.0 0.5   0.5 0.5 0.0\line
            NL=4 NBAS= 1  NSPEC=1\line
    SITE    ATOM=Cu POS=0 0 0\line
    ... (skip) ...\par}
{\pard \ql \f0 \sa180 \li360 \fi0 NL, NBAS(number of SITE) and NSPEC(number of SPEC) are automatically added by ctrlgenM1.py. It is possible to deform unit cell by adding some optional tokens under STRUC category. Search STRUC in an old document (which may be still effective) BACKUP/MarksOriginalDoc/lmto.html. However, it is a little complicated. For new calculations, it is better to find some examples first.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b SITE} category: As for MT sites, we have two categories. (1)SPEC(species) and (2)SITE(specify centers of atoms(species) in primitive cell). As for SPEC, we specify MTs(radius, Z, MTOs on it) appeared in the cell. These are defined subtokens under SPEC=foobar (we have multiple SPEC=foobar).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Then we place these MTs at SITE sections in the cell. At SITE, we specify atomic sites (What SPECis placed to positions by POS) in a primitive cell. We set {\f1 POS=} by direct form (Cartesian) but with the unit of {\f1 ALAT+DLAT}. Total number of SITE (number of tokens SITE) is the number of atoms in the primitive cell. Setting {\f1 POS=} under SITE=foobar means that we place MT named as foobar defined in SPEC=foobar. In addition, we can set SITE, if you like to find relaxed structure (we simultaneously set DYN category) in LDA. As for relaxation, see {\f1 LaGaOUUUUUUrelax/ctrl.lagao} example, and read DYN in Document/Manual/CategoryAndToken.org.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 The SITE=foobar (with same foobar with different POS) are not necessarily equivalent with respect to the space group operation of a system. Thus {\f1 SITEUUUUUUATOM=foobar} are divided into \u8220"classes\u8221" which are connected by the operation. The lmf automatically judge \u8220"classes\u8221" (see also info by lmchk). Thus not need to specify it, but it may be better to check it. A sample is {\f1 lmchk lagao} at {\f1 ~/ecalj/lm7K/TESTsamples/LaGaOUUUUUUrelax}\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\b SPEC} category: In ctrls, we have not yet specified contents of SPEC; we have just given default symbols or only Z= when we use non-default names (shown by ctrlgenM1.py \u8211-showatomlist). The command {\f1 ctrlgenM1.py} adds default SPEC sections.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 We have some {\f1 SPECUUUUUUATOM}, under which we give subtokens such as {\f1 SPECUUUUUUATOMUUUUUUR}(MT radius), {\f1 SPECUUUUUUATOMUUUUUUZ}(nucleus charge), cutoff parameters of angular momentum, and so on. These {\f1 SPECUUUUUUATOM} is refereed to in SITE.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 An example of SPEC category is\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 SPEC                                                            \line
    ATOM=Fe Z=26 R=1.70 \line
      KMXA=\{kmxa\}  LMX=3 LMXA=4 NMCORE=1                        \line
      PZ=0,3.9,4.5\line
      EH=-1 -1 -1 -1  RSMH=0.85 0.85 0.85 0.85          \line
      EH2=-2 -2 -2   RSMH2=0.85 0.85 0.85\line
      MMOM=0 0 2 0                                                    \line
  \line
    ATOM=... (then the similar block of ATOM= are repeated.)\line
       ...\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Under the token {\f1 ATOM=Fe}, we have subtokens {\f1 SPECUUUUUUATOMUUUUUUZ},{\f1 SPECUUUUUUATOMUUUUUUR}, and so on.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Subtokens Z= is the nucleus charge and R= MT radius. Note that Fe is just a name to distinguish MT sphere in the cell. If you set SPEC=27, it is recognized as Co (since Z=27). {\f1 LMX=3} is the maximum l of MTOs. Thus maximum l of MTO is l=3. The maximum of l to expand electron density and potential within MT is LMXA (in contrast to usual LAPW), we can use quite small LMXA such as LMXA=4. NMCORE=1 means we calculate core density without non magnetically-polarization. This can reduce computational confusion.\line PZ is to set local orbital (if not, no local orbitals). EH and RSMH are to specify first set of MTOs.(We can check how local orbitals are set by lmfa explained in the next section). EH2 and RSMH2 are to specify second set of MTOs.\line After PZ=, we have three numbers. These are numbers for s,p,d,f,g,... channels. Zero means not exist. You can use space or comma(,) as delimiter. Here not only the integer part of principle quantum number, but also the fractional part should be supplied (If PZ=0,3,4, it does not work.) Now PZ=3.9 for p and PZ=4.5 for d. This means we use local orbital for 3p, and local orbital for 4d (fractional parts (continuous principle quantum number) are large \u8196?\u8764?\u8196?0.9 for core like orbital, and smaller for extended orbital \u8196?\u8764?\u8196?0.3 or something. See Logarithmic Derivative Parameters in Document/BACKUP/MarksOriginalDoc/lmto.html. This is a little confusing, thus we will explain this in appendix. See Sec.{\field{\*\fldinst{HYPERLINK "#pzsetting"}}{\fldrslt{\ul
10.1
}}}
.\line EH(damping factor), and RSMH (where the smooth Hankel function bent) determines MTOs (or its envelope function as a smooth Hankel function). We now set four numbers for them. Thus we set MTOs s,p,d,f with EH=-1 and RSMH=0.85. Our current test shows that RSMH is one half of R (that is, 0.85=1.70/2, but minimum RSMH is 0.5) and not need to be dependent on s,p,d,f. (If LMX=2, s,p,d are allowed and no f MTOs.) EH is -1; not need to change except test purpose. In a similar manner, EH2 and RSMH2 for second set of MTOs are given. Just three numbers means these for s,p,d.\line MMOM=s,p,d,f... gives initial condition of magnetic moment in $\\muUUUUUUB$ (number of up-down electron).\line In cases such as As, the local orbital given by default ctrl is responsible of rather deep core, and it is not need to be treated as valence electrons. In such a case, we don\u8217't need local orbital.\line In the case of AntiFerro-II NiO, it contains two NiO in a primitive cell. Thus it is reasonable to have two SPEC as Ni1 and Ni2, although subtokens under ATOM=Ni1 and ATOM=Ni2 (e.g. {\f1 SPECUUUUUUATOMUUUUUUEH} for them) are the same except initial condition of magnetic moment of MMOM=s,p,d,f... See example of NiO.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The minimum help of call Categoryare listed with minimum explanation with\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     $ lmf --input\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It gives a long output. But many of them are experimental and not need to manage them. A part of it is\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1  Token            Input   cast  (size,min)\line
 ------------------------------------------\line
    ... ...\line
\line
     STRUCUUUUUUALAT        reqd   r8       1,  1\line
       Scaling of lattice vectors, in a.u.\line
    ... ..\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is an minimum explanation of it. "reqd" means "required" (no default). r8 means it read with real number, 1,1 means that ALAT=xxx should contain one number minimum (max is also one) (See also STRUC, and so on).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 There are kinds of examples in ecalj packages. Please look into their ctrls.* and ctrl.* These are in lm7K/TESTsample/* and ecalj/CMDsampls. In addition, ecalj/MATERIALS contain many samples (need a command); see a later subsection.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As for what is shown in {\f1 $ lmf --input}, most of important tokens are already described in the ctrl file generated by ctrlgenM1.py. So, we don\u8217't need to care many options shown by it.\line \par}
{\pard \ql \f0 \sa180 \li720 \fi0 For QSGW calculation:\par}
{\pard \ql \f0 \sa180 \li720 \fi0 We need a setting in ctrl file to read sigm file (HAM). It is simplified now, and not need to care it so much. As we set RDSIG=12 in defaults, lmf read sigm file and add it to one-body potential as long as sigm.* exist.\line {\b NOTE for old users}: We now set {\f1 SIGP[MODE=3 EMAX=9999.]} in ctrl file to read self-energy in lmf (or lmf-MPIK). This is because we use very localized MTOs (similar with the Maxloc Wannier). Our test shows reasonable results and this simplify algorithms. In my previous version, we asked you to use {\f1 SIGP[MODE=3 EMAX=2.0]} where EMAX is a little (0.5Ry) less than {\f1 emaxUUUUUUsigm}. If something strange occurs, try this setting).\par}
{\pard \ql \f0 \sa180 \li720 \fi0 \u8226? In principle, QSGW result should not depended on the choice of XCFUN. However, it can affect slightly. In our tests, it seems slightly better to use VWN (XCFUN=1) for QSGW calculations. (BUT need to check more...)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 How to set local orbitals\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1   As we stated, do "lmfa |grep conf" to check used MTO basis. \line
\line
  We have to set SPECUUUUUUATOMUUUUUUPZ=?,?,? \line
  (they ordered as PZ=s,p,d,f,... ) to set local orbitals.\line
  \line
  lmv7 (originally due to ASA in Stuttgart) uses a special terminology\line
  "continious principle quantum number for each l", which is just\line
  relatated to the logalismic derivative of radial funcitons at MT\line
  boundary. It is defined as\line
   P= principleQuantumNumber + 0.5-1/pi*atan(r* 1/phi dphi/dr),\line
  where phi is the radial function for each l.   For example, \line
   P= n.5 for l=0 of free electron (flat potential) because phi=r^0,\line
   P= n.25 for l=1 because phi=r^1; \line
   P= n.147584 for l=2 because phi=r^2; P=, n.102416 n.077979 for l=3,4.\line
  (Integer part can be changed). See Logarithmic Derivative Parameters in\line
  http://titus.phy.qub.ac.uk/packages/LMTO/lmto.html#section2\line
\line
  Its fractioanl part 0.5-atan(1/phi dphi/dr) is closer to unity for\line
  core like orbital, but closer to zero for extended orbitals.\line
\line
  Examples of choice:\line
  Ga p: in this case, choice 0 or choice 2 is recommended.\line
      We usually use lo for semi-core, or virtually unoccupied level.\line
\line
     (0)no lo (4p as valence is default treatment without lo.)\line
        3p core, 4p valence, no lo: default.\line
        Then we have choice that lo is set to be for 3p,4p,5p.\line
     (1)3p lo ---> 4p val (when 3p is treated as valence)\line
        3d semi core, 4d valence  \line
        Set PZ=0,3.9 \line
        (P is not requied to set. *.9 for core like state. It is just an initial condition.)\line
     (2)5p lo ---> 4p val (PZ>P)\line
        Set PZ=0,5.5 \line
        5.5 is just simply given by a guess (no method have yet\line
        implemented for \line
        If 5.2 or something, it may fails\line
        because of poorness in linear-dependency. We may need to observe\line
        results should not change so much on the value of PZ.\line
\line
     (3xxx)4p lo ---> 5p val (we don't use this usually. this is for test purpose)\line
        4p lo, 5p valence \line
        Set PZ=0,4.5 P=0,5.5 (In this case, set P= simultaneously).\line
        (NOTE: zero for s channel is to use defalut numbers for s)\line
\line
  Ga d: (in this case, choice 0 or choice 1 is recommended).\line
     (0)no lo (3d core, 4d valecne, no lo: default.)\line
          Then we have choice that lo is set to be for 3d,4d,5d.\line
     (1) 3d lo ---> 4d val  (when 3d is treated as valence)\line
         Set PZ=0,0,3.9  (P is not required to set)\line
     (2) 5d lo ---> 4d val  (PZ>P)\line
         Set PZ=0,0,5.5\line
     (3xxx) 4d lo ---> 5d val  (this is for test purpose)\line
         Set PZ=0,0,5.5 P=0,0,4.5\line
         (NOTE: zero  for s,p are to use defalut numbers )\line
\line
   If you like to read from atm.ga file instead of rst file(if exist).\line
   You have to do lmf --rs=1,1,0,0,1, for example. See lmf --help\line
   Becase rst file keeps the setting of MTO, thus change in ctrl is not\line
   reflected without the above option to lmf.\line
=============================================================\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 GWinput details\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b generate a template of GWinput}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As in the previous section, we need two input files ctrl.si and GWinput. In principle, these two determines final results uniquely. A template GWinput.tmp is generated by mkGWIN2. Required files are\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : The control file for PMT method.\line (Recently modified mkGWIN2 runs lmfa internally. If you use older version, do lmfa in advance).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : A file including computational conditions for the {\i G}{\i W}calculation. In addition, it specifies the {\b k} points for which you calculate the QP energy.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When you run {\b mkGWIN}, it asks you to supply three numbers for BZ integration as\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 == Type three integers n1 n2 n3 for Brillouin Zone meshing for GW! ==\line
 n1= \par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then you need to type a number e.g. as "2 " for n1. Then you need to repeat it for n2 and n3 as\line n1= 2\line n2= 2\line n3= 2\line . These numbers specifies what k points in BZ is used for BZ integration (In this case, 2\u8197?\u215?\u8197?2\u8197?\u215?\u8197?2\u8196?=\u8196?8 {\b k} point in the 1st BZ is used. Roughly speaking, we need 4\u8197?\u215?\u8197?4\u8197?\u215?\u8197?4 (or 6\u8197?\u215?\u8197?6\u8197?\u215?\u8197?6) to get band gap for Si and so on, with \u8196?\u8776?\u8196?0.1 eV accuracy.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Then you have to edit GWinput.tmp and copy it to GWinput. We details the GWinput in later chapter.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We need to repeat mkGWIN2 when you change MTO sections in ctrl file (adding PZ case, and so on).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 overview of GWinput\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (Because of historical reason, input file is different from ctrl.*).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The main input files is GWinput. This controls the setting of {\i G}{\i W}calculation. The file GWinput consists of structures as\line {\i keyword1 data1}\line {\i keyword2 data2}\line ...\line In each lines, it consists of keyword and data. Data can be single or plural. As for keywords, upper case or Lowercase is not distinguished. All keywords should start from 1st column (no space at head). Order of lines are irrelevant. As for logical variable, you can use anything \u8220"true, yes, on, 1, T\u8221" for .true., and anything \u8220"false, no, off, 0, F\u8221" for .false.\line Or we have \u8220"tag sections\u8221" in GWinput specified by <PRODUCTUUUUUUBASIS>@, <QPNT>@, <PBASMAX>@, <QforEPS>@, and <QforEPSL>@. (<PRODUCTUUUUUUBASIS>@ is requires for all kinds of calculations. <PBASMAX>@ is optional. <QforEPS>@ and/or <QforEPSL>@ are required for epsilon mode). It is like\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <PRODUCTUUUUUUBASIS>\line
 tolerance to remove products\line
  0.100000D-02 ! =tolopt\line
 lcutmx(atom) \line
  3 3 \line
  atom   l\line
...\line
</PRODUCTUUUUUUBASIS>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 . In these tag sections, you have to keep format for its own (usually numbers are read by free format (*,*)@).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The fundamental readin routine for GWinput\u160?is a subroutine defined in /keyvalue.F@. is a general and convenient readin routine in full use of the f90 features. Read a head part of the file and try to do "grep getkeyvalue *.F" in /@ or /@ so as to see how to use it (test routine is /kinoUUUUUUinputUUUUUUtest.F@.)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Soche the GWinput consists of three sections\line \par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab General section\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab <PRODUCTUUUUUUBASIS>@ section\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab <QforEPS>@,<QforEPSL>@ section (only effective for dielectric function mode)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab <QPNT>@ section (only effective for one-shot mode)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 5.\tx360\tab <PBASMAX>@ section (optional)\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We will explain each by each in the followings.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 General section\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In general section, it looks like\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ! ##### From GWIN0 ################ \line
n1n2n3         1    1    1 ! for BZ meshing in GW \line
QpGcutUUUUUUpsi    4.000 !(See unitUUUUUU2pioa for unit) |q+G| cutoff for eigenfunction.\line
QpGcutUUUUUUcou    3.000 !(See unitUUUUUU2pioa for unit) |q+G| cutoff for Coulomb and W.\line
unitUUUUUU2pioa off ! off --> a.u.; on--> unit of QpGcutUUUUUU* are in 2*pi/alat \line
alphaUUUUUUOffG    1.000 !(a.u.) Used in auxially function in the offset-Gamma method.\line
!emaxUUUUUUchi0   99999.000 !(Ry) emax cutoff for chi0  (Optional)\line
emaxUUUUUUsigm       3.000 !(Ry)  emax cutoff for Sigma\line
\line
! ##### FREQUENCIES from GWINUUUUUUV2 ################ \line
dw      0.005000 !(a.u.) energy-mesh (bin width size) along real axis.\line
omgUUUUUUc      0.040 !(a.u.) energy-mesh is twiced at omgUUUUUUc\line
  !  coaser mesh for higher energy. Width get to be doubled at omgUUUUUUc.\line
iSigMode     3 ! QSGW mode switch for gwsc. use =3.\line
niw         10 ! Number of frequencies along Im axis. Used for integration to get SigmaUUUUUUc\line
  ! E.g. try niw=6 and niw=12\line
delta     -0.10D-05 !(a.u.)  Broadening of x0. negative means tetrahedron method.\line
  ! used by hx0fp0. You get smeard x0 witth abs(delta).\line
deltaw     0.020000 !(a.u.) Mesh for numerical derivative to get the Z factor\line
esmr       0.003000 !(Ry) used by hsfp0. Keep esmr smaller than band gap for insulators\line
  ! Poles of G^LDA are treated as if they have width esmr in hsfp0. \line
  ! Change esmr for metals.  See DOSACC*---especailly around Ef.\line
GaussSmear on  ! Gaussian or Rectangular smearing for Pole of G^LDA with esmr for hsfp0.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\line \par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab BZ integration.\line 3 integers as {\i N}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}1,\u8198?{\i N}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}2,\u8198?{\i N}3 (no default); They are \u8196?\u8805?\u8196?0.\line Brillouin Zone mesh for integration is determined by keywordsBZmesh and n1n2n3. Current version only allow regular mesh point including Gamma point for {\i G}\u8197?\u215?\u8197?{\i W}. But not that Chibelow allow you to use off-Gamma mesh for {\i W}({\i \u969?}) (and dielectric function mode).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 We usually take \u8217'4 4 4\u8217', \u8217'6 6 6\u8217' or \u8217'8 8 8\u8217' for GaAs. For metal such as Fe, \u8217'10 10 10\u8217' or more is better.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 (on or off)\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Chi= on (default): Use regular mesh (including gamma) for eps calculation.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Chi= off : Use off-Gamma mesh (Not including gamma) for eps calculation.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 (In cases, Chioff gives faster convergence as for n1n2n3; not only for GW, but also for dielectric functions eps.)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab Plane wave ($\{\\bf q+G\}$) cutoff\line 1 real (no default)\line 1 real (no default)\line 1 logical (no defalt)\line We have two cutoff for $\{\\bf q+G\}$. QpGcut is the cutoff of |{\i q}\u8197?+\u8197?{\i G}| for the IPW in the expansion of the eigenfunctions. QpGcut is for the IPW of the interactions {\i v},\u8198?{\i D},\u8198?{\i W}. Its unit is specified by unit2pioa ; "off" means unit in a.u. and "on" means in unit of $\\frac\{2 \\pi\}\{\\mbox\{\\rm alat\}\}$. (alat is length scale unit in ctrl.*).\line Rule of thumb: {\f1 QGcutUUUUUUpsi} is a little (usually 0.5 or so) larger than {\f1 QpGcutUUUUUUcou}. It becomes accurate if we use large {\f1 QpGcutUUUUUUcou}. But it enlarge size of IPW(interstitial plane wave) part of Mixed product basis. For test, try 2.7, 3.2, 3.7 for {\f1 QGcutUUUUUUcou} (and add 0.5 or 1 for {\f1 QGcutUUUUUUpsi}). Larger one is expensive.\line We expand eigenfunctions in the Muffin-tin division of the space. See Eq. in Ref.; in the current {\i G}{\i W} implementation, we use very simple form of eigenfuncitons (not by the 3-component formalism in the ).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Thus the form of expansion is just related to the division of space; not directly related to the difference among LAPW, LMTO, and PMT.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab Eigenfunctions within MTs (no parameters setting for them).\line The radial functions (phi and phidot for each {\i l}), corresponding to the true parts, (= 2nd component in the 3-component formalism ), are automatically determined already in the one-body part of program lmf-MPIK.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 4.\tx360\tab Cutoff for used bands.\line : 1 real (optional,default=\u8734?), in Ry\line : 1 real (optional,default=\u8734?; We usually use 3 Ry).\line {\f1 emaxUUUUUUsigm} is the maximum limit of the self-energy (measured from the Fermi energy). See the paper  which shows how the results are affected by emax. But in cases, small {\f1 emaxUUUUUUsigm} can give poor dispersion curve (slightly unnatural behavior) because of sudden cutoff by emax. However, we like to use smaller value to reduce computational time.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 That is, larger is better, but expensive (And note that we simultaneously need to use empty spheres when we use large emax, as shown in , ).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Generally speaking, accuracy less than \u8764?0.1eV (for bandgap) is allowance of current technique. Probably, it may be possible to have better accuracy, but it may ask us to repeat many calculations with changing conditions to confirm stability.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 : 1 integer (optional,default=\u8734?)\line : 1 integer (optional,default=\u8734?)\line These specify how many bands you use in {\b hx0fp0} (for chi0) and in {\b hsfp0} (for sigma). Higher bands above them are neglected.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 5.\tx360\tab Energy mesh related parameters.\line \u8212- new after march2016 \u8212-\line : 1 real (a.u.). Mesh width along real axis for {\i W}({\i \u969?}).\line : 1 real (a.u.).\line {\f1 HistBinUUUUUUdw} and {\f1 HistBinUUUUUUratio} specify real space bins which we accumulate imaginary part weight of polarization functions. The bins are (see {\f1 frhis} in {\f1 ecalj/fpgw/gwsc/mUUUUUUfreq.F}) $$\\begin\{aligned\}
\\omegaUUUUUUi=b*(\\exp(a*(i-1))-1),\\end\{aligned\}$$ where $[\\omegaUUUUUUi, \\omegaUUUUUU(i+1)]$ ({\i i}\u8196?=\u8196?1,\u8198?2,\u8198?...,+1@) is the {\i i}-th bin. {\f1 HistBinUUUUUUdw} is bin width at {\i \u969?}\u8196?=\u8196?0. The ratio $\\omegaUUUUUU(i+1)/\\omegaUUUUUU(i)$ for large {\i \u969?} is exp\u8198?({\i a})={\f1 HistBinUUUUUUratio}. This choice of getting coarser at high energy is because we think {\i W}({\i \u969?}) around {\i \u969?}\u8196?\u8764?\u8196?0 gives most important contribution to the GW approximation. If histogram bins are too wide, dielectric function can be less accurate, but results may be not so much affected.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 In GW calculation, the Plasmon pole is important. It is determined not by the Drude weight; it usually gives small contribution to the Plasmon pole (for example, Si is described well by a Plasmon pole model, but Si has no Fermi surface). We expect that the GW results are not so sensitive to the choice of {\f1 HistBinUUUUUUdw, HistBinUUUUUUratio} usually. We may use fine mesh when we plot quantities such as {\i W}({\i \u969?}) near {\i \u969?}\u8196?=\u8196?0.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 The ecalj gives {\i W\u772?}({\i \u969?}\u8196?=\u8196?0)\u8196?\u8764?\u8196?0 for metal; where {\i W\u772?}({\i \u969?}) is the effective interaction averaged in the {\i \u915?}-cell . And $\\bar\{W(\\omega\}$ get closer to {\i v} for larger {\i \u969?}.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Default value of them are given in {\f1 fpgw/gwsrc/mUUUUUUfreq.F}. They are\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1  call getkeyvalue("GWinput","HistBinUUUUUUratio",oratio, default=1.03d0) \line
 call getkeyvalue("GWinput","HistBinUUUUUUdw",dw, default=1d-5) !a.u.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 These are safer settings. Thus new {\f1 mkGWINUUUUUUlmf2} (GWinput.tmp generator) gives default lines in {\f1 GWinput} as\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 HistBinUUUUUUdw  2d-3 ! 1d-5 for metal  !(a.u.) bin width along real axis at omega=0.\line
HistBinUUUUUUratio 1.08 ! 1.03 for check. frhis(iw)= b*(exp(a*(iw-1))-1),\line
  where a=ratio-1.0 and dw=b*a \par}
{\pard \ql \f0 \sa180 \li360 \fi0 . This is given in the {\f1 conv2gwinput.F}.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \u8212- old version. before 14march2016 \u8211-\line : 1 real (a.u.). Mesh width along real axis for {\i W}({\i \u969?}).\line : 1 real (a.u.).\line dw and omg determines {\i \u969?} mesh along real axis to calculate {\i W}({\i \u969?})...\line \u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212--\line \line : 1 real (a.u.). We usually use very small number as -1d-8 for gw, eps mode and so.\line xxx does this really make the stabilization? xxx This is the size of {\i \u948?} in denominator of {\i \u928?} (EQ.xxx). But (I think) we can (or can not) use it so as to make broadening for theoretical test (maybe not exactly corresponding to {\i \u948?}). or when you make calculation stabilized (Takao need to check this point again xxx!)\line [Old note. Need check xxx: In gw, it is used for broadening of x0 when it call hx0fp0. Then delta is {\i \u948?} is EQ.32. The sign of delta is just used as a flag whether you use the tetrahedron method of dielectric constant  or not; minus sign means "Use the tetrahedron method for {\i D}"; plus sign means you do it by simple sum. You can usually use this default setting. But it might be possible to use a larger value to smear the fine structures on the energy-dependence of {\i W} in cases. This might be necessary if {\i W} is so energy-dependent and is not so small to resolve the structure \u8212-but I don\u8217't know.]\line : 1 integer.\line Number of integration points along the imaginary axis(FIG.1) to get $\\SigmaUUUUUUc$. See routines wint* called from sxcf*.F, which is called from the main routine hsfp0.m.F (or hsfp0.sc.m.F in the QSGW case). The integration points are {\i i}{\i \u969?}\u8242?({\i n})\u8196?=\u8196?{\i i}(1/{\i x}({\i n})\u8197?\u8722?\u8197?1), where {\i x}({\i n}) is the usual Gaussian-integration points for the interval [0,1]. In addition, we give the special analytical treatment for the peaky part at {\i \u969?}\u8242?\u8196?=\u8196?0. Out tests shows niw=6 for Si is good enough for 0.01 eV accuracy. The convergence as for niw is quite good. This integration scheme has been developed by Ferdi Aryasetiawan. The number of points should be the one of 6,10,12,16,20,24,32,40,or 48. It is because we use a subroutine gauss in /gwsrc/mate.F prepared by Ferdi. We will replace better one in future. See II-F in Ref.I.\line : 1 logical\line : 1 real (Ry). Used by hsfp0 (and hsfp0.sc for QSGW).\line Poles of the Green function $G^\{\\rm LDA\}$ are treated as if they have width esmr in hsfp0. If GaussSmear is on, each pole of $G^\{\\rm LDA\}$ is smeared by a Gaussian function with {\i \u963?}=esmr in the calculation of hsfp0. If GaussSmear is off, we assume rectangular smearing for the poles. Usually it is necessary to take rather smaller value than band gap for insulators. Try to use 0.003 or so in the case of Si and GaussSmear=on.\line For metal, this esmr is somehow related to how we capture the Fermi surface; In principle, we have to take the limit n1n2n3 \u8196?\u8594?\u8196?\u8734? and esmr \u8196?\u8594?\u8196?0). However, we may inevitably use some finite esmr to make calculations converged.)\par}
{\pard \ql \f0 \sa180 \li360 \fi0 : 1 real (a.u.) only for one-shot case.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 deltaw is the interval for the numerical derivative $\\frac\{\\partial \\Sigma(\\omega)\}\{\\partial \\omega\}$ in EQ.8. We calculate $\\langle \\psi^\{\{\\bf k\}n\} |\\Sigma(\\epsilon^\{\{\\bf k\}n\}+\{\\tt deltaw\}) |\\psi^\{\{\\bf k\}n\} \\rangle$ and $\\langle \\psi^\{\{\\bf k\}n\} |\\Sigma(\\psi^\{\{\\bf k\}n\}\\!-\\!\{\\tt deltaw\})|\\psi^\{\{\\bf k\}n\} \\rangle$ in addition to $\\langle \\psi^\{\{\\bf k\}n\} |\\Sigma(\\epsilon^\{\{\\bf k\}n\})|\\psi^\{\{\\bf k\}n\} \\rangle$. From these values, we can calculate two {\i Z} (or second-derivative of {\i \u931?}({\i \u969?})), as shown in SECU. It will help to see whether the used is O.K. or not.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 6.\tx360\tab Offset-gamma point.\line :1 integer\line Q0P gives how to determine the offset gamma points. Initially we take them as\line 1: |q| is ten times smaller than regular mesh.(default)\line 2: |q| is average in the Gamma cell (cell of BZ including Gamma point).\line Then we choose only inequivalent $\{\\bf q\}$ points based on the point group symmetry. Obtained offset gamma points is given in Q0P file.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 : 1 real (a.u.)\line alpha corresponds to {\i \u945?} in EQ.48. alpha=1d0 is usually good in the sense that it seems to be almost a limit at {\i \u945?}\u8196?\u8594?\u8196?0. So you can usually fix it as alpha=1d0, and check the convergence as for n1n2n3.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 7.\tx360\tab core orthogonalization (default=off)\line 1 logical \u8212- recently, this option is not maintained \u8212- Better to use local orbital instead, so that core charge do not spill out.\line If this is on, we enforce cores orthogonalized to valence {\i \u981?} and {\i \u981?\u775?} (these appear in II-C in Ref.I). This procedure enforce the correct orthogonal condition, thus we have correct behavior for the dielectric function at $\{\\bf q\} \\to 0$. However, it may deform core functions too much, especially in the case of shallow 3d (or maybe 4d) cores. So we don\u8217't recommend use this option, even though then the orthogonality condition is somehow broken. Anyway you can check weather it affects to results or not by this switch.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 8.\tx360\tab QP self-consistent GW.\line 1 integer (no default).\line This is required for QSGW calculation by the script gwsc. We have some possible ways to make GW self-consistent (how we determine $VUUUUUU\{\\rm xc\}$ from calculated {\i \u931?}({\i \u969?})). We now mostly use iSigMode=3.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 3:\u160?Use $\\displaystyle\{\\rm Re\}\\frac\{\\SigmaUUUUUU\{nn'\}(\\epsilonUUUUUUn)+\\SigmaUUUUUU\{nn'\}(\\epsilonUUUUUU\{n'\})\}\{2\}$ (mode-A in ).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 1:\u160?Use $\\displaystyle\\SigmaUUUUUU\{nn'\}(EUUUUUUF) + \\deltaUUUUUU\{nn'\}(\\SigmaUUUUUU\{nn'\}(\\epsilonUUUUUUn)-\\SigmaUUUUUU\{nn'\}(EUUUUUUF))$ (mode-B in ).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 5:\u160?Use $\\displaystyle\\deltaUUUUUU\{nn'\} \\SigmaUUUUUU\{nn\}(\\epsilonUUUUUUn)$ (Eigenvalue-only self-consistency, keeping the eigenfuncions as given)).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 See /gwsrc/sxcfUUUUUUfal2.sc.F@, which is called from the main routine hsfp0 (this is the routine to calculate self-energy)).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 9.\tx360\tab Others\line 1 logical (default=on)\line These are for memory usage. When KeepEigen is on, eigenfunctions (Eigen) are kept in memory during calculation. If you have not enough memory in your machine, use them off. Then you can save memory usage. However, then we may have too frequent access to files. So %CPU might get lower. Be careful to use these options.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 1 integer (default=0) If 0, it gives minimum standard output. If 40 or higher, it shows too much output. (these verbosity control is not well-organized yet).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 10.\tx360\tab ,, are for test purpose.xxx\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 <QPNT> section\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (only for one-shot GW. Not suitable to make band plot in BZ.) This section is to specify the q points and bands index for which you calculate the QP energies (QPE). An example is\par}
{\pard \ql \f0 \sa180 \li0 \fi0 =2.6mm\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <QPNT>\line
 --- Specify the q and band indeces,  for which we evaluate the self-energy ---\line
\line
*** all q -->1, otherwise 0;  up only -->1, otherwise 0\line
           0           0\line
*** no. states and band index for calculation.\line
          3\line
  15 16 17 \line
*** q-points, which shoud be in qbz.  See KPNTin1BZ.\line
           2\line
  1     0.0000000000000000     0.0000000000000000     0.0000000000000000\line
  2     0.2886751358562925    -0.5000000000000000     0.0000000000000000\line
  3     0.0000000000000000     0.0000000000000000     0.3073140749846343\line
</QPNT>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Numbers are read by free format read(5,*), thus the numbers should be separated by space. At the next line to the first **, you have to give two numbers used as flags. Both of them takes 0 or 1. 1st one is whether you calculate QPE for all q points (in IBZ) or not. If it is 1, you calculate QPE for all q. If it is 0, you calculate them only for q points specified within this file. In the case of metal where you want to calculate the Fermi energy for QPE, you need to calculate all the eigenvalues somehow above the Fermi energy (If you put 1, it is safer but too time-consuming). The second number is whether you calculate QPE for both spins or not. It is usually 0. In the case of antiferro material, it should be 1.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 From the next line to the second **, you have to specify the states for which you calculate the QPE. In this example, you calculate the 3 bands of QPE for 15th, 16th, and 17th eigenfunctions (they are ordered from the bottom).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 From the next line to the third **, you have to specify the q points. The first numbers of each line are dummy. In this case, you calculate QPE for two q points. The third q point is neglected because 2 is given at first.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When you generate GWinput.tmp, you see all the possible {\i q} points are listed (these q points should be a part of the regular mesh points).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In the QS{\i G}{\i W}mode (gwsc), this section is neglected (then we calculate all QPE on regular mesh points); so its hsfp0part is quite expensive (usually it takes time more than hx0fp0).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u160?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Additional Note \u8212-\u8212-\u8212-\u8212-\u8211-\line num1 num2 (two integers).\line This override setting in <QPNT>@. (I think this switch may still work, but not checked recently).\line on (default is off)\line If this is on, you can specify any Q point which is not on the mesh point. For the purpose, we need to prepare eigenfunctions at extra $\\bf k$ points. But it is automatic. In order to make the computation efficient. Even in this case, from the computational view, it is better to choose $\{\\bf q\}$ on the two times finer divided mesh (or three times finer divided $\{\\bf k\}$ mesh). This is used for Fig.6 in Phys. Rev. B 74, 245125 (2006).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 set QPNT for eps mode (QforEPS section)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For eps modes (scripts @, which are for linear responses. See Sec.{\field{\*\fldinst{HYPERLINK "#linearr"}}{\fldrslt{\ul
16
}}}
), you have to specify q point in the following ways.\line 1. on\line Then all Q point in IBZ are used.\line 2. Use section as\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <QforEPS>\line
0d0 0d0 0.01d0\line
0d0 0d0 0.02d0\line
0d0 0d0 0.04d0\line
0d0 0d0 0.08d0\line
</QforEPS>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In addition, you can specify Q points as\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <QforEPSL>\line
0d0 0d0 0d0   1d0   0d0  0d0 8\line
0d0 0d0 0d0  .5d0  .5d0  0d0 8\line
</QforEPSL>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is along the line\u8212- 8 point along the line (not left-end q; so omitting 0 0 0). The first line means line (0d0 0d0 0d0)\u8212-(1d0 0d0 0d0) is divided to 8. So we have 7 points, (0.125 0 0), (0.25 0 0),... (1 0 0).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 <PRODUCT> section\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This section is to define product basis to expand {\i W} and so. Numbers are read by free format read(5,*),thus the numbers should be separated by space. The line number in this section is meaningful (you can not add comment lines).\line \par}
{\pard \qc \f0 \sa180 \li0 \fi0 \emdash\emdash\emdash\emdash\emdash\par}
{\pard \ql \f0 \sa180 \li0 \fi0 width 15cm\par}
{\pard \ql \f0 \sa180 \li0 \fi0 =2.6mm\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <PRODUCTUUUUUUBASIS>\line
 tolerance to remove products due to poor linear-independency\line
  0.100000D-04 ! =tolopt; larger gives smaller num. of product basis. See lbas and lbasC, which are output of hbasfp0.\line
 lcutmx(atom) = maximum l-cutoff for the product basis.  =4 is required for atoms with valence d, like Ni Ga\line
  4  3\line
  atom   l  nnvv  nnc ! nnvv: num. of radial functions (valence) on the augmentation-waves, nnc: num. for core.\line
    1    0    2    3\line
    1    1    2    2\line
    1    2    3    0\line
    1    3    2    0\line
    1    4    2    0\line
    2    0    2    1\line
    2    1    2    0\line
    2    2    2    0\line
    2    3    2    0\line
    2    4    2    0\line
  atom   l    n  occ unocc  ! Valence(1=yes,0=no) \line
    1    0    1    1    1   ! 4SUUUUUUp  ----- \line
    1    0    2    1    0   ! 4SUUUUUUd        \line
    1    1    1    1    1   ! 4PUUUUUUp        \line
    1    1    2    0    0   ! 4PUUUUUUd        \line
    1    2    1    1    1   ! 4DUUUUUUp        \line
    1    2    2    0    0   ! 4DUUUUUUd        \line
    1    2    3    1    1   ! 3DUUUUUUl        \line
    1    3    1    0    1   ! 4fUUUUUUp        \line
    1    3    2    0    0   ! 4fUUUUUUd        \line
    1    4    1    0    0   ! 5gUUUUUUp        \line
    1    4    2    0    0   ! 5gUUUUUUd        \line
    2    0    1    1    1   ! 2SUUUUUUp  ----- \line
    2    0    2    0    0   ! 2SUUUUUUd        \line
    2    1    1    1    1   ! 2PUUUUUUp        \line
    2    1    2    0    0   ! 2PUUUUUUd        \line
    2    2    1    1    1   ! 3dUUUUUUp        \line
    2    2    2    0    0   ! 3dUUUUUUd        \line
    2    3    1    0    1   ! 4fUUUUUUp        \line
    2    3    2    0    0   ! 4fUUUUUUd        \line
    2    4    1    0    0   ! 5gUUUUUUp        \line
    2    4    2    0    0   ! 5gUUUUUUd        \line
  atom   l    n  occ unocc  ForX0 ForSxc ! Core (1=yes, 0=no)\line
    1    0    1    0    0      0    0    ! 1S -----\line
    1    0    2    0    0      0    0    ! 2S      \line
    1    0    3    0    0      0    0    ! 3S      \line
    1    1    1    0    0      0    0    ! 2P      \line
    1    1    2    0    0      0    0    ! 3P      \line
    2    0    1    0    0      0    0    ! 1S -----\line
</PRODUCTUUUUUUBASIS>\par}
{\pard \qc \f0 \sa180 \li0 \fi0 \emdash\emdash\emdash\emdash\emdash\par}
{\pard \ql \f0 \sa180 \li0 \fi0 width 15cm This section is read in the free format in fortran. So, e.g., 0.01@ works as same as 0.10000D-01@. The line order is important (you have to keep the order given by GWinput.tmp). Be careful atom atom id\u8212-lmf may re-order it and pass it to gw code. Look into LMTO file (generated by {\b mkGWIN2}); which contains crystal structure information after such re-ordering by lmf. I used !@ to make clear that things after !@ are comments. But !@ is not meaningful \u8211- just the expected numbers of data separated by blank(s) are read for each line from the beginning of lines.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab {\f1 0.100000D-02 ! =tolopt} controls a number of Product basis to expand the Coulomb interaction within MTs. tolopt is a criterion to remove the poorly linear-independent product basis. Note that the product basis, which is to expand the Coulomb interaction, is different from the basis to expand eigenfunctions. In our experience, {\f1 0.100000D-02} (=0.001) is not so bad. If you like to reduce computational time use 0.01 or so, but a little dangerous in cases. With 0.0001, we can check stability on it.\line (note: By supplying multiple numbers, we can specify tolopt atom by atom. Remember lmchk gives atom ID.)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab lcutmx(atom) is the l cutoff of product basis for atoms in the primitive cell (do lmchk for atom id). In the case of Oxygen, we can usually use lcutmx=2 (need check by the difference when you use lcutmx=2 or lcutmx=4). Then the computational time is reduced well.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab (dec2014:<PBASMAX>@ is not checked recently; see /main/hbasfp0.m.F@ and /gwsrc/basnfp.F@).) You can use <PBASMAX>@ section to override this setting. It is given as\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 <PBASMAX>\line
1  5 5 5 3 3\line
2  5 5 3 2 3\line
3  3 3 2 2 2\line
</PBASMAX>\par}
{\pard \ql \f0 \sa180 \li360 \fi0 The first number is for atom index (fixed), and other are product basis for each {\i l} channel.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab The integer numbers in 4th line lcutmx gives the maximum angular momentum {\i l} for the product basis for each atomic site. In our experience, lcutmx=4 is required when the semi-core (or valence ) 3{\i d} electrons exist and we want to calculate the QP energies of them.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Keep a block starting from " atom l nnvv nnc ..." as it originally generated in GWinput.tmp. It just shows that how many kinds of radial functions for cores and valence electrons for each atom and l. nnvv=2 in the case of {\i \u981?} and {\i \u981?\u775?}; nnvv=3 in the case to add the local orbital in addition.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab There are two blocks after the line "atom l n occ unocc :Valence(1=yes, 0=no)\u8217' and after "atom l n occ unocc ForX0 ForSxc ! Core (1=yes, 0=no)\u8217'. These are used to choose atomic basis to construct the product basis. The product basis are generated from the products of two atomic basis.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 GWinput.tmp generated by {\b mkGWIN2} contains labels on each orbitals as 4SUUUUUUp@, 4SUUUUUUd@, 4PUUUUUUp@... Here 4SUUUUUUp@ is for $\\phiUUUUUU\{4s\}$; 4SUUUUUUd@ for {\i \u981?\u775?}{\i U}{\i U}{\i U}{\i U}{\i U}{\i U}4{\i s}; 3DUUUUUUl@ for $\\phi^\{\\rm local\}UUUUUU\{3d\}$. Capital letter just after the principle-quantum number means the orbital is used as \u8216'Head of MTO\u8217'; lowercase means just used only as the \u8216'tail of MTO\u8217'.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 The switches for columns labeled as and . take 0 (not included) or 1 (included). With the switch, we can construct two groups of orbitals, and . In this sample GWIN2 as for atom 1, $\\\{ \\phiUUUUUU\{4s\},\\dot\{\\phi\}UUUUUU\{4s\},\\phiUUUUUU\{4p\},\\phiUUUUUU\{4d\},\\phi^\{\\rm local\}UUUUUU\{3d\}, 
\\phi^\{\\rm core\}UUUUUU\{3s\},\\phi^\{\\rm core\}UUUUUU\{3p\} \\\}$ consist the group , and $\\\{ \\phiUUUUUU\{4s\},\\phiUUUUUU\{4p\},\\phiUUUUUU\{4d\},\\phi^\{\\rm local\}UUUUUU\{3d\},\\phiUUUUUU\{4f\} \\\}$ consists the group . So the any product of combinations $\\\{ \\phiUUUUUU\{4s\},\\dot\{\\phi\}UUUUUU\{4s\},\\phiUUUUUU\{4p\},\\phiUUUUUU\{4d\},\\phi^\{\\rm local\}UUUUUU\{3d\}, 
\\phi^\{\\rm core\}UUUUUU\{3s\},\\phi^\{\\rm core\}UUUUUU\{3p\} \\\}
\\times \\\{ \\phiUUUUUU\{4s\},\\phiUUUUUU\{4p\},\\phiUUUUUU\{4d\},\\phi^\{\\rm local\}UUUUUU\{3d\},\\phiUUUUUU\{4f\} \\\}$ are included as for the basis of the product basis. As for atom 2, $\\\{ \\phiUUUUUU\{2s\},\\phiUUUUUU\{2p\},\\phiUUUUUU\{3d\} \\\} 
\\times \\\{ \\phiUUUUUU\{2s\},\\phiUUUUUU\{2p\},\\phiUUUUUU\{3d\},\\phiUUUUUU\{4f\} \\\}$ are included.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Core section: (not worth to read, since we currently use no CORE2, =B=C=0@.)\line Each line of the last section of Product BASIS forms\par}
{\pard \ql \f0 \sa180 \li360 \fi0 =2.6mm\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1   atom   l    n  occ unocc   ForX0 ForSxc :CoreState(1=yes, 0=no)\line
    1    2    1    A    x      B    C\par}
{\pard \ql \f0 \sa180 \li360 \fi0 At first you have to understand the concept of CORE1 and CORE2 in EQ.35 Ref.I. However, in our recent calculations, we do not use \u8220"CORE2\u8221" generally. So, in such a case, set =B=C=0@. And treat shallow cores (above Efermi\u8722?2Ry or so ) as valence electron by \u8220"local orbital method\u8221" in lmf.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Be careful. Current version is inconvenient... Need to repeat mkGWIN2 to generate GWinput template when you add PZ (local orbital).\sa180\par}
{\pard \ql \f0 \sa180 \li720 \fi0 [( Note: you can skip here if you don\u8217't use CORE2.)\par}
{\pard \ql \f0 \sa180 \li720 \fi0 Each of A,x,B,C takes 0 or 1. There are some possible combination of these switches;\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 1.\tx360\tab If you take ( A x B C )= (1 0 1 1), then the core is included in core2. In other words, this core is treated in the same manner of the valence electron.\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 2.\tx360\tab If you take ( A x B C )= (0 0 0 0), then the core is included in core1. The (exchange only) self-energy related to this core is included in SEXcore.\par}
{\pard \ql \f0 \sa180 \li1080 \fi0 C is the key switch which determine whether it is included in core1 or core2. There could be another option.\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 3.\tx360\tab If you take ( A x B C )= (1 0 0 1). This core is in core2. But it is not included in the calculation of {\i D} and {\i W}. This core is only included for SEX and SEC calculations.\sa180\par}
{\pard \ql \f0 \sa180 \li720 \fi0 These three kinds of choices are reasonable ones but we can consider some another choice. In the following, we show how these switches (,B,C@) affect executions called from gw (essentially as same as gw).\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab hbasfp0(mode 3) :Product basis for exchange due to core.\line We include the C=0 cores as a part of the product basis as if A=1 x=0.\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab hsfp0(mode 3): exchange mode for core.\line $\\SigmaUUUUUU\{\\rm x\}$ only due to the C=0 cores are calculated.\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab hbasfp0 (mode1): Product basis.\line Only see the switch A and x. The product basis is generated from (occupied \u215? unoccupied), where A=1 core is included as one of the occupied basis.\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab hsfp0 (mode 1): exchange mode.\line Only see the switch C. $\\SigmaUUUUUU\{\\rm x\}$ due to valence and due to C=1 cores are calculated.\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab hx0fp (mode 1): {\i W}\u8197?\u8722?\u8197?{\i v} calculation.\line Only see the switch B. {\i W} is calculates using all the valence and B=1 cores.\par}
{\pard \ql \f0 \sa180 \li1080 \fi-360 \bullet \tx360\tab hsfp0 (mode 2): correlation mode.\line Only see the switch C. $\\SigmaUUUUUU\{\\rm c\}$ due to valence and due to C=1 are calculated.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8226? After you perform or anything, you find output files lbas by hbasfp0 (mode1), and/or lbasc by hbasfp0 (mode3) for core. These contains important information about how many and how product basis are chosen. E.g. \u8217'nbloch lbas@\u8217' shows how many product basis are used in the calculations.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 ANFcond (we can skip here since we do not check this option now. Need fix this if necessary.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This file is used in {\b hx0fp0} in the calculation of {\i W}\u8197?\u8722?\u8197?{\i v} (or rather {\i \u928?} in the program) to specify the antiferro condition.\line {\b Note} : Now only for the case that (a translation vector + spin flip) is a symmetry operation.\line This should be given by hand. For the cases of not antiferro, this file should not exist. Even if ANFcond  does not exists for antiferro case, {\b hx0fp0} works but it requires about two time computational efforts.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 =2.6mm\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 The existence of this file means the Antiferro condition is used for x0k\line
Product basis B(\{\\bf r\}-\{\\bf a\}) is translated to B(\{\\bf r\}-\{\\bf a\}-Af\})= B(\{\\bf r\}-\{\\bf a\}'-TUUUUUU0\})\line
 1d0  1d0  1d0        ! Af=Antiferro translation vector in Cartesian.\line
 1  2\line
 2  1\line
 3  4\line
 4  3\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The first line specifies the Antiferro translation vector. From the second line, we specify that atom {\i i} in the primitive cell is mapped to what atom {\i j}({\i i}) in the cell with the opposite spin by the translation. In this case, {\i j}(1)\u8196?=\u8196?2,\u8198?{\i j}(2)\u8196?=\u8196?1,\u8198?{\i j}(3)\u8196?=\u8196?4,\u8198?{\i j}(4)\u8196?=\u8196?3. You have to be careful as for the true atomic position used in the GW calculations can be different from the given atomic positions in ctrl.MnO. The true atomic positions is written in LMTO.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In the case of one-shot GW (gwand gw), it may be better to set "up only" QPE, so that you only calculate QPE of up spins at the same time.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In the case of gwsc, we just calculate QPE for up spins automatically (QPNT section is neglected).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Main Output Files of GW part\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 QPU\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is the main output{\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 Note that QPU also implies QPD and so on. U is for up D is for down spins.\par}
} in human readable format.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 An example of one-shot GW by gw) is (In the case of QSGW, {\i Z} ({\i Z}\u8196?=\u8196?1) is not shown):\par}
{\pard \ql \f0 \sa180 \li0 \fi0 =2.6mm\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1  ===============================================================\line
  quasiparticle energies MAJORITY\line
 ===============================================================\line
EUUUUUUshift=  0.4263273221017709D+00  0.6075150850568627D+00  0.7046628446164018D+00 eV\line
\line
    q      state SEx   SExcore SEc    vxc   dSE  dSEnoZ  eLDA    eQP  eQPnoZ   eHF  Z   2Z*Simg ReS(elda)\line
0.0 0.0 0.0 1  -29.56  -1.97  10.40 -20.22 -0.52  -0.90 -19.08 -19.42 -19.71 -30.81 0.58 0.95   -21.12\line
0.0 0.0 0.0 2  -30.52  -2.24  10.09 -21.53 -0.70  -1.14 -18.06 -18.58 -18.93 -29.72 0.61 0.96   -22.66\line
0.0 0.0 0.0 3  -20.67  -1.87   5.97 -16.85  0.19   0.28  -7.20  -6.83  -6.65 -13.32 0.67 0.66   -16.57\line
  ...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 From the 6h line, we have the eigenvalue data. All of the unit of energy is in eV. We should note that the zero-level of these values eLDA eQP eQPnoZ can be changed by hqpe. This eLDA - E are the eigenvalues relative to a Fermi energy determined by the smearing method. Detailed value of eLDA is in TOTE2.UP. Detailed value of eLDA- E is in TOTE.UP.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u160?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 q : $\{\\bf k\}$ vector\par}
{\pard \ql \f0 \sa180 \li0 \fi0 state: Band index {\i n}, which is from the lowest eigenvalue (not include cores).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 SEx: = $= \\langle\{\\bf k\}n\{\{\\bf k\}n\}|\\SigmaUUUUUU\{\\rm x\}^\{\\rm core2+valence\}(\{\\bf r\},\{\\bf r\}^\{\\prime\})|\{\\bf k\}n\{\{\\bf k\}n\}\\rangle$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 SExcore: $= \\langle\{\\bf k\}n\{\{\\bf k\}n\}|\\SigmaUUUUUU\{\\rm x\}^\{\\rm core1\}(\{\\bf r\},\{\\bf r\}^\{\\prime\})|\{\\bf k\}n\{\{\\bf k\}n\}\\rangle$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 SEc: $= \\langle\{\\bf k\}n\{\{\\bf k\}n\}|\\SigmaUUUUUU\{\\rm c\}^\{\\rm core2+valence\}(\{\\bf r\},\{\\bf r\}^\{\\prime\},\\epsilonUUUUUUn(\{\\bf k\}))|\{\\bf k\}n\{\{\\bf k\}n\}\\rangle$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 vxc: LDA exchange correlation energy. $\\langle\{\\bf k\}n\{\{\\bf k\}n\}|VUUUUUU\{\\rm xc\}^\{\\rm LDA\}([nUUUUUU\{\\rm total\}],\{\\bf r\})|\{\\bf k\}n\{\{\\bf k\}n\}\\rangle$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 dSE: $ZUUUUUU\{n\{\\bf k\}\}\\times$ dSEnoZ\par}
{\pard \ql \f0 \sa180 \li0 \fi0 dSEnoZ: $\\langle\{\\bf k\}n\{\{\\bf k\}n\}|
\\SigmaUUUUUU\{\\rm x\}^\{\\rm core1\}(\{\\bf r\},\{\\bf r\}^\{\\prime\})+
\\SigmaUUUUUU\{\\rm xc\}^\{\\rm core2+valence\}(\{\\bf r\},\{\\bf r\}^\{\\prime\},\\epsilonUUUUUUn(\{\\bf k\}))
|\{\\bf k\}n\{\{\\bf k\}n\}\\rangle 
- \\langle\{\\bf k\}n\{\{\\bf k\}n\}|VUUUUUU\{\\rm xc\}^\{\\rm LDA\}([nUUUUUU\{\\rm total\}],\{\\bf r\})|\{\\bf k\}n\{\{\\bf k\}n\}\\rangle$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 = SEx + SExcore + SEc - vxc\par}
{\pard \ql \f0 \sa180 \li0 \fi0 eLDA: LDA eigenvalues. $\\epsilonUUUUUUn(\{\\bf k\})$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 eQP: QP energy. $\\epsilonUUUUUUn(\{\\bf k\})$+dSE\par}
{\pard \ql \f0 \sa180 \li0 \fi0 eQPnoZ: QP energy without {\i Z}. $\\epsilonUUUUUUn(\{\\bf k\})$+dSEnoZ\par}
{\pard \ql \f0 \sa180 \li0 \fi0 eHF: HF energy of 1st iteration. $\\epsilonUUUUUUn(\{\\bf k\})$+SEx + SExcore -vxc\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Z: Z factor. $ZUUUUUU\{n\{\\bf k\}\}$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 2Z*Simg: Quasi-particle life time. $2 ZUUUUUU\{n\{\\bf k\}\} \\times \{\\rm Im\}
\\langle\{\\bf k\}n\{\{\\bf k\}n\}|
\\SigmaUUUUUU\{\\rm c\}^\{\\rm core2+valence\}(\{\\bf r\},\{\\bf r\}^\{\\prime\},\\epsilonUUUUUUn(\{\\bf k\}))
|\{\\bf k\}n\{\{\\bf k\}n\}\\rangle$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (Is this really the usual definition of the life time?\u8212-don\u8217't believe me)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 ReS(elda): $\{\\rm Re\}
\\langle\{\\bf k\}n\{\{\\bf k\}n\}|
\\SigmaUUUUUU\{\\rm x\}^\{\\rm core1\}(\{\\bf r\},\{\\bf r\}^\{\\prime\})+
\\SigmaUUUUUU\{\\rm xc\}^\{\\rm core2+valence\}(\{\\bf r\},\{\\bf r\}^\{\\prime\},\\epsilonUUUUUUn(\{\\bf k\}))
|\{\\bf k\}n\{\{\\bf k\}n\}\\rangle$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 XCU\par}
{\pard \ql \f0 \sa180 \li0 \fi0 LDA exchange-correlation. Detailed data of above vxc.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 SEXU\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Exchange part of the self-energy due to valence electrons. Detailed data of above SEx.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 SEXcoreU\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Exchange part of the self-energy due to core. Detailed data of above SExcore.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 SECU\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Correlation part of the self-energy. Detailed data of above SEc.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 TOTE.UP (TOTE.DN)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is a central output. It contains LDA and QP energies. These values are relative to a Fermi energy determined by the smearing method. It contains two kind of QP energies QP QPnoZ. The first line contains the Fermi energy in Ry determined by the smearing method. It is also shown in the end of DOSACC.lda.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 TOTE2.UP (TOTE2.DN)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is a central output. It contains zero-level shifts from TOTE.UP. The first line contains the Fermi energy in eV (= the Fermi energy in TOTE.UP but it is in Ry) and three energy shifts E, which are the same values in the 4th line of QPU.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that all .chk files are just to check calculations (not read in by successive executions).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 DOSACC.lda\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This lists all the eigenvalues in ascendant order. States with almost the same eigenvalues are degenerated states. The 4th column contains number of electrons up to the eigenvalue.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 DOSACC2.lda\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is similar with DOSACC.lda. But we remove the degeneracy.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Core.chk\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Used core eigenfunctions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 VXCFP.chk\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This contains eigenvalues and $\\langle \\psiUUUUUU\{\{\\bf k\}n\} |VUUUUUU\{\\rm xc\} |\\psiUUUUUU\{\{\\bf k\}n\}\\rangle$ in both units, Ry and eV. See below.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 The Fermi energies in this {\i G}{\i W}code.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We mainly have two kinds of Fermi energy $EUUUUUU\{\\rm FEERMI\}^\{\\rm smear\}$ $EUUUUUU\{\\rm FEERMI\}^\{\\rm tetra\}$.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab At first eigenvalues given by lmfgw is in VXCFP.chk. You can see\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 %head VXCFP.chk\line
### LDA exchange correlation ###\line
#   qvec                 ikp iband    eigen       VXC(ntotal)     VXC(nvalence)    eigen(eV)    VXC(ntotal)(eV)      VXC(nvalence)\line
  0.0000  0.0000  0.0000  1  1     -0.96932423     -1.00727912      0.00000000    -13.18843159    -13.70483831      0.00000000\line
...\par}
{\pard \ql \f0 \sa180 \li360 \fi0 These are raw values. TOTE contains the eigenvalues but relative to a Fermi energy $EUUUUUU\{\\rm FEERMI\}^\{\\rm smear\}$ which is determined by the smearing method. It is also shown at the top part of output files lsx and lsc. And you also see the value at the end of DOSACC.lda.\line This is the head of TOTE.UP;\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 %head TOTE.UP\line
          43           8  8.520283353474250E-003\line
   0.0000000   0.0000000   0.0000000    1   1  -0.1330435686590073D+02 -0.1322984339282777D+02 -0.1319228487875673D+02  0.6648715256312900D+00\line
   0.0000000   0.0000000   0.0000000    2   1  -0.7555264915356062D+00 -0.6267595395613325D+00 -0.6009483309649021D+00  0.8330216344848770D+00\line
...\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Here $EUUUUUU\{\\rm FEERMI\}^\{\\rm smear\}$=8.520283353474250E-003. From the second lines, they are LDA eigenvalues and QP energies (Z included and Z=1); they are relative to the $EUUUUUU\{\\rm FEERMI\}^\{\\rm smear\}$.\line -13.18843159 eV - $EUUUUUU\{\\rm FEERMI\}^\{\\rm smear\}$(which should be translated into in eV) = -0.1330435686590073D+02 eV. Here -13.18843159 is the value in VXCFP.chk shown above.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab There is the another Fermi energy $EUUUUUU\{\\rm FEERMI\}^\{\\rm tetra\}$, which is used by mode 11 (or mode 1) of hx0fp0 in {\b gw}. It is determined by heftet and stored in EFERMI.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab hqpe gives TOTE2.UP and QPU. They contains the same values. You can see eQP eQPnoZ Z@ not only in QPU but also in TOTE2.UP. At top lines of TOTE2.UP, you see\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 %head TOTE2.UP\line
       43        8  0.1159252712507000D+00  0.7555207081466229D+00  0.6267572296579150D+00  0.6009467172357787D+00\line
   0.0000000   0.0000000   0.0000000    1   1  -0.1254883615775411D+02 -0.1260308616316985D+02 -0.1259133816152095D+02  0.6648715256312900D+00\line
   0.0000000   0.0000000   0.0000000    2   1  -0.5783388983382487D-05 -0.2309903417430093D-05 -0.1613729123328689D-05  0.8330216344848770D+00\line
   0.0000000   0.0000000   0.0000000    3   1  -0.1369098933889923D-05 -0.6195200397129952D-07  0.2047424042528334D-06  0.8330216088297998D+00\line
   0.0000000   0.0000000   0.0000000    4   1   0.0000000000000000D+00  0.0000000000000000D+00  0.0000000000000000D+00  0.8330216340404680D+00\line
..\par}
{\pard \ql \f0 \sa180 \li360 \fi0 ,where a number in first line $EUUUUUU\{\\rm FEERMI\}^\{\\rm smear\}$= 0.1159252712507000D+00 eV =8.520283353474250E-003 Ry, the same as the previous one. This is a case when you did hqpe with augment 4 (it means we set the 4th-band eigenvalue zero). Another 3 values in the first line are shifts from TOTE. Shown eshift(eLDA) = 0.7555207081466229D+00 eV. E.g., the second line shows\line -0.1254883615775411D+02 eV= -0.1330435686590073D+02(in TOTE) + eshift(eLDA) eV.\line When you do hqpemetal, three shifts at the first line in TOTE2.UP is determined so as to give the eigenvalues relative to the Fermi energies shown in EFERMI, EFERMI.QP1, and EFERMI.QPz=1. These are Fermi energies by tetrahedron method.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u160?\line As for {\b gwband}, it recalculates eigenvalues for all {\b q}\u160?along SYML. Then\line the default "zerolevel" = $EUUUUUU\{\\rm FEERMI\}^\{\\rm smear\}$ - eshift(lda). Because the eigenvalues given by this bandmode are presumably the same, we have\line Shown LDA eigenvalue\line = -13.18843159(raw data by band mode\u8212-same as that in VXCFP.chk) - zerolevel\line = (-13.18843159 - EFERMIsmear) + eshift(lda).\line = -0.1330435686590073D+02( this is in TOTE.UP) + eshift(lda)\line = -0.1254883615775411D+02( this is in TOTE2.UP).\line It means that values in TOTE2.UP recovers. But if raw data by band mode is different from it, these is a trouble. It does not recover the values in TOTE2.UP(=QPU).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As for the QPE, we calculate the difference from LDA values in TOTE2.UP at first, and add the difference to the Shown LDA eigenvalue.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 mkGWIN2 and its I/O Files\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (QPNT.chk contains irreducible k point for given n1 n2 n3; KPTin1BZ.gwinit.chk contain all k points in Brillouin Zone).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The purpose of the script {\b mkGWIN2} is to give a template GWinput.tmp. The script is complicated because of historical reasons. However, its essential is simple; we calls three executions in this script as\line echo 0 | lmfgw si\line echo 1 | gwinit\line echo \u8197?\u8722?\u8197?100 | qg4gw\line . We explain each by each.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo\u160?0|lmfgw}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- makes SYMOPS LATTC CLASS NLAindx.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 [lmfgw]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : This is a file, which contains your supplied n1 n2 n3 when you invoke the script. This file is given within the script of mkGWIN2 (as "here document").\par}
{\pard \ql \f0 \sa180 \li0 \fi0 =2.8mm\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 cat <<EOF >GWIN0\line
n1 n2 n3\line
 $n1 $n2 $n3\line
cut\line
 4.0 3.0\line
alpha\line
 1\line
Number of bands\line
 999 99999.0 \line
 999 3.0 \line
EOF\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : Master input file of lmf calculation.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : contains the information of primitive translation vectors, lmxa and konf. See {\field{\*\fldinst{HYPERLINK "#lattc"}}{\fldrslt{\ul
[lattc]
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : The point group operations. See {\field{\*\fldinst{HYPERLINK "#symops"}}{\fldrslt{\ul
[symops]
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : Equivalent atomic positions are called as \u8217'class\u8217'. This small file contains a map between atomic site and \u8217'class\u8217'.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : This file contains indexes ($pUUUUUU\{\\rm valence\}, l, a$ ) for orbitals in the MT. ($pUUUUUU\{\\rm valence\}$ is radial function index, {\i a} is atomic site index). Eigenfunctions are expanded in this order.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : Number of MTOs for each atomic site. (this is used only from hqpe\u8212-QSGW mode).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : not meaningful at this stage\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : not meaningful at this stage\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b gwinit}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Get GWIN2.tmp and QPNT.tmp\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : A part of GWinput.tmp\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : A part of GWinput.tmp\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : check KPNT in the 1BZ.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u160?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If SYML exist, {\b gwinit} gives also a template QPNTforSYML.tmp suitable for such SYML. Here SYML specify how to plot the energy band. See explanation for {\b bandplot} script.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u160?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that LATTC SYMOPS CLASS NLAindx are overwritten when you execute {\b gw} because we repeat {\b echo\u160?0|lmf} at the head of {\b gw}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo\u160?-100|qg4gw}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Generate GWinput.tmp\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (copy of GWIN0.tmp by {\b gwinit})\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (copy of GWIN2.tmp by {\b gwinit})\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (copy of QPNT.tmp by {\b gwinit})\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (this is copied to GWinput.tmp)\line This command "echo\u160?-100|qg4gw" is a file converter from these two files into GWinput. And it is copied to GWinput.tmp. (mkGIN keeps GWinput if it exist before you invoke it.).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 gwsc script and its I/O Files\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In gwsc, we have a loop of QSGW self-consistency. Look into the gwsc script. In each iteration, we perform these fortran programs;\par}
{\pard \ql \f0 \sa180 \li0 \fi0 =2.8mm\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \line
 NOUUUUUUMPI=0 #this is used for non-mpi versions of fortran program.\line
\line
 ### self-consistent calculation for given Sigma(self-energy) ###\line
\line
          runUUUUUUarg '---' $MPIUUUUUUSIZE $nfpgw   /lmf-MPIK    llmf $TARGET\line
\line
\line
 ### Preparation stage ##############################################\line
\line
 argin=0;  runUUUUUUarg $argin $NOUUUUUUMPI  $nfpgw   /lmfgw      llmfgw00 $TARGET \line
 argin=1;  runUUUUUUarg $argin $NOUUUUUUMPI  $nfpgw   /qg4gw      lqg4gw   #Generate requied q+G v\line
 argin=1;  runUUUUUUarg $argin $MPIUUUUUUSIZE $nfpgw  /lmfgw-MPIK llmfgw01 $TARGET\line
           runUUUUUUarg  '---' $NOUUUUUUMPI   $nfpgw  /lmf2gw     llmf2gw  #reform data for gw\line
\line
 ### Main stage of gw ################################################\line
\line
 argin=0;  runUUUUUUarg $argin $NOUUUUUUMPI   $nfpgw  /rdata4gwUUUUUUv2 lrdata4gwUUUUUUv2 #prepare files\line
 argin=1;  runUUUUUUarg $argin $NOUUUUUUMPI $nfpgw    /heftet      leftet # A file EFERMI for hx0fp0\line
 argin=1;  runUUUUUUarg $argin $NOUUUUUUMPI $nfpgw    /hchknw      lchknw # A file NW, containing nw \line
\line
  ## Core part of the self-energy (exchange only) ##\line
\line
  argin=3;  runUUUUUUarg $argin $NOUUUUUUMPI $nfpgw    /hbasfp0    lbasC # Product basis generation \line
  argin=3;  runUUUUUUarg $argin $MPIUUUUUUSIZE $nfpgw  /hvccfp0    lvccC # Coulomb matrix for lbasC \line
  argin=3;  runUUUUUUarg $argin $MPIUUUUUUSIZE $nfpgw  /hsfp0UUUUUUsc   lsxC  # Sigma from core1\line
\line
\line
  ## Valence part of the self-energy Sigma ##\line
\line
  argin=0;  runUUUUUUarg $argin $NOUUUUUUMPI $nfpgw   /hbasfp0     lbas # Product basis generation \line
  argin=0;  runUUUUUUarg $argin $MPIUUUUUUSIZE $nfpgw /hvccfp0     lvcc # Coulomb matrix for lbas \line
  argin=1;  runUUUUUUarg $argin $MPIUUUUUUSIZE $nfpgw /hsfp0UUUUUUsc    lsx  # Exchange Sigma\line
  argin=11; runUUUUUUarg $argin $MPIUUUUUUSIZE $nfpgw /hx0fp0UUUUUUsc   lx0 $lx0UUUUUUparaUUUUUUoption #x0 part\line
  argin=2;  runUUUUUUarg $argin $MPIUUUUUUSIZE $nfpgw /hsfp0UUUUUUsc    lsc  #correlation Sigma\line
  argin=0;  runUUUUUUarg $argin $NOUUUUUUMPI $nfpgw   /hqpeUUUUUUsc     lqpe #all Sigma are combined.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b run}:\line Here a subroutine of bash {\b run} was used, which is given in ecalj/lm7K; it just invoke a command with the argument $argin@ (this is read by
read(*,*) in fortran). In cases with \\verb@MPIUUUUUUSIZE@$/=0$, 
mpirun is invoked. Console out
put go to l* files. For example,
%\\begin\{quote\}
%\\verb@argin=2; runUUUUUUarg $argin $MPIUUUUUUSIZE $nfpgw /hsfp0UUUUUUsc  lsc #correlation Sigma@
%\\end\{quote\}
invokes \{\\tt hsfp0\\UUUUUUsc\} with argument '2' by mpirun with the -np
\\$MPI\\UUUUUUSIZE. Console outputs are written into logfiles such as \{\\sf  lqpe\}.
\\verb@$nfpgw@ contains path to the execution binaries.\line \u160?\line In the following, We explain input/output files for each fortran program. Note that \u8220"echo 0|lmfgw\u8221" means invoking lmfgw with =0@.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo 0| lmfgw si}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 See Sec.{\field{\*\fldinst{HYPERLINK "#lmfgw"}}{\fldrslt{\ul
[lmfgw]
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo 1| qg4gw}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This makes {\b q} points, and {\b G} vectors for these {\b q}. ({\b q} was {\b k} in previous sections.) Main routine of qg4gw is fpgw/main/qg4gw.m.F and calls fpgw/gwsrc/mkqg.F\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) q and G vector for the eigenfunctions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) q and G vector for the Coulomb matrix\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : offset-{\i \u915?} points which are the replacement of the q=0 points. See section{\field{\*\fldinst{HYPERLINK "#xxx"}}{\fldrslt{\ul
[xxx]
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : q points in the Irreducible BZ.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) BZ data for integration (include tetrahedrons if necessary). See e.g. main/hx0fp0.sc.F and search "call read", which is a readin routine of this file defined in rwbzdata.F.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : list of q in the 1st BZ for check.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : q point in the 1st BZ.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : Required information for the BZ integration (mainly in order to evaluate the weight in the {\i \u915?} cell). See Eq.xxx in .\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo\u160?1|lmfgw si}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Calculate eigenfunctions, eigenvalues and $\\langle \\psi | HUUUUUU\{\\rm KS\}|\\psi\\rangle$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) Restart file of the lmf calculation. It contains all information\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) If this exist and\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) atomic data\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) band data\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) $\\langle \\psi|HUUUUUU\{\\rm KS\}|\\psi \\rangle$\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) $\\langle \\psi|HUUUUUU\{\\rm KS\}-VUUUUUU\{\\rm xc\}(nUUUUUU\{\\rm total\})|\\psi \\rangle$.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) used in hqpe.sc.m.f as "v" and "evec").\line vxc.si contains $\\langle \\psi|VUUUUUU\{\\rm xc\}(nUUUUUU\{\\rm total\})|\\psi \\rangle$ including off-diagonal part. evec.si contains eigenfunctions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : norm check (only for check) This is like this\par}
{\pard \ql \f0 \sa180 \li0 \fi0 =2.8mm\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > head -20 normchk.si\line
#       IPW         IPW(diag)   Onsite(tot)   Onsite(phi)      Total\line
      0.436015      0.805123      0.563972      0.562573      0.999988\line
      0.339134      0.620353      0.660515      0.656881      0.999649\line
      0.339133      0.620353      0.660516      0.656882      0.999649\line
      0.339133      0.620353      0.660516      0.656882      0.999649\line
      0.507738      0.648515      0.492040      0.487673      0.999778\line
...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This check is sometimes important for debugging and to determine the cutoff parameter . The first line (corresponding to 1st band of 1st q point) means that total normalization almost unity = 0.999988 = 0.436015 + 0.563972. Because we expand the MTO by IPW, the normalization is a bit different from unity, especially for higher bands. You can see that it get closer to unity for larger QGcut, though it does not reach to unity because of some contribution of the higher angular momentum contribution within MT. [Values of (phi)@ are not correctly shown in the case when you use local orbital.]\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Due to historical reason, data in vxc.si and exec.si and others contains duplicated data.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b lmf2gw}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 All the required information are stored into DATA4GW2 and CphiGeig.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) Main data for GW calculations.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 I/O of DATA4GW2 is controlled by gwinput.f, which contains detailed information.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) Eigenfunctions for GW calculations.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : Eigenvalue and Vxc check (only used for check)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is like this;\par}
{\pard \ql \f0 \sa180 \li0 \fi0 =2.8mm\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ### LDA exchange correlation ###\line
#   qvec              ikp iband    eigen        VXC(ntotal)    VXC(nvalence)      eigen(eV)    VXC(ntotal)(eV)  VXC(nvalence)\line
0.0000  0.0000  0.0000  1  1     -0.68505346     -0.91850436      0.00000000     -9.32070032    -12.49698668      0.00000000\line
0.0000  0.0000  0.0000  1  2      0.19292662     -0.99853478      0.00000000      2.62492096    -13.58586453      0.00000000\line
0.0000  0.0000  0.0000  1  3      0.19292763     -0.99853469      0.00000000      2.62493477    -13.58586334      0.00000000\line
0.0000  0.0000  0.0000  1  4      0.19292777     -0.99853461      0.00000000      2.62493664    -13.58586222      0.00000000\line
 ...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Here VXC(nvalence) is not used now. The eigenvalue in eigen is in Ry.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- This is the end of the preparation stage. \u8212-\par}
{\pard \ql \f0 \sa180 \li0 \fi0 From here, the main stage.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b rdata4gw2}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Read DATA4GW2 and some files, and decompose it into files required in the following {\i G}{\i W}steps. (checked! dec2014)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : points group operations.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : data size\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : core eigenfunctions just for check.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : basic date for the crystal.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) valence eigen value\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : core data and core eigenvalues\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) Coefficients of eigenfunctions as for the atomic-like argumentation waves in MTs\u8217'.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) Coefficients of eigenfunctions as for IPW.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) All the radial functions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : index set for CPHI. This is not refereed just a check write.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : index set for core. This is not refereed just a check write.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) this is for diagonal elements of $V^\{\\rm LDA\}UUUUUU\{\\rm xc\}(nUUUUUU\{\\rm total\})$.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) Overlap matrix of IPW. xxxxxxxxxx\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) PPOVLG Overlap matrix xxxxxxxxxxoxf IPW. not exactly the the overlap matrix. see around line 500 in rdata4gw.m.f\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) xxxxxxxxxxxxx\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) Required inputs for hvccfp0. Information in this files.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : q point info. Only used for parallel test mode.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : Norm check. These numbers should be almost the same as those in normchk.si\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These files are input for the following steps. The name of file U means that it relates to up-spin. We have D files in the case of spin-polarized calculation with nspin=2.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo\u160?1|heftet}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Get the Fermi energy EFERMI by tetrahedron method. It is used in {\b hx0fp0}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (dummy)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (dummy)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : contains Fermi energy given by the tetrahedron method. It is used in {\b hx0fp0} but not in {\b hsfp0}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : They are lists of the all the eigenvalues from the bottom. DOSACC2.lda is a list to show only the un-degenerated eigenvalues. They are just check write. But it is an indicator for you to determine in GWinput.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b hchknw}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Calculate the required number of {\i \u969?} points along real axis.\line This NW is not essentially used in gw (but required as a dummy file). Only used in gw.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (dummy)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (dummy)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : contains number of {\i \u969?} points.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo\u160?3|hbasfp0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Make product basis.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Mode 3 is for the core states. It generate a product basis on each MT suitable to expand to calculate the exchange part due to core. See explanations for the input file of GWinput.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) Product basis functions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) Radial integrals on each MT, symbolically written as \u8747?{\i \u981?}({\i r}){\i \u981?}({\i r}){\i B}({\i r}){\i d}{\i r}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : Valence radial functions (for check).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo 0| hvccfp0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Calculate the Coulomb matrix in the Mixed basis\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : The Coulomb matrix expanded in the mixed basis\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : This is used only for dielectric-constant calculation (mode 2 or 3 of {\b hx0fp0}). This contains the expansion of the plane wave $\\exp( i\{\\bf q r\})$ in the mixed basis. See Usuda\u8217's note.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo\u160?3|hsfp0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Exchange part of the self-energy for the core\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : The core part of the exchange self-energy for {\b q} and band index specified in <QPNT>. See {\field{\*\fldinst{HYPERLINK "#mainoutput"}}{\fldrslt{\ul
[mainoutput]
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo\u160?0|hsfp0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Make product basis for the valence part.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo\u160?1|hsfp0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Exchange part of the self-energy for the valence part.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : The LDA exchange self-energy for {\b q} and band index specified in <QPNT>. See {\field{\*\fldinst{HYPERLINK "#mainoutput"}}{\fldrslt{\ul
[mainoutput]
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : The valence part of the exchange self-energy for {\b q} and band index specified in <QPNT>. See {\field{\*\fldinst{HYPERLINK "#mainoutput"}}{\fldrslt{\ul
[mainoutput]
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo\u160?11|hx0fp0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Screened Coulomb interaction {\i W}(Sergey mode)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : dummy\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (optional) This file is to specify antiferro condition. This should not exist for other cases. This file should be given by hand.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : size of the dielectric function\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) {\i W}\u8197?\u8722?\u8197?{\i v} in the expansion of mixed basis along the real axis\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : (bin) {\i W}\u8197?\u8722?\u8197?{\i v} in the expansion of mixed basis along the imaginary axis\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo\u160?12|hsfp0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Correlation part of the self-energy(Sergey mode)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : These are readin by genallcf3.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Radial integrals on each MT, symbolically written as \u8747?{\i \u981?}({\i r}){\i \u981?}({\i r}){\i B}({\i r}){\i d}{\i r}. These are generated by hbasfp0.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 :\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : The correlation part of the self-energy for {\b q} and band index specified in <QPNT>. See {\field{\*\fldinst{HYPERLINK "#mainoutput"}}{\fldrslt{\ul
[mainoutput]
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 {\b echo 0|hqpe}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212- Summarize the output\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : See {\field{\*\fldinst{HYPERLINK "#mainoutput"}}{\fldrslt{\ul
[mainoutput]
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : The QP energies and related value summary in human interface. See {\field{\*\fldinst{HYPERLINK "#mainoutput"}}{\fldrslt{\ul
[mainoutput]
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : The detailed values of the QP energies. See {\field{\*\fldinst{HYPERLINK "#mainoutput"}}{\fldrslt{\ul
[mainoutput]
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 : The detailed values of the QP energy. See {\field{\*\fldinst{HYPERLINK "#mainoutput"}}{\fldrslt{\ul
[mainoutput]
}}}
. This is used for {\b bndplot}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u160?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 NOTE: For example, if you do @, it just shift zero level of QPE, so that 4th line (counted from top) eigenvalue (in QPU) is to be zero.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Check list for convergence on GW calculations\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Results could be dependent on cutoff parameters in GWinput. In my opinion, generally speaking, it is so easy to have convergence more than \u8764? 0.1eV for band gap...\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Number of k points .\line Probably 4\u8197?\u215?\u8197?4\u8197?\u215?\u8197?4 (or 6\u8197?\u215?\u8197?6\u8197?\u215?\u8197?6) are reasonable choice for insulator in the case of two atoms such as GaAs. In other words, \u8216'\u8217'\u8217'used periodic cell volume\u8221" = 4\u8197?\u215?\u8197?4\u8197?\u215?\u8197?4\u215? (# of atoms) \u215? (Volume per atom)\u8221". For example, for 2\u8197?\u215?\u8197?2{\super 3}\u8196?=\u8196?16 atoms per cell, we can use 2\u8197?\u215?\u8197?2\u8197?\u215?\u8197?2 instead of 4\u8197?\u215?\u8197?4\u8197?\u215?\u8197?4 (this is the same as in the case of LDA).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 For metals, 12\u8197?\u215?\u8197?12\u8197?\u215?\u8197?12 or more per atom may be required. But it depends on case by case.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab MTO\u8217's and APWs. Basis for eigenfunctions.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 If we like to get \u8220"best converged results, we may need to use large enough MTO\u8217's. (I think the default setting is reasonable; but there is a room to change MTO settings in ctrl.*.). But, in cases, we can not use large APW cutoff () more than 3.0\u8196?\u8764?\u8196?4.0 Ry because of poor linear dependency of basis set (calculation in LDA level fails). In such a case, we need to use \u8220"smaller MT radius =@\u8221". Then we may need semi-core as local orbital when \u8220"its spillout in the outside of MTs is too large\u8221".\par}
{\pard \ql \f0 \sa180 \li360 \fi0 In GWinput, we can set the number of unoccupied states which you take into account by , ,, and . But we usually unset them except for gwsc.\par}
{\pard \ql \f0 \sa180 \li360 \fi0 (We may need a kind of completeness of the basis set; the completeness could be important from the view of \u8216'Coulomb hole\u8217' picture.)\par}
{\pard \ql \f0 \sa180 \li360 \fi0 NOTE: Current PMT-QSGW method  expand the static version of self-energy of QSGW just in the basis of MTO\u8217's (no APWs). Thus the expansion can be unsatisfactory (it depends on case by case, and required convergence). In such a case, we inevitably have to use empty spheres (MTO\u8217's) which is for empty region.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Cores.\line We usually use all cores as {\b core1} (exchange only core). If necessary, it is better to treat shallow cores by the local orbitals (such cores are treated as valence).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \u8212-followings are obsolate \u8212-\par}
{\pard \ql \f0 \sa180 \li360 \fi0 If we treat cores by {\b core2} (not only for exchange, but also in dielectric functions), we have to be careful about the core wave orthogonalization with respect to valence eigenfuncitons; this is a little complicated; probably it is better not to use {\b core2}).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 (This is related to (only for core2). If it affects so much, {\i D} function might be too poor due to the poor orthogonality condition between core and valence.) (NOTE: is not maintained recently)\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \u8212-\u8212-\u8212-\u8212--\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab IPW cutoff to expand eigenfuncitons in the interstitial region. We usually use 4.0@. Usually not so bad. Larger is better but expensive. You may test calculations with 3.0@, and how much difference of results.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab IPW cutoff to expand the Coulomb interaction in the interstitial region (Mixed product basis(MPB) consist of this IPW and PB). interstitial region. We usually use 3.0@. Usually not so bad. Larger is better but expensive. You may test calculations with 2.5@, and how much difference of results.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Product basis section.\line At least, =4 will be necessary for atoms with d electrons. (but =2 look reasonable for oxygen, =1 for hydrogen. Need check).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab .\line In our experience, =0.003000@ (default) is reasonable. But there is a room to check stability on it for metals. In principle, for larger n1n2n3, we can use smaller .\par}
{\pard \ql \f0 \sa180 \li360 \fi0 It will be worth to try to check how much the results changed due to them. But usually =0.005, omgUUUUUUc=0.04@ is not so bad a choice. As for =10@ seems to be not so bad usually, but it is safer to check the convergence on it (test cases with =6,10,12,16@).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab . \u8196?\u8764?\u8196?0.01 a.u. will be not so bad. See two Z values shown in SXCU. It is better to try to check how about the dependence on this.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab . (on is default). If off, we use off-Gamma mesh (Gamma point is between mesh points) for dielectric functions when we perform GW or QSGW. \u8220"chioff\u8221" may accelerate convergence on number of k points.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab in ctrl This used fixed number of G vector determined at q=0\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Linear response calculations\par}
{\pard \ql \f0 \sa180 \li0 \fi0 With these scripts for linear response calculations, @, we can calculate $\{\\bf q\}$-dependent dielectric funciton $\\epsilon(\\omega ,\{\\bf q\})$ (and {\i v}, {\i W}) (and {\i \u967?} for spin fluctuation). But (because of numerical reason), we can not use $\{\\bf q\}= 0$ limit. (if $|\{\\bf q\}|$ is too small, we have numerical problem, zero divided by zero, because we have not implemented the version to use $\{\\bf q\}=0$.)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab eps\line Dielectric function epsilon with local field correction. Expensive calculation (we may need to reduce number of wing parts in future...).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab epsPP\line epsilon without local field correction. $1- \\langle e^\{i \{\\bf q\}\{\\bf r\}\}|v|e^\{i \{\\bf q\}\{\\bf r\}\}\\rangle  \\langle e^\{i \{\\bf q\}\{\\bf r\}\}| \\left( \\chi^\{0\} \\right) |e^\{i \{\\bf q\}\{\\bf r\}\}\\rangle$\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab epsPP\par}
{\pard \ql \f0 \sa180 \li360 \fi0 For spin susceptibility. This essentially calculate non-interacting spin susceptibility. Then it is used for the calculation of full spin susceptibility with /caljUUUUUU*.F@ programs (small quick programs). See spin wave paper. See spin susceptibility section Sec.{\field{\*\fldinst{HYPERLINK "#xxx"}}{\fldrslt{\ul
[xxx]
}}}
.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab (not maintained now; we will recover this)eps\par}
{\pard \ql \f0 \sa180 \li360 \fi0 This gives full non-interacting spin susceptibility. Testing. We have to determine {\i U} (Stoner {\i I}) for the determination of full spin susceptibility. TDLDA? or so?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab (This is old mode \u8212- not maintained) epsPP\par}
{\pard \ql \f0 \sa180 \li360 \fi0 For spin susceptibility, spin susceptibility \u10216?{\i e}{\super {\i i}{\i q}{\i r}}|{\i \u967?}({\i q},\u8198?{\i \u969?})|{\i e}{\super {\i i}{\i q}{\i r}}\u10217? In this script, You have to assign that isp=1 is majority, isp=2 is minority. This is with long wave approximation.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\u8212-\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8226? We use the histogram method (the Hilbert transformation method); we first calculate its imaginary parts with the tetrahedron technique for dielectric functions. Then we get its real part by the Hilbert transformation.\line You need to choose . The width of histogram bins are getting larger when omega gets larger. dw is the size of histogram-bin width at omega=0. At omega=omg, its width gets twiced.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To plot dielectric function with reasonable resolution, it might be better to set 0.001@ and 0.1@ for example. You may have to choose small enough omega for spin wave mode as 0.001 Ry (Or smaller). omgis given like 0.05 Ry or so. But sometimes it can be like 1Ry.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8226? epsPP only calculation an matrix element of dielectric funciton for $exp(i \{\\bf q\}\{\\bf r\})$. Thus very faster than eps mode. It uses a a special product basis set for cases without inversion (problem is in how to expand $\\exp(i \{\\bf q\}\{\\bf r\})$ in the MPB; the product basis is not from phi and phidot, but from spherical Bessel functions).\line \par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 In *UUUUUUlmfhUUUUUU* modes( I now use little for *UUUUUUlmfUUUUUU* modes), you can use small enough delta.\line
Use small enough delta (=-1e-8 a.u.) for spin wave modes (also you can use it for \line
dielectric function and GW).  This is necessary because pole is too smeared \line
if you use larger delta.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 eps, epsPP: the dielectric functions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can invoke the script, e.g. as "eps \u160?si".\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \u8212-\u8212-\u8212-\u8212-\u8212--\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Specify $\{\\bf q\}$ point in <QforEPS>@ or so. Mesh for {\i \u969?} is specified by .\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The obtained data are in EPS*.dat and EPS*.nlfc.dat. EPS*.nlfc.dat contains the result without local-field correction EPS*.dat contains the result with local-field correction (this is generated only for . Both of them contains\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b q}(1:3), {\i \u969?}, Re({\i \u1013?}) Im({\i \u1013?}), Re(1/{\i \u1013?}), In(1/{\i \u1013?})\line in each line.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab This code works OK only for $\{\\bf q\}$ is near 0. Be careful for $\{\\bf q\} \\to 0$ limit. Too small $\{\\bf q\}$ can give strange spectrum at high energy (real part is affected by it)\line Because $\{\\bf q\} \\to 0$ gives too large cancellation effects (the denominator and numerator go to zero\u8212-it means we need very accurate orthogonalization between occupied and unoccupied states). This is a kind of disadvantage of our method (though there is an advantage\u8212- our code can calculate dielectric function even for metal as far as you use large enough number of $\{\\bf k\}$ point.)\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab The calculate of dielectric functions usually requires so many {\i k} point. For example, for Si, 1 n2 n3 = 4 4 4@ is too small. It gives too large dielectric constants \u8196?\u8764?\u8196?19.4 though the converged value should be \u8196?\u8764?\u8196?13. (we need 10x10x10 or more like 20x20x20 for some reasonable results). For GaAs, we observed that reasonable {\i \u1013?}({\i \u969?}) requires rather large number of $\{\\bf q\}$ points like 15x15x15 or 20x20x20 for . This is too time-consuming to get result (but you can use \u8220"very small product basis\u8221"(just sp polarization for this purpose; it makes speed up so much). Or, you can calculate "{\i \u1013?}({\i \u969?}) without LFC". See section for eps.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Core orthogonalization problem (only when core2 is used)\line \u8212-- is not maintained recently \u8212- gives so serious effect for {\i \u1013?}({\i \u969?}), if you include some cores as "{\b core2}" in the product basis setting. (This means that you includes transitions from "{\b core2} to valence" in the calculation of {\i \u1013?}({\i \u969?})).\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Then you have to use "CoreOrth on". Without it, you will have rather large imaginary part at rather high energy Such transitions from core to higher valence bands is artificial due to the incomplete orthogonality between core and the higher bands. However, shallower {\i d} semi-core might be deformed too much by this option. Try to plot Core.chk files, which contains core radial functions. Anyway, it is better to treat shallow core as valence by \u8220"local orbital\u8221".\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 epsPP: the dielectric function(No LFC\u8212- faster)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can calculate {\i \u1013?} without LFC by {\b epsPP}. It is very faster than eps.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 To calculate $\\epsilon(\{\\bf q\},\\omega)$ without LFC accurately, the best basis set for the expansion of the Coulomb matrix within MT is apparently not the product basis, but the Bessel functions corresponding to the plane waves $\\exp(i\{\\bf q r\})$. We use such a basis in this mode. However, our experience shows that the changes are little even with the usual product basis (we don\u8217't describe this here).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 How to calculate correct dielectric funciton?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (this subsection is essentially OK... but need to clean it up. dec2014)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 \line
There are prolems to calculate correct epsilon.\line
At first, we talk about epsPPUUUUUUlmfh, which is No LFC. Main problem are \line
\line
-----------------\line
1.Convergence for number of k point(specified by n1n2n3). \line
  Roughly speaking, 20x20x20 is required for not-so-bad results for Fe and Ni.\line
  It is better to do 30x30x30 to see convergence check.\line
  However, in the case of ZB-MnAs (maybe because of simple structure around Ef),\line
  it requires less q points.\line
\line
  figs are for GaAs.\line
  fig001: n1n2n3 convergence for ChiUUUUUURegQbz = on  case.\line
  fig002: n1n2n3 convergence for ChiUUUUUURegQbz = off case.\line
  (ChiUUUUUURegQbz in explained in General section in this manual).\line
\line
  As you see, k points convergence looks a little better in ChiUUUUUURegQbz=off\line
  (mesh not including gamma). However a little ploblem is that its thereshold around \line
  0.5eV is too high and slowly changing.\line
\line
  fig003: Alouanis'(from Arnaud)  vs. ``ChiUUUUUURegQbz = on'' vs. ``ChiUUUUUURegQbz = off''\line
  As you see, the threshold of the Red line (20x20x20 ChiUUUUUURegQbz=on) and Alouani's \line
  are almost the same, but the red line is too oscilating at the low energy part.\line
  On the other hand, ``ChiUUUUUURegQbz = off'' in Green broken line is not so satisfactory\line
  at the low energy part. \line
\line
  fig.gasUUUUUUepsUUUUUUkconf.pdf shows the convergence behevior of epsilon for \line
  \line
   \line
2.$q \\to 0$ convergence (this is related to whether ChiUUUUUURegQbz=on or off).\line
  If you use very small q like q=0.001 is GaAs, it can cause a problem.\line
  Use q=0.01 or larger (maybe q=0.02 or more is safer). \line
  Very small q can give numerical error for high-energy region.\line
\line
  In fig004, we show the high energy tail part of Im $\\epsilon(\\omega)$ for GaAs case.\line
  At q=0.01 (this means q= 2*pi/alat * (0 0 0.01)), the imaginary part\line
  is a little too large . Less than 80eV, q=0.02 gives good results when compared with\line
  other high q results, though it still has noise above 80eV.\line
  In fig005, I showed the same results compared with Alouani's (his is up to 40eV).\line
  Both gives rather good agreements. As you see, q=0.06 or above might be necessary\line
  to get reasonable convergence for high energy part abouve 40eV.\line
\line
  We have to be careful for this poorness in high energy part--- it may effect\line
  low-energy Re[$\\epsion$] through KK relation. However this can be very small\line
  ehough.\line
  In fig.gasUUUUUUepsUUUUUUqconv.jpg, we checked the convergence of eps (\\omega=0,q) for q \\to 0.\line
  As you see, it gives convergence, however, q=0.01 is a little out of \line
  curve---this should be because of the poorness in the high energy part.\line
  so q=0.02 or q=0.03 is safer, and you can get eps within 1 percenr accuracy.\line
\line
3. Including Core for dielectric constant is dangerous. \line
   It can cause very poor results if you include core part in GWinput.\line
   You need to include core just as valence (with local orbital).\line
\line
   In fig008, we showed core effects. It starts from \\approx 16eV \line
   (this is core to conduction transition).\line
   fig007 showd the check about the q point dependence---even with large q,\line
   it would not change.\line
   These shows that the core excitation can have larger energy range.\line
   This is in contrast to the valence case \line
   (then the most of excitaion is limited to less than 10eV).\line
   We have to be careful for such high-energy exciation... The LMTO basis might\line
   be not so good for high energy.\line
\line
4. basis set.\line
   Use QpGcutUUUUUUpsi \\approx 3.0 a.u. or so (as same as GW calculation).\line
   In the case of epsPP* mode, \line
   QpGcutUUUUUUcou can be very small--- In our codes now, \line
   ngc>=1 should be for all q vector shown in lqg4gw02 (output of echo 2|qg4gw).\line
   [In principle, it should be only for the q vector for which we calculate epsilon.\line
    But there is a technical poorness in our code---\line
    (maybe) a problem here; the plane-wave part of the eigenfunction generated \line
    in lmfgw is not correctly passed to lmf2gw when ngc=0].\line
\line
\line
-- epsUUUUUUlmfh: including LFC ----------------------------------\line
To include eps with LFC, do epsUUUUUUlmfh. \line
But lcutmx=2 seems to be good enough to get 0.5 percent error (maybe better than this).\line
Test it 10x10x10 or so. (I need to repeat if necessary).\line
Further you can use smaller QpGcutUUUUUUcou like 2.2 or so, \line
with rather smaller product basis (up to p timed d, not including f).\line
\line
Note: epsPPUUUUUUlmfh is designed to use good basis to calculate eps \line
without LFC. This is usually in agreement with what you obtained by epsUUUUUUlmfh;\line
however it can give slight difference when you use small product basis.\line
\line
\line
---Summary --------------------\line
So in conclusion, I think a best way to do is\line
\line
1. set q=0.02 [q=2pi/alat(0 0 0.02)] or so for GaAs case.\line
   If you want to check, do q=0.03 and q=0.06 also.\line
\line
   ``ChiUUUUUURegQbz = off'' is better for matrials like GaAs with direct gap.\line
\line
2. You can use small QpGcutUUUUUUcou but all ngc should be one or more.\line
\line
3. As for the Product basis setting in epsPP* scripts, only\line
   lcutmx and tolerance (this can be like 0.001 or so) are relevant.\line
   E.g. set lcutmx=4 or so.\line
\line
4. Do nk=20 18 16 and take interpolarion to determine eps(omega=0, q=0).\line
\line
5. To get eps with LFC, set QpGcutUUUUUUcut as xxx, and set lcutmx=2 where\line
   (occupied sp) \\timex (unoccupied spd) are included.\line
   But correct EPS*.nolfc.d is rather from epsPPUUUUUUlmfh script.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 fig001\par}
{\pard \ql \f0 \sa180 \li0 \fi0 fig002\par}
{\pard \ql \f0 \sa180 \li0 \fi0 fig003\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \line fig004\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \line fig005\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \line fig007\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \line fig008\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Utility\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 1.\tx360\tab {\b structure tool} viewvesta,ctrl2vasp,vasp2ctrl\line \par}
{\pard \ql \f0 \sa180 \li360 \fi-360 2.\tx360\tab {\b Other calculation examples} A recent paper by Deguch et al  contains a link to a sample package.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 3.\tx360\tab {\b cif to PROCAR}\par}
{\pard \ql \f0 \sa180 \li360 \fi0 \f1 ./cif2cell --vasp-cartesian --vasp-format=5 cifs/BaTiO3UUUUUUcubic.cif \sa180\par}

