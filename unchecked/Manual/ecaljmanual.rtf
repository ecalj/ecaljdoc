{\rtf1\ansi\uc1\deff0\deflang1024
{\fonttbl{\f0\fnil\fcharset0 Times New Roman;}
{\f1\fnil\fcharset0 Arial;}
{\f2\fnil\fcharset0 Arial;}
{\f3\fnil\fcharset0 Courier New;}
{\f4\fnil\fcharset0 Zapf Chancery;}
{\f5\fnil\fcharset0 STIXGeneral;}
{\f6\fnil\fcharset0 MS Gothic;}
}
{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
\red0\green0\blue128;
\red0\green128\blue128;
\red0\green128\blue0;
\red128\green0\blue128;
\red128\green0\blue0;
\red128\green128\blue0;
\red128\green128\blue128;
\red192\green192\blue192;
\red239\green219\blue197;
\red205\green149\blue117;
\red253\green217\blue181;
\red120\green219\blue226;
\red135\green169\blue107;
\red255\green164\blue116;
\red250\green231\blue181;
\red159\green129\blue112;
\red253\green124\blue110;
\red35\green35\blue35;
\red31\green117\blue254;
\red173\green173\blue214;
\red25\green158\blue189;
\red115\green102\blue189;
\red222\green93\blue131;
\red203\green65\blue84;
\red180\green103\blue77;
\red255\green127\blue73;
\red234\green126\blue93;
\red176\green183\blue198;
\red255\green255\blue153;
\red28\green211\blue162;
\red255\green170\blue204;
\red221\green68\blue146;
\red29\green172\blue214;
\red188\green93\blue88;
\red221\green148\blue117;
\red154\green206\blue235;
\red255\green188\blue217;
\red253\green219\blue109;
\red43\green108\blue196;
\red239\green205\blue184;
\red110\green81\blue96;
\red29\green249\blue20;
\red113\green188\blue120;
\red109\green174\blue129;
\red195\green100\blue197;
\red204\green102\blue102;
\red231\green198\blue151;
\red252\green217\blue117;
\red168\green228\blue160;
\red149\green145\blue140;
\red28\green172\blue120;
\red240\green232\blue145;
\red255\green29\blue206;
\red178\green236\blue93;
\red93\green118\blue203;
\red202\green55\blue103;
\red59\green176\blue143;
\red253\green252\blue116;
\red252\green180\blue213;
\red255\green189\blue136;
\red246\green100\blue175;
\red205\green74\blue74;
\red151\green154\blue170;
\red255\green130\blue67;
\red200\green56\blue90;
\red239\green152\blue170;
\red253\green188\blue180;
\red26\green72\blue118;
\red48\green186\blue143;
\red25\green116\blue210;
\red255\green163\blue67;
\red186\green184\blue108;
\red255\green117\blue56;
\red230\green168\blue215;
\red65\green74\blue76;
\red255\green110\blue74;
\red28\green169\blue201;
\red255\green207\blue171;
\red197\green208\blue230;
\red253\green215\blue228;
\red21\green128\blue120;
\red252\green116\blue253;
\red247\green128\blue161;
\red142\green69\blue133;
\red116\green66\blue200;
\red157\green129\blue186;
\red255\green29\blue206;
\red255\green73\blue108;
\red214\green138\blue89;
\red255\green72\blue208;
\red227\green37\blue107;
\red238\green32\blue77;
\red255\green83\blue73;
\red192\green68\blue143;
\red31\green206\blue203;
\red120\green81\blue169;
\red255\green155\blue170;
\red252\green40\blue71;
\red118\green255\blue122;
\red159\green226\blue191;
\red165\green105\blue79;
\red138\green121\blue93;
\red69\green206\blue162;
\red251\green126\blue253;
\red205\green197\blue194;
\red128\green218\blue235;
\red236\green234\blue190;
\red255\green207\blue72;
\red253\green94\blue83;
\red250\green167\blue108;
\red252\green137\blue172;
\red219\green215\blue210;
\red23\green128\blue109;
\red222\green170\blue136;
\red119\green221\blue231;
\red253\green252\blue116;
\red146\green110\blue174;
\red247\green83\blue148;
\red255\green160\blue137;
\red143\green80\blue157;
\red237\green237\blue237;
\red162\green173\blue208;
\red255\green67\blue164;
\red252\green108\blue133;
\red205\green164\blue222;
\red252\green232\blue131;
\red197\green227\blue132;
\red255\green182\blue83;
}
{\stylesheet
{\s0\qj\widctlpar\f0\fs20 \snext0 Normal;}
{\cs10 \additive\ssemihidden Default Paragraph Font;}
{\s1\qc\sb240\sa120\keepn\f0\b\fs40 \sbasedon0\snext0 Part;}
{\s2\ql\sb240\sa120\keepn\f0\b\fs40 \sbasedon0\snext0 heading 1;}
{\s3\ql\sb240\sa120\keepn\f0\b\fs32 \sbasedon0\snext0 heading 2;}
{\s4\ql\sb240\sa120\keepn\f0\b\fs32 \sbasedon0\snext0 heading 3;}
{\s5\ql\sb240\sa120\keepn\f0\b\fs24 \sbasedon0\snext0 heading 4;}
{\s6\ql\sb240\sa120\keepn\f0\b\fs24 \sbasedon0\snext0 heading 5;}
{\s7\ql\sb240\sa120\keepn\f0\b\fs24 \sbasedon0\snext0 heading 6;}
{\s8\qr\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext8 rightpar;}
{\s9\qc\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext9 centerpar;}
{\s10\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext10 leftpar;}
{\s11\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equation;}
{\s12\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationNum;}
{\s13\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationAlign;}
{\s14\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationAlignNum;}
{\s15\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationArray;}
{\s16\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationArrayNum;}
{\s17\ql\sb120\sa120\keep\widctlpar\f0\fs20 \sbasedon0\snext0 theorem;}
{\s18\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 bitmapCenter;}
{\s20\qc\sb240\sa240\b\f0\fs36 \sbasedon0\snext21 Title;}
{\s21\qc\sa120\f0\fs20 \sbasedon0\snext0 author;}
{\s22\ql\tqc\tx4536\tqr\tx9072\f0\fs20 \sbasedon0\snext22 footer;}
{\s23\ql\tqc\tx4536\tqr\tx9072\f0\fs20 \sbasedon0\snext23 header;}
{\s30\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 caption;}
{\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext0 Figure;}
{\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext32 Table;}
{\s33\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext33 Tabular;}
{\s34\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext34 Tabbing;}
{\s35\qj\li1024\ri1024\fi340\widctlpar\f0\fs20 \sbasedon0\snext35 Quote;}
{\s38\ql\widctlpar\f3\fs20 \snext38 verbatim;}
{\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20 \sbasedon0\snext46 List;}
{\s47\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20 \sbasedon0\snext47 List 1;}
{\s50\qc\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 latex picture;}
{\s51\qc\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 subfigure;}
{\s61\ql\sb240\sa120\keepn\f0\b\fs32 \sbasedon0\snext62 bibheading;}
{\s62\ql\fi-567\li567\sb0\sa0\f0\fs20 \sbasedon0\snext62 bibitem;}
{\s64\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20 \sbasedon0\snext64 endnotes;}
{\s65\ql\fi-113\li397\lin397\f0\fs20 \sbasedon0\snext65 footnote text;}
{\s66\qj\fi-170\li454\lin454\f0\fs20 \sbasedon0\snext66 endnote text;}
{\cs62\super \additive\sbasedon10 footnote reference;}
{\cs63\super \additive\sbasedon10 endnote reference;}
{\s67\ql\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext67 acronym;}
{\s70\qc\sa120\b\f0\fs20 \sbasedon0\snext71 abstract title;}
{\s71\qj\li1024\ri1024\fi340\widctlpar\f0\fs20 \sbasedon0\snext0 abstract;}
{\s80\ql\sb240\sa120\keepn\f0\b\fs20 \sbasedon0\snext0 contents_heading;}
{\s81\ql\li425\tqr\tldot\tx8222\sb240\sa60\keepn\f0\fs20\b \sbasedon0\snext82 toc 1;}
{\s82\ql\li512\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext83 toc 2;}
{\s83\ql\li1024\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext84 toc 3;}
{\s84\ql\li1536\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext85 toc 4;}
{\s85\ql\li2048\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext86 toc 5;}
{\s86\ql\li2560\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext86 toc 6;}
}
{\info
{\title Original file was ecaljmanual.tex}
{\doccomm Created using latex2rtf 2.3.16 r1254 (released May 12 2017) on Sat Jun 13 21:06:00 2020
}
}
{\footer\pard\plain\f0\fs20\qc\chpgn\par}
\paperw11960\paperh16900\margl2009\margr1416\margt1611\margb1032\pgnstart0\widowctrl\qj\ftnbj\f0\aftnnar
{\page
\pard\plain\s20\qc\sb240\sa240\b\f0\fs36\sl240\slmult1 \fi0  ecalj manual\par
\pard\plain\s21\qc\sa120\f0\fs20\sl240\slmult1 \fi300 {\f3 \field{\*\fldinst{ HYPERLINK "https://github.com/tkotani/ecalj" }{{}}}{\fldrslt{https://github.com/tkotani/ecalj}}}\par
\pard\plain\s21\qc\sa120\f0\fs20\sl240\slmult1 \fi300 \chdate \par
\pard\plain\s80\ql\sb240\sa120\keepn\f0\b\fs20\sl240\slmult1 \fi0  Contents\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
{\field{\*\fldinst TOC \\o "1-3" }{\fldrslt }}
\page
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb344 \fi0 {{\u8226*}}{\i0\scaps0\b Reference}\par
\column
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\fs28 Change LOG:}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {{\u8226*}} Jan2017 Add minimum description for syml generator at Sec.{\field{\*\fldinst{\lang1024 REF BMsec_getsyml \\* MERGEFORMAT }}{\fldrslt{4.7.1}}} \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {{\u8226*}} Aug2019 slight modification for CMD35\par
\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 1  Introduction\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The {\i0\scaps0\b0\f3 ecalj}  is an first-principles electronic-structure calculations package with some unique features. With {\i0\scaps0\b0\f3 ecalj} , we can do not only standard calculations (LDA/GGA/LDA+U, relaxation of atomic positions), but also the quasiparticle self-consistent GW calculations(QSGW), linear responses (charge and spin), Wannier functions (and U of them).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 This is base on an unique one-body problem solver, the PMT method (=the Linearized APW+MTO method) 
[{\field{\*\fldinst{\lang1024 REF BIB_kotani2015pmt \\* MERGEFORMAT }}{\fldrslt{1}}}
]. Thus we identify the QSGW method implemented in {\i0\scaps0\b0\f3 ecalj} as the PMT-QSGW method. Introduction to the PMT-QSGW is given in Sec.{\field{\*\fldinst{\lang1024 REF BMsec_fecalj \\* MERGEFORMAT }}{\fldrslt{1.1}}}. Today \ldblquote QSGW\rdblquote  is accepted as a standard procedure in the electronic structure calculations 
[{\field{\*\fldinst{\lang1024 REF BIB_di_valentin_quasiparticle_2014 \\* MERGEFORMAT }}{\fldrslt{4}}}
].\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 First, see README.org shown at {\f3 \field{\*\fldinst{ HYPERLINK "https://github.com/tkotani/ecalj#ecalj-" }{{}}}{\fldrslt{https://github.com/tkotani/ecalj#ecalj-}}} (or ecalj/README.org in the package). Free to download {\i0\scaps0\b0\f3 ecalj}  package from it, and use it. The QSGW code is version controlled by git. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The {\i0\scaps0\b0\f3 ecalj}  is related to a FP-LMTO package lmv7 seen at ecalj/Document/Manual/CategoryAndToken.org (or html).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 The lmv7 and ecalj are branched at year 2009. After branched, we added new features: simple install and test; all codes are in f90 (no C compiler); new methods, especially PMT-QSGW; MPI parallelization for QSGW; simple usage with automatic setting of default files by python ver2; a small tool to convert VASP POSCASR to ecalj, and so on. PMT-QSGW shows more stable convergence than the previous version, FP-LMTO-GW {\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} In cases to treat magnetic systems which have intrinsic magnetic fluctuations, we may need to be careful about initial condition or mixing procedure to get convergence. In cases, we need to start from LDA+U results as initial condition from which we start QSGW. Let me know about such trouble.}
.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300  \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0  -------------------- \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b0\f3 ecalj}  package mainly consists of two parts. One is {\ul one-body part(PMT part)} (in {\i0\scaps0\b0\f2 ecalj/lm7K/}), the other is {\ul many-body part(GW part)} (in {\i0\scaps0\b0\f2 ecalj/fpgw/}).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b One-body part (PMT part)}, based on 
[{\field{\*\fldinst{\lang1024 REF BIB_kotani2015pmt \\* MERGEFORMAT }}{\fldrslt{1}}}
]\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 We can perform standard calculations such as LDA,GGA,LDA+U, atomic position relaxation, and so on. In addition, the PMT part has an interface to perform GW (and QSGW) calculation: the one-body part can include a given non-local exchange-correlation potential stored in a file {\i0\scaps0\b0\f2 sigm.*}. {\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} In the case of using {\i0\scaps0\b0\f2 sigm.*}, total energy shown in the console output (also in {\i0\scaps0\b0\f2 save.*}) are just the indicator, not the meaningful total energy}
. The QSGW calculation is performed by a script {\i0\scaps0\b0\f3 gwsc}, which has an iteration loop calling the one-body program ({\i0\scaps0\b0\f3 lmf}) and many-body part (GW part) alternatively. The many-body part generate the file {\i0\scaps0\b0\f2 sigm.*}. See Fig.{\field{\*\fldinst{\lang1024 REF BMgwscpicture \\* MERGEFORMAT }}{\fldrslt{6}}} and around.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b Many-body part (GW part)}, based on 
[{\field{\*\fldinst{\lang1024 REF BIB_kotani_quasiparticle_2014 \\* MERGEFORMAT }}{\fldrslt{2}}}
]\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 As the inputs for the {{\i G}{\i W}}calculation, we have to supply the eigenfunctions and the eigenvalues from the one-body part to the GW part. The eigenfuncions re-expanded by the two types of basis functions, the atomic-like argumentation functions in the muffin-tin(MT) spheres, and the plane-waves in the interstitial region, say, the interstitial plane-wave (IPW) hereafter. IPW is defined as the usual plane waves in the interstitial region, but zero within MTs\rquote . The IPWs + \rdblquote atomic like functions within MTs\rdblquote  make \ldblquote a basis set to expand eigenfuncitons\rdblquote . See Eq.(17) of 
[{\field{\*\fldinst{\lang1024 REF BIB_kotani_quasiparticle_2014 \\* MERGEFORMAT }}{\fldrslt{2}}}
].\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We need another basis set to expand \ldblquote product of eigenfuncions\rdblquote . That is, the mixed product bases (MPB) \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 
[{\field{\*\fldinst{\lang1024 REF BIB_Kotani2002 \\* MERGEFORMAT }}{\fldrslt{5}}}, {\field{\*\fldinst{\lang1024 REF BIB_Friedrich2012 \\* MERGEFORMAT }}{\fldrslt{6}}}
], which consists of the two kinds of bases (caution: do not mixed up with the basis set for eigenfuncitons); (i)the local atom-centered functions confined to MT spheres, so-called the product basis; (ii) IPW. The product-basis are calculated from products of solutions to the Schr\'f6dinger equation within the MT sphere. The Coulomb matrix {{\i v}}, the dynamically screened Coulomb interaction {{\i W}}, and so on, are expanded in the MPB. It can virtually span all the space made of product of eigenfunctions (but, in practical calculations, we need to use a small size of the bases to reduce computational time). We include full energy-dependence of {{\i W}({\u969*})}. See Sec.3 of 
[{\field{\*\fldinst{\lang1024 REF BIB_kotani_quasiparticle_2014 \\* MERGEFORMAT }}{\fldrslt{2}}}
].\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Recently T.Kotani includes the Wannier function generator, which was originally developed by T.Miyake and H.Kino on top of previous version of GW part. Thus the Wannier functions (including effective interactions) can be generated in the PMT-QSGW. (U parameters in the full-screening and cRPA). \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_fecalj}1.1{\*\bkmkend BMsec_fecalj}  Uniqueness of the ecalj package.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We will explain two unique points of {\i0\scaps0\b0\f3 ecalj} .\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b PMT}:\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Central part in an electronic structure packages is one-body problem solver. It means how to calculate eigenvalues/eigenfunctions for a given one-body potential. Inversely, we have to generate new one-body potential for given eigenfunctions/eigenvalues based on the density functional theory (DFT) in the LDA or GGA (In the followings, LDA means both of LDA and GGA). Then we can make the electron density self-consistent by iterations until converged, and obtain total energy of ground states. Then we can calculate atomic forces by perturbation. Based on such an one-body problem solver, we can implement kinds of methods; e.g, dielectric function, magnetic susceptibility, transport and so on. Furthermore, we can implement higher-level approximations such as the QSGW method explained below. An one-body problem solver (in linear methods) are characterized by \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0   (i) linear combinations of what basis set to represent eigenfunctions; \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0   (ii) how to represent electron density and one-body potential. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 In {\i0\scaps0\b0\f3 ecalj} , we use the PMT method 
[{\field{\*\fldinst{\lang1024 REF BIB_kotani2015pmt \\* MERGEFORMAT }}{\fldrslt{1}}}, {\field{\*\fldinst{\lang1024 REF BIB_Kotani2010 \\* MERGEFORMAT }}{\fldrslt{7}}}
] as the one-body problem solver. The PMT method is a new all-electron full potential method. It uses not only the augmented plane waves (APW) but also the muffin-tin orbitals (MTO) together, in addition to the local orbital (lo\rquote s), to represent the eigenfunctions (no other methods use two kinds of augmented waves together). Thus eigenfunctions are expanded in the linear combinations of the APWs, MTOs, and the lo\rquote s. The formulation is clarified in Ref.
[{\field{\*\fldinst{\lang1024 REF BIB_kotani2015pmt \\* MERGEFORMAT }}{\fldrslt{1}}}
]. Then the electron density and the one-body potential are given in the \ldblquote 3-components representation\rdblquote . That is, the electron density (one-body potential) is divided into three components, \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0    \ldblquote smooth part {+} onsite muffin-tin (MT) part {\u8722?} counter part\rdblquote . \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Here the counter part is in order to remove smooth part within MTs. This formalism (Soler-Williams formalism 
[{\field{\*\fldinst{\lang1024 REF BIB_soler89 \\* MERGEFORMAT }}{\fldrslt{8}}}, {\field{\*\fldinst{\lang1024 REF BIB_soler90 \\* MERGEFORMAT }}{\fldrslt{9}}}
]) is also used in the projected augmented wave (PAW) method such as VASP.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We now usually use highly localized MTOs together with APWs of low energy cutoff ({3{\f5\u8764*}4} Ry). {\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} current implementation have not yet efficiently use this locality; this must allow us to speed up one-body problem solver.}
 I think this is promising not only for efficient DFT/QSGW scheme, but also for kinds of applications in future. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b QSGW}:\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 In {\i0\scaps0\b0\f3 ecalj} , we can perform the GW calculation. The usual GW approximation is so-called \ldblquote one-shot GW\rdblquote  starting from LDA. It usually only calculates differences between the quasiparticle energies (QPEs) and the LDA eigenvalues by a perturbation (only diagonal part of self energy for the LDA eigenfunctions). Its ability is limited; it may fail when its starting point (eigenfunctions and eigenvalues supplied by LDA) is problematic. This is the reason why we originally develop the QSGW method. The QSGW now becomes popular and taken as a possible candidate to go beyond current limitation of such GW and LDA/GGA 
[{\field{\*\fldinst{\lang1024 REF BIB_di_valentin_quasiparticle_2014 \\* MERGEFORMAT }}{\fldrslt{4}}}
]. In principle, results given by QSGW do not depend on LDA anymore; the LDA are only used to prepare initial condition for self-consistency iteration cycle of the QSGW calculation {\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} Exactly speaking, we use LDA idea for efficient implementation of QSGW; thus obtained results are slightly dependent on the choice of LDA or GGA}
.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Usually the QPEs obtained by QSGW reproduce experiments better than LDA. For example, the band gap by GGA for GaAs is about 0.5 eV in contrast to the experimental value of 1.69 eV {\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} We undo electron-phonon effect (0.06eV) and spin-orbit effect (0.11eV) from the true the experimental value 1.52 eV.}
. On the other hand, the QSGW predicts about 1.8{{\f5\u8764*}} 1.9eV, a few tenth of eV larger than experiment (for practical use, we sometimes use \ldblquote hybrid functional between QSGW and LDA\rdblquote  so as to obtain smaller band gap). Even in the case of NiO and so on, the QSGW gives reasonable results (there is a tendency to give a little larger band gaps than experiments). This is in contrast to the case of the one-shot GW applied to NiO, where we can not have good agreement with experiments because the stating points in LDA is problematic.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The {\i0\scaps0\b0\f3 ecalj}  have other functions. LDA+U, atomic forces and relaxation (in GGA/LDA), core level spectroscopy and so on. In addition, we can calculate dielectric functions and magnetic responses from QPEs and the quasiparticle eigenfunctions given by LDA/QSGW. But total energy in QSGW is still in research (shown total energies in QSGW calculations are dummy now).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The QSGW calculations are very time-consuming; roughly speaking, it takes 10 or more times expensive than usual one-shot GW (although we can reduce computational time by choosing computational conditions). Thus the size of systems which we can treat is limited to ten atom in a cell or something, say, with a node of 16 cores; computation may require a week or so to have reasonable convergence. (heavy atoms require longer computational efforts, light atoms faster; non-magnetic systems are easier. We still have much room to accelerate the method, but not have done yet so much. Minimum MPI parallelization is implemented). The computational effort is {{\field{\*\fldinst{ EQ {\f5\u8733*}{\i N}\\s\\up5({\fs16 4})}}{\fldrslt }}
} in the most time-consuming part of QSGW.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 1.1.1  What do we expect for QSGW?\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Let us recall hybrid functionals such as B3LYP, and LDA+U. In hybrid functional methods, we use Vxc = (1-{{\u945*}})*LDA+{{\u945*}}*(Fock exchange like term), where {{\u945*}} is taken to be {{\f5\u8764*}0.25} usually {\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} exactly speaking, we have range cutoff for Fock exchange term in the HSE functional in addition}
. The {{\u945*}} can be dependent on materials; for metals {{\u945*}} should be almost zero. For larger band gap insulator, {{\u945*}} becomes larger. {\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} If you use {{\u945*}=1} (Hartree-Fock limit), the band gap of Si becomes 20eV or something.}
 Despite of success of the functional, its ability is limited. For example, it is known that a hybrid functionals fail to describe metals such as bcc Fe. On the other hand, we have LDA+U method which succeeded to describe materials including localized electrons. However, it contains kinds of ambiguity and U is chosen by hand. The important part of the hybrid functional methods and LDA+U is the non-local potential. It is missing in the DFT. As we discussed above, they give some success but not satisfactory. We somehow need to have a method to determine high-quality non-local potential (a substitution of the exchange-correlation potential in LDA). It is the QSGW method.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Note two important aspects of non-local potential (missing character in the local potential used in DFT). One is the onsite non-locality; it is also taken into account by LDA+U model. However, note that relative shift of O(2p) band with respect to the center of 3d band is not in LDA+U. The other is the off-site non-locality (mainly between nearest neighbors), which may relate to LUMO-HOMO gap. A non-local potential can behave a projector which push down only the HOMO states (valence band) to lower energy. This can be in the hybrid functional but not in LDA+U. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 In the QSGW, we determine such a non-local potential with the calculation of the GW method, in a self-consistent manner (we repeat GW calculations until converged). We can expect QSGW much more than hybrid methods/LDA+U. Roughly speaking, because the QSGW automatically determine U of LDA+U, or alpha of the hybrid functionals. More accurately speaking, we determine not only {{\field{\*\fldinst{ EQ {\i G}\\s\\do5({\fs16 0})}}{\fldrslt }}
} but also {{\i W}} (the screened Coulomb interaction) self-consistently. Here {{\i W}} corresponds to U and alpha. Thus QSGW gives reasonable results even if it is applied to metals such as Fe. For systems with metallic screening, it gives small non-locality (results are close to those of LDA). For systems with large band gap, QSGW gives large enough non-locality (like 0.25*(Fock exchange)).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Since we now need to treat complex systems, e.g, metal on insulator, it is very essential to treat kinds of materials on a same footing.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 The main purpose of QSGW is to determine an one-particle effective Hamiltonian {{\field{\*\fldinst{ EQ {\i H}\\s\\up5({\fs16 0})}}{\fldrslt }}
} {\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} people often pronounce this \u226?\u8364?\u339?H-naught\u226?\u8364?\u32?}
, which describes the quasiparticle picture (or independent-particle picture) for the system we calculate. In other words, QSGW divides the full many-body Hamiltonian {{\i H}} into {{\field{\*\fldinst{ EQ {\i H}={\i H}\\s\\up5({\fs16 0})+({\i H}\u8722?{\i H}\\s\\up5({\fs16 0}))}}{\fldrslt }}
}. The screened Coulomb interaction {{\i W}} is determined self-consistently in the QSGW iteration cycle.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 In comparison with LDA, we see differences; {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Band gap. QSGW tends to give slightly larger than experiments. It looks systematic. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Band width. Usually, sp bands are enlarged (except very low density case such as Na). This is the case for homogeneous electron gas. As for localized bands like 3d electrons, they can be narrowed. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Relative position of bands. e.g. O(2p) v.s. Ni(3d). More localized bands tends to get more deeper. Exchange splitting between up and down (like LDA+U) get larger. In cases such as NiO, magnetic moment become larger; closer to experimental values. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Hybridization of 3d bands with others. QSGW tends to make eigenfunctions localized. \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 However, reality is complexed, and not so simple in cases.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 1.2  Rule in this manual\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 This font} is for executable file(program) or shell scripts. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 echo\~3{|}hbasfp0 } means doing {\i0\scaps0\b0\f3 hbasfp0} with the argument \rquote 3\rquote  supplied as the standard input (read(*,*) in fortran). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f2 This font} is for files, directories, contents of files, or variables used in codes. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f2 ctrl.si},{\i0\scaps0\b0\f2 rst.si} and so on mean the case of Si. You may need to replace the extension {\i0\scaps0\b0\f2 si} for your case. (this extension is given by user. Lower case, number, and underscore {\i0\scaps0\b0\f2 [a-z0-9_]} are allowed.) In the followings, {\i0\scaps0\b0\f2 ctrl.*} means a file wish such an extension. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
There are files named {\i0\scaps0\b0\f2 foobarU} and {\i0\scaps0\b0\f2 foobarD}, which are for up spin (isp=1) and for down spin(isp=2), respectively; for example, {\i0\scaps0\b0\f2 SEXU} and {\i0\scaps0\b0\f2 SEXD}. We sometimes use {\i0\scaps0\b0\f2 foobarU} to denote {\i0\scaps0\b0\f2 foobarU} and {\i0\scaps0\b0\f2 foobarD} together. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b k} vector in the Brillouin zone is called as {\i0\scaps0\b q} or {\i0\scaps0\b k}. \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \fi0 1.3  What can we do with the {\i0\scaps0\b0\f2 ecalj} package?\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 At Feb.2015, what we can do is as follow. We have limited parallelization. (e.g. k point parallel).\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
LDA/GGA LDA+U, calculations, atomic forces and relaxation. Spin-orbit is included only for co-linear spin-density cases.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Quasi-particle(QP) energy in the 1st-iteration from LDA. (one-shot {{\i G}{\i W}})\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 Make band plot for LDA and the QP energies.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Spectrum function of the self-energy {{\u931*}}. Life time (imaginary part) of QPs.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Dielectric function, and its inverse. (including local-field effect or not).\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
QP self-consistent {{\i G}{\i W}}(QSGW)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
magnetic susceptibility.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Wannier function. (not only one-body part, but also effective interaction {{\i W}} and cRPA) \par
}\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 {\*\bkmkstart BMinstall}2{\*\bkmkend BMinstall}  Install\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Install and minimum tests are easy; even in a note PC, e.g., we can use gfortran in Ubuntu. In Thinkpad T480s (2018) install may take five minutes, and all tests may take another fifteen minutes.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 For productive runs, we may need multi-cores. Current implementation for parallelization by MPI is limited (not so much especially for the dielectric function part yet). Thus, probably, it may be not so efficient to use too many cores.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Follow the instruction of {\i0\scaps0\b0\f2 ecalj/README.org}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 or we can see the same one at {\f3 \field{\*\fldinst{ HYPERLINK "https://github.com/tkotani/ecalj/README.org" }{{}}}{\fldrslt{https://github.com/tkotani/ecalj/README.org}}}. We have a command {\i0\scaps0\b0\f3 ecalj/InsallAll.ifort} and so on. This command installs {\i0\scaps0\b0\f3 ecalj} and run a series of install tests automatically.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 2.1  Binaries and Scripts\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Main binaries and Scripts contained in {\i0\scaps0\b0\f3 ecalj} are {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 ctrlgenM1.py}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Generate default input file {{\i0\scaps0\b0\f2 ctrl.*}}from the structure file {{\i0\scaps0\b0\f2 ctrls.*}}. The latter file only contains information of crystal structure. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 lmfa}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Spherical atom calculation as initial condition, and core charge. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{{\i0\scaps0\b0\f3 lmchk}}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Check atomic positions, crystal symmetry, and computational conditions. Check ID of MuffinTins (MTs of atoms specified by ctrl file is re-ordered by computer. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 lmf} and {\i0\scaps0\b0\f3 lmf-MPIK} LDA/GGA,LDA+U calculations. (or we can use Vxc in QSGW instead). We mainly use {\i0\scaps0\b0\f3 lmf-MPI} ({{\i0\scaps0\b k}}-parallel version) instead of {\i0\scaps0\b0\f3 lmf}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
PROCAR mode of lmf: Fat band mode.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 {\b0\i0\scaps0\f3 mpirun -np 4 lmf-MPIK --mkprocar --band:fn=syml mgo} gives PROCAR \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 (Try an example {\i0\scaps0\b0\f2 \~/ecalj/MATERIALS/MgO_PROCAR/}. Run {\i0\scaps0\b0\f3 ./job} at the directory). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 gwsc}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 QSGW calculation \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\b0\i0\scaps0\f3 job_band,job_tdos,job_pdos}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 band, fermi surface, tdos, pdos plot.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\b0\i0\scaps0\f3 job_fermisurface}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Run {\b0\i0\scaps0\f3 job_fermisurface cu -np 4 10 10 10}. This write down all band energies (around Ef) for 10x10x10 in BZ. Then we can view it with xcrysden as {\b0\i0\scaps0\f3 xcrysden --bxsf fermiup.bxsf} (usage of xcrysden need to be written here). With \endash allband added for {\b0\i0\scaps0\f3 job_fermisurface}, we can write all the bands. So, we need this option if you like to write iso-energy surface at high (or low) energy. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 epsPP_lmfh}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Dielectric funciton without local field correction (LFC). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 eps_lmfh}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Dielectric funciton with LFC \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 epsPP_lmfh_chipm}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Non-interacting transverse spin polarization. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 gw_lmfh}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 One-shot GW calculation. This also show life-time of QPs ({\i0\scaps0\b0\f2 QPU_lmf}). (we need make it parallelized...) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 genMLWF}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Wannier functions and matrix elements of {{\i W}} on it. A implementation of cRPA included. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 dqpu}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 A small python script to compare QPU.* files (eigenvalues are compared) numerically. \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 2.2  tests\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Install.ifort run tests at {\b0\i0\scaps0\f3 ecalj/TestInstall}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 In the following, {\b0\i0\scaps0\f3 si:gw_lmfh} means \rquote {>}{\b0\i0\scaps0\f3 make si_gw_lmfh}\rquote  at {\b0\i0\scaps0\f3 ecalj/TestInstall/}; this test is performed with the Makefile at the directory. {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par si:gw_lmfh/              Results: QPU 
\par si:gwsc/                        : QPU,log.si
\par gas:gwsc/                       : QPU,log.gas
\par nio:gwsc/                       : QPU,log.nio
\par fe_epsPP_lmfh_chipm:            : ChiPM* 
\par gas:eps_lmfh/                   : EPS*
\par gas:epsPP_lmfh/                 : EPS*
\par \par
}(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 These are just samples; not for practical calculations)\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 2.3  Directory structure\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 { {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par ecalj
\par \u226?\u8221?\u339?\u226?\u8221?\u8364?\u226?\u8221?\u8364? InstallAll.ifort, Install.gfortran ! install and test
\par \u226?\u8221?\u339?\u226?\u8221?\u8364?\u226?\u8221?\u8364? Document/
\par \u226?\u8221?\u339?\u226?\u8221?\u8364?\u226?\u8221?\u8364? fpgw/       ! full potential GW code
\par \u226?\u8221?\u339?\u226?\u8221?\u8364?\u226?\u8221?\u8364? fpgw/Wannier  ! MaxLoc Wannier and cRPA code.
\par \u226?\u8221?\u339?\u226?\u8221?\u8364?\u226?\u8221?\u8364? lm7K/       ! PMT method 
\par \u226?\u8221?\u339?\u226?\u8221?\u8364?\u226?\u8221?\u8364? MATERIALS/  !job_materials.py contains examples. 
\par \u226?\u8221?\u339?\u226?\u8221?\u8364?\u226?\u8221?\u8364? StructureTool/ ! POSCAR converter, and structure tool
\par \u226?\u8221?\u339?\u226?\u8221?\u8364?\u226?\u8221?\u8364? GetSyml/ ! Brillouin zone and symmetry lines generator and visualizer.
\par \u226?\u8221?\u339?\u226?\u8221?\u8364?\u226?\u8221?\u8364? TestInstall/   ! Install test; this is invoked from Install.*
\par \u226?\u8221?\u8221?\u226?\u8221?\u8364?\u226?\u8221?\u8364? TOOLS/      !Tools for developers
\par \par
}}\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 3  Theory (note)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Except the technical details, we need to know minimum for these theories. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
DFT in LDA/GGA. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
GW \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
QSGW \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 There are literatures as for GW. A recent one is Ref.
[{\field{\*\fldinst{\lang1024 REF BIB_di_valentin_quasiparticle_2014 \\* MERGEFORMAT }}{\fldrslt{4}}}
]. In addition, it is better to know the basics of the PMT method (LAPW+LMTO method) 
[{\field{\*\fldinst{\lang1024 REF BIB_kotani2015pmt \\* MERGEFORMAT }}{\fldrslt{1}}}
]. Here is a small note for {{\i G}{\i W}}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b Green function} \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 The Green\rquote s function {{\i G}({\i0\scaps0\b r},{\i0\scaps0\b r}',{\u969*})} is the central quantity in the GW calculation. In the one-particle theory (mean-field theory/non-interacting case), the Schr\'f6dinger eq. is {\par
\pard\plain\s16\ql\sb120\sa120\keep\widctlpar\f0\tqr\tx3840\tqc\tx4267\tql\tx4694\tqr\tx8535\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ ({\i i} \\F({\u8706*},{\u8706*}{\i t})\u8722?{\i H}\\s\\do5({\fs16 0})){\u968*}({\i0\scaps0\b r}\\,{\i t})=0}}{\fldrslt }}
\tab
\tab
\tab{\b0 ({\*\bkmkstart BMsch0}1{\*\bkmkend BMsch0})}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Here {{\field{\*\fldinst{ EQ {\i H}\\s\\do5({\fs16 0})}}{\fldrslt }}
} is the one-particle Hamiltonian which contains electrostatic potential plus exchange-correlation potential {{\field{\*\fldinst{ EQ {\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})}}{\fldrslt }}
} (here we don\rquote t care how it is given. This should be static but can be non-local as Fock term). When we have (unkown) source term {{\i J}({\i0\scaps0\b r},{\i t})} instead of 0 in the right hand side of {Eq.\~({\field{\*\fldinst{\lang1024 REF BMsch0 \\* MERGEFORMAT }}{\fldrslt{1}}})}, we can calcuate {{\u968*}({\i0\scaps0\b r},{\i t})} by multipling inversion of the operator {{\field{\*\fldinst{ EQ ({\i i} \\F({\u8706*},{\u8706*}{\i t})\u8722?{\i H}\\s\\do5({\fs16 0}))}}{\fldrslt }}
}. This is the (non-interacting) Green funciton {{\i G}({\i0\scaps0\b r},{\i0\scaps0\b r}',{\u969*})} defined as {\par
\pard\plain\s16\ql\sb120\sa120\keep\widctlpar\f0\tqr\tx3840\tqc\tx4267\tql\tx4694\tqr\tx8535\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ ({\i i} \\F({\u8706*},{\u8706*}{\i t})\u8722?{\i H}\\s\\do5({\fs16 0})){\i G}={\u948*}({\i t}\u8722?{\i t}'){\u948*}({\i0\scaps0\b r}\u8722?{\i0\scaps0\b r}').}}{\fldrslt }}
\tab
\tab
\tab{\b0 ({\*\bkmkstart BMg0def}2{\*\bkmkend BMg0def})}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 As this shows, {{\i G}} is the inverse matrix of the operator {{\field{\*\fldinst{ EQ ({\i i} \\F({\u8706*},{\u8706*}{\i t})\u8722?{\i H}\\s\\do5({\fs16 0}))}}{\fldrslt }}
}, (we pay attention to the boundary condition, especially for time-direction: retarted, advanced or time-ordered). Thus we can write {{\field{\*\fldinst{ EQ {\i G}=1/({\i i} \\F({\u8706*},{\u8706*}{\i t})\u8722?{\i H}\\s\\do5({\fs16 0}))=1/({\u969*}\u8722?{\i H}\\s\\do5({\fs16 0}))}}{\fldrslt }}
}. In other words, the Green function {{\i G}} is the integration kernel in order to convert a differential equation {Eq.\~({\field{\*\fldinst{\lang1024 REF BMg0def \\* MERGEFORMAT }}{\fldrslt{2}}})} to an integral equation. This is the same as the case of Poisson equation (Laplacian) for the electrostatic problem;then {1/|{\i0\scaps0\b r}\u8722?{\i0\scaps0\b r}'|} is the Green function for the conversion (then we calculate electro static field {{\u966*}({\i0\scaps0\b r})} for give source term {{\u1009*}({\i0\scaps0\b r})}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 In the case of electro static problem, we have two ways to solve the problem. One is the direct method to solve differential equation, the other is using such integration kernel. They are equivalent, but the latter is easy to handle and suitable for numerical calculations (under the assumption of \ldblquote superposition low\rdblquote , that is, linear response). Although {{\i G}({\i0\scaps0\b r},{\i0\scaps0\b r}',{\i t}\u8722?{\i t}')} contains time variables (to describe wave propagation), essentials are the same.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b Green function: many body case}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {{\i G}({\i0\scaps0\b r},{\i0\scaps0\b r}',{\u969*})} is the quantity which is well defined even in the many-body perturbation theory. It is defined as the expectation value as {{\field{\*\fldinst{ EQ {\f5\u9001*}0|{\f5\u770\'5e}{\u968*}({\i0\scaps0\b r}{\i t}){\f5\u770\'5e}{\u968*}\\s\\up5({\fs16 \'86})({\i0\scaps0\b r}'{\i t}')|0{\f5\u9002*}}}{\fldrslt }}
} (this is not accurate. See literatures..). Here we use the second-quantized field-operator {{\f5\u770\'5e}{\u968*}}. This definition of {{\i G}} is a natural extension of the one-particle case.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 However, there are differences in the {{\i G}} of one-particle case and many-body case. In the one-particle case, we have no interaction between electrons. Thus an electron added to the ground state (which is by filling electrons up the Fermi energy) is the eigenstate. An electron going on can not be an eigenstate, because of the correlation effect and exchange effect.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Let me explain the correlation effect. In contrast to this, one-particle state (=the quasiparticle(QP)) in the many-body theory can be not the eigenstate; it moves in the sea of ohter electrons and holes, which can be excited to other states, or an moving electron can move with polalized cloud of other electrons and holes. Its motion is affected by oher electrons. It will lose energy gradually; the QP can have life time. This may be identified as the correlation effect.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Let me explain the exchange effect. This is due to the Fermi statistics. The electron, which you focus on, can not be distinguished from other electrons. (Thus mu-on can not feel this effect. {{\i G}} for mu-on in solids only contains pure correlation effect). From a point of view, this exchange effect is interpreted as a hopping effect, sudden jump from an electron to another elecron (actually the Hartree-Fock theory gives zero effective mass at the Fermi energy for metallic systems).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We can include both of the effects in the GW calculation at the lowest order. Exactly speaking, these two effects are really mixed up. However, in GW (since GW is at the lowest order), these two are clearly separated.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The rigorous equation for {{\i G}} is {\par
\pard\plain\s16\ql\sb120\sa120\keep\widctlpar\f0\tqr\tx3840\tqc\tx4267\tql\tx4694\tqr\tx8535\sl240\slmult1 \fi0 \tab
{\field{\*\fldinst{ EQ  \\b ({\i i} \\F({\u8706*},{\u8706*}{\i t})\u8722?{\i H}\\s\\do5({\fs16 0})+({\u931*}({\i0\scaps0\b r}\\,{\i0\scaps0\b r}'\\,{\i t}\u8722?{\i t}')\u8722?{\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc}))){\i G}={\u948*}({\i t}\u8722?{\i t}'){\u948*}({\i0\scaps0\b r}\u8722?{\i0\scaps0\b r}').}}{\fldrslt }}
\tab
\tab
\tab{\b0 ({\*\bkmkstart BMgdef}3{\*\bkmkend BMgdef})}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Only the difference is adding {{\field{\*\fldinst{ EQ {\u931*}({\i0\scaps0\b r}\\,{\i0\scaps0\b r}'\\,{\i t}\u8722?{\i t}')\u8722?{\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})}}{\fldrslt }}
}. In other words, all unknown effects are pushed into this term. Many body effect are pushed into (downfolded or projected into) the self-energy (=dynamical one-particle potential) {{\u931*}({\i0\scaps0\b r},{\i0\scaps0\b r}',{\i t}\u8722?{\i t}')}. We don\rquote t treat many-body quantities such as {{\field{\*\fldinst{ EQ {\i X}({\i0\scaps0\b r}\\s\\do5({\fs16 1}){\i t}\\s\\do5({\fs16 1})\\,{\i0\scaps0\b r}\\s\\do5({\fs16 2}){\i t}\\s\\do5({\fs16 2})\\,{\i0\scaps0\b r}\\s\\do5({\fs16 3}){\i t}\\s\\do5({\fs16 3}))}}{\fldrslt }}
} directly in the {{\i G}{\i W}} calculations.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The {{\i G}{\i W}} method is how to give the {{\u931*}({\i0\scaps0\b r},{\i0\scaps0\b r}',{\i t}\u8722?{\i t}')} in the lowest order. Because of the long-range property of the Coulomb interaction, we need to have a special technique (not a simple perturbation). {{\u931*}({\i0\scaps0\b r},{\i0\scaps0\b r}',{\i t}\u8722?{\i t}')} is calculated as the product of {{\i G}{\u215*}{\i W}}, where {{\i G}} is (usually) just the non-interacting Green function given in {Eq.\~({\field{\*\fldinst{\lang1024 REF BMg0def \\* MERGEFORMAT }}{\fldrslt{2}}})}. {{\i W}} is the dynamically screened Coulomb interaction calculated in RPA.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b QSGW}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Note that {Eq.\~({\field{\*\fldinst{\lang1024 REF BMgdef \\* MERGEFORMAT }}{\fldrslt{3}}})} completely cancels the effect of {{\field{\*\fldinst{ EQ {\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})({\i0\scaps0\b r}\\,{\i0\scaps0\b r}')}}{\fldrslt }}
} since it is included in {{\field{\*\fldinst{ EQ {\i H}\\s\\do5({\fs16 0})}}{\fldrslt }}
}. Thus this division is not meaningful if we can solve a problem completely. However, what we can do is only the perturbation. Quantities for {{\field{\*\fldinst{ EQ {\i H}\\s\\do5({\fs16 0})}}{\fldrslt }}
} is taken as the basic quantities. On it, we apply the perturbation. Equivalently we can have a division {{\field{\*\fldinst{ EQ {\i H}={\i H}\\s\\do5({\fs16 0})+({\i H}+{\i H}\\s\\do5({\fs16 0}))}}{\fldrslt }}
}, where {{\i H}} is the many-body Hamiltonian. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 In priniple, we can start from any {{\field{\*\fldinst{ EQ {\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})}}{\fldrslt }}
}. However, as long as we use perturbation theory, we have to minimize the effect of {{\field{\*\fldinst{ EQ {\u931*}({\i0\scaps0\b r}\\,{\i0\scaps0\b r}'\\,{\i t}\u8722?{\i t}')\u8722?{\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})}}{\fldrslt }}
}. The degree of freedom of the choice of {{\field{\*\fldinst{ EQ {\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})}}{\fldrslt }}
} is used to minimize it. This is the self-consistent pertubation theory idea for QSGW.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 If {{\field{\*\fldinst{ EQ {\u931*}({\i0\scaps0\b r}\\,{\i0\scaps0\b r}'\\,{\i t}\u8722?{\i t}')\u8722?{\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})}}{\fldrslt }}
} give small effect, we can use the concept of the QP (independent particle picture) as the basis to evaluate physical quantities.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We have to determine best (or optimum) {{\field{\*\fldinst{ EQ {\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})}}{\fldrslt }}
}. How to do it? An idea is that we should determine it so that the size of {{\field{\*\fldinst{ EQ {\u931*}({\i0\scaps0\b r}\\,{\i0\scaps0\b r}'\\,{\i t}\u8722?{\i t}')\u8722?{\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})}}{\fldrslt }}
} should be smallest (how to measure the size?). Or, based on the Landau-Silin\rquote s theory, the QPs contained in {{\i G}} should be reproduced by {{\field{\*\fldinst{ EQ {\i H}\\s\\do5({\fs16 0})}}{\fldrslt }}
}. In anyway, this ends up with the self-consitent petrurbation theory. For trial {{\field{\*\fldinst{ EQ {\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})}}{\fldrslt }}
} (and electron density), we have {{\field{\*\fldinst{ EQ {\i H}\\s\\do5({\fs16 0})}}{\fldrslt }}
}; from {{\field{\*\fldinst{ EQ {\i H}\\s\\do5({\fs16 0})}}{\fldrslt }}
} we can calculate {{\u931*}({\i0\scaps0\b r},{\i0\scaps0\b r}',{\i t}\u8722?{\i t}')}. Then we have to determine new {{\field{\*\fldinst{ EQ {\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})}}{\fldrslt }}
} in a method. This is repeated until converged. No unique choice for the method. Thus we testes some possible ways and now we usually use a standard procedure as described in Ref. 
[{\field{\*\fldinst{\lang1024 REF BIB_kotani_quasiparticle_2014 \\* MERGEFORMAT }}{\fldrslt{2}}}
].\par
\column
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 {\*\bkmkstart BMldagga}4{\*\bkmkend BMldagga}  LDA/GGA calculations and Plots\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Calculations are performed by following steps. These steps are detailed in the following sub-sections. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To identify a set of files used for a material we calculate, we use an extension to files. For example, files explained below are with extensions (only lower case allowed) of materials. For example, {\b0\i0\scaps0\f3 ctrls.cu} and {\b0\i0\scaps0\f3 ctrl.cu}. In this case {\b0\i0\scaps0\f3 cu} is the extension. Any extension works. Other possible examples are {\b0\i0\scaps0\f3 ctrls.lagao3}, {\b0\i0\scaps0\f3 ctrl.wgantest1}, and so on.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
Write crystal structure file {{\i0\scaps0\b0\f2 ctrls.*}}, which contains crystal structure. It can be by hand, or convert it from POSCAR (in VASP). There is a tool to convert between POSCAR and {{\i0\scaps0\b0\f2 ctrls.*}} (See {\i0\scaps0\b0\f2 ecalj/StructureTool/README.txt} for the tool. we have {\i0\scaps0\b0\f3 vasp2ctrl} and {\i0\scaps0\b0\f3 ctrl2vasp}. Type them without arguments to see help.)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
Generate {{\i0\scaps0\b0\f2 ctrl.*}}from {{\i0\scaps0\b0\f2 ctrls.*}}by a script {\b0\i0\scaps0\f3 ctrlgenM1.py}, {\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} {\i0\scaps0\b0\f3 ctrlgenM1.py} exists originally at {\i0\scaps0\b0\f2 ecalj/lm7K/} ({\i0\scaps0\b0\f3 ctrlgenM1.py} was already copied to your {\i0\scaps0\b0\f3 BINDIR=} defined in {\i0\scaps0\b0\f3 ecalj/Install.ifort} in the installation).}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 Here {\b0\i0\scaps0\f3 ctrl.*} is the main control file which contains all required information to perform calculations. {\i0\scaps0\b0\f2 ctrl.*} contains not only the content of {{\i0\scaps0\b0\f2 ctrls.*}}, but also other information needed for calculations. If necessary, we edit the generated {\b0\i0\scaps0\f3 ctrl.*} file before next step.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
Check crystal structure. {{\i0\scaps0\b0\f3 lmchk}}is to confirm the crystal structure (space-group symmetry and so on). {{\i0\scaps0\b0\f3 lmchk}}is applied not to {{\i0\scaps0\b0\f2 ctrls.*}}but to {{\i0\scaps0\b0\f2 ctrl.*}}. {{\i0\scaps0\b0\f2 ctrls.*}}never used in the following steps.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 {\i0\scaps0\b CAUTION for a known bug! {\*\bkmkstart BMbuglmchk}{\*\bkmkend BMbuglmchk}}: If a crystal structure is only slightly different from a structure with higher symmetry, the {{\i0\scaps0\b0\f3 lmchk}}may give a wrong crystal symmetry. In such a case, you have to \ldblquote standardize structure\rdblquote  by VESTA or some other tools. This occurs e.g., when we use a structure numerically relaxed by VASP.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 4.\tab
Run {\i0\scaps0\b0\f3 lmfa} (calculations of spherical atoms (MT sites) in the cell). It also calculates core eigenfunctions and valence electron charge to set up initial condition. Then we run main calculation of LDA by {\b0\i0\scaps0\f3 lmf}. It repeats iterations, and end up with converged results in LDA. Main result (electron density satisfying self-consistency) is stored in restart file {\b0\i0\scaps0\f3 rst.*} (binary file). It finished within a second.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 5.\tab
Run LDA/GGA calculations. We can run the LDA/GGA calculation by {\i0\scaps0\b0\f3 lmf} or {\i0\scaps0\b0\f3 lmf-MPIK} (-MPIK means kpoint parallel version).\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 6.\tab
Post processing.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Plot energy band, DOS, PDOS, by running scripts. We can use scripts {\i0\scaps0\b0\f3 job_band} for band plot (need {\i0\scaps0\b0\f2 syml.si} file (symmetry line for band plot)). We also have {\i0\scaps0\b0\f3 job_pdos, job_tdos, job_fermi} and so on for DOS, PDOS, fermi surfaces. Since we use gnuplot to plot them, meanings of obtained data is apparently clear.\par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb220 \fi0 {\*\bkmkstart BMctrls}4.1{\*\bkmkend BMctrls}  Write crystal structure file, ctrls\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Let me show some samples of crystal structure files {{\i0\scaps0\b0\f2 ctrls.*}}. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\i0\scaps0\b Cu:}\tab
{\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par ~/ecalj/lm7K/TESTsamples/Cu/ctrls.cu
\par ------from here ------------------
\par % const da=0 alat=6.798
\par STRUC  ALAT=\{alat\} DALAT=\{da\}
\par        PLAT=  0.0 0.5 0.5   0.5 0.0 0.5    0.5 0.5 0.0
\par SITE    ATOM=Cu POS=0 0 0
\par ------to here ------------------
\par \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\i0\scaps0\b GaAs:}\tab
{\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par ecalj/lm7K/TESTsamples/GaAs/ctrl.gaas
\par ------from here ------------------
\par #id  = GaAs
\par %const bohr=0.529177 a=5.65325/bohr 
\par STRUC
\par      ALAT=\{a\} 
\par      PLAT=0 0.5 0.5  0.5 0 0.5  0.5 0.5 0 
\par SITE
\par      ATOM=Ga POS=0.0 0.0 0.0
\par      ATOM=As POS=0.25 0.25 0.25
\par ------to here ------------------
\par \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {\i0\scaps0\b SrTiO3:}\tab
{\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par ecalj/lm7K/TESTsamples/SrTiO3/ctrls.srtio3 
\par ------from here ------------------
\par %const da=0 au=0.529177
\par %const d0=1.95/au a0=2*d0 v=a0^3 a1=v^(1/3)
\par HEADER  SrTiO3 cubic 
\par STRUC   ALAT=\{a1\} DALAT=\{da\} 
\par         PLAT=1 0 0  0 1 0  0 0 1
\par SITE
\par       ATOM=Sr POS=1/2 1/2 1/2
\par       ATOM=Ti POS= 0   0   0
\par       ATOM=O  POS=1/2  0   0
\par       ATOM=O  POS= 0  1/2  0
\par       ATOM=O  POS= 0   0  1/2
\par ------to here ------------------
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb100 \fi0 Lines starting from \rquote #\rquote  are neglected as comment lines. Lines starting from \rquote {\b0\i0\scaps0\f3 % const}\rquote  define variables and set values (in these cases, {\b0\i0\scaps0\f3 da}, {\b0\i0\scaps0\f3 alat}, and {\b0\i0\scaps0\f3 bohr}, and so on). Then the variable {\b0\i0\scaps0\f3 alat} is referred to as {\b0\i0\scaps0\f3 \{alat\}}; in the cu case, {\b0\i0\scaps0\f3 \{alat\}} means 6.798. Lines not start from "#" nor "%" are main content in {{\i0\scaps0\b0\f2 ctrls.*}}. {\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} For these variables, we can overlay values when we start programs. For example,\rquote lmf -vdalat=0.1 si\rquote  means that {\f3 alat} is recorded in save.si file.}
\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Note that we have two tags of \ldblquote categories\rdblquote  "STRUC" and "SITE". (\ldblquote HEADER\rdblquote  tag is also; but it is just for user\rquote s memo shown in console output). These tags should start from the first column. Thus {{\i0\scaps0\b0\f2 ctrls.*}}is divided into multiple \ldblquote categories\rdblquote . In a category, we have \ldblquote tokens\rdblquote  such as ALAT, DLAT, PLAT. These under STRUC category. ALAT+DALAT specify unit of length in this ctrl file. These are in a.u. (= bohr radius=0.529177\'c5). \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The unit cell is given by PLAT (as noted, ALAT+DALAT as unit). In the above example of GaAs, three primitive cell vectors specified by nine numbers after PLAT=; they give three primitive vectors; PLAT1=(0,0,0.5), PLAT2=(0.5, 0.0, 0.5), and PLAT3=(0.5, 0.5, 0). DALAT is convenient to change lattice constant; but it is fixed to be zero here; thus no effect in this example.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Note that SITE category can have multiple ATOM tokens. The number of ATOM token under SITE should be the same as number of atoms in the primitive cell. In the case of GaAs; SITE contain multiple ATOM tokens. POS= just next to ATOM is taken as subtokens under ATOM token. {\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} This may looks slightly uncomfortable since the end of range of ATOM is not clearly shown; it end just at the next ATOM token or new category.}
 In cases, we specify such subtokens as SITE_ATOM_POS.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 In the SITE category, we place atoms (MT names) in the primitive cell. In these cases we use defaults atomic symbol (MT names) for {\b0\i0\scaps0\f3 ATOM}. POS is in the Cartesian coordinate (in the unit of ALAT+DALAT).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To test ecalj, you may make a test directory and copy a {{\i0\scaps0\b0\f2 ctrls.*}}to your directory. If you have VESTA and ecalj/StructureTool/ installed, you can see its structure by {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par   $ viewvesta ctrls.cu
\par \par
}(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 here $ means command prompt). {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li512\ri512\fi300 NOTE: As written in ecalj/README, you have to install VESTA and {\b0\i0\scaps0\f3 viewvesta}. Then set VESTA= at the top of ecalj/Structure/viewvesta, and make softlink to it. The command {\b0\i0\scaps0\f3 viewvesta}({\b0\i0\scaps0\f3 ~/ecalj/StructureTool/viewvesta.py}) generate {\b0\i0\scaps0\f3 POSCAR_cu.vasp} first, then send it to VESTA. {\b0\i0\scaps0\f3 viewvesta} also accept {\b0\i0\scaps0\f3 POSCAR_cu.vasp} directly. Except names starting from {\b0\i0\scaps0\f3 ctrl} and {\b0\i0\scaps0\f3 ctrls}, {\b0\i0\scaps0\f3 viewvesta} sends the name to VESTA directly. We need extension \rquote .vasp\rquote  to recognize it is written in VASP format. We have samples in {\b0\i0\scaps0\f3 ~/ecalj/StructureTool/sample}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li512\ri512\fi0 A tool {\b0\i0\scaps0\f3 vasp2ctrl} converts POSCAR_.vasp to ctrls.. \ldblquote \endash help\rdblquote  show a small help. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li512\ri512\fi0 {{\u8226*}} ecalj/StructureTool/ is not tested well. Not believe it so much... We will fix it on your request. Another possible way is using cif2cell.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li512\ri512\fi300 If you have a cif file, run {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li512\ri512\fi0 
\par cif2cell foobar.cif -p vasp --vasp-cartesian --vasp-format=5
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li512\ri512\fi0 And convert POSCAR to ctrls. cif2cell is available from github. \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 In {\b0\i0\scaps0\f3 ctrls.srtio3}, we use an expression 1/2 to give POS. We can use mathematical expression instead of values. Mathematical expressions such as \ldblquote {+\u8722?*/} sqrt(...)\rdblquote  are recognized. (instead of {\b0\i0\scaps0\f3 3**2}, use {\b0\i0\scaps0\f3 3^2}. Use parenthesis, and no space for an expression). We can use default atomic symbols (to check default atom name (MT name) type {\b0\i0\scaps0\f3 ctrlgenM1.py --showatomlist}). Instead of such default symbols, we can use your own symbol as {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     SITE
\par       ATOM=M1 POS=1/2 1/2 1/2
\par       ATOM=M2 POS= 0   0   0
\par       ATOM=O  POS=1/2  0   0
\par       ATOM=O  POS= 0  1/2  0
\par       ATOM=O  POS= 0   0  1/2
\par     SPEC
\par       ATOM=M1 Z=38
\par       ATOM=M2 Z=22
\par       ATOM=O  Z=8
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 . Then we have to add extra category SPEC where we set Z number. (You can use Z=37.5 for virtual crystal approximation, however, you can not do it in ctrls now. Edit it in ctrl file. Such a procedure will be explained in other place.xxx)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 This is an example for Antiferro NiO: {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par #id  = NiO
\par %const bohr=0.529177 a=7.88
\par STRUC   ALAT=\{a\} PLAT= 0.5 0.5 1.0  0.5 1.0 0.5  1.0 0.5 0.5
\par SITE    ATOM=Niup POS=  .0   .0   .0
\par         ATOM=Nidn POS= 1.0  1.0  1.0
\par         ATOM=O POS=  .5   .5   .5
\par         ATOM=O POS= 1.5  1.5  1.5
\par SPEC
\par     ATOM=Niup Z=28 MMOM=0 0  1.2 0
\par     ATOM=Nidn Z=28 MMOM=0 0 -1.2 0
\par     ATOM=O Z=8 MMOM=0 0 0 0
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 In this case, we define Niup and Nidn sites. These are recognized as Ni atom because of given Z number in SPEC. The subtoken MMOM=Ms,Mp,Md,Mf... re to specify number of magnetic moments ({{\field{\*\fldinst{ EQ {\u956*}\\s\\do5({\fs16 {\i B}})}}{\fldrslt }}
}) for s,p,d,f channels (difference of up - down electrons within MT sites) as initial condition. In this case, we set n(up)-n(down)=1.2 for Niup site for d channel. Even just one ATOM name is given by yourself, all ATOM in SPEC should be given (in this case SPEC for O should be given).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We can see other samples in {\b0\i0\scaps0\f3 ~/ecalj/lm7K/TESTsamples/*/ctrls.*}. (we also have a sample generator. See later section.) Note that ctrls file is jut in order to generate default ctrl file in the followings. Not from ctrls but from ctrl, we can start calculations. (thus ctrls is not needed if we prepare ctrl file directory).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 It is possible to add {\b0\i0\scaps0\f3 RELAX= 0 0 1} after {\b0\i0\scaps0\f3 SITE_ATOM_POS}; this means structure relaxation along z-axis (also need to set {\b0\i0\scaps0\f3 DYN} category given in Document/Manual/CategoryAndToken.org). but its defaults are given (but commented out) automatically in the ctrl file generated by the procedure described in the following section). We detail it in other place xxx.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 After {\b0\i0\scaps0\f3 ctrl.*} is generated as shown below, we can run a command {\b0\i0\scaps0\f3 lmchk} to check weather crystal structure is correctly given or not. It finish in a second. It show symmetry information, and so on used in the calculation.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b CAUTION!}: Positions of atoms are not necessarily fixed by {\i0\scaps0\b0\f2 ctrl.*} when you restart calculation with {\i0\scaps0\b0\f2 rst.*} file, because atomic positions are read from {\i0\scaps0\b0\f2 rst.*}. We need to pay attention when we use DYN option because {\i0\scaps0\b0\f3 lmf} run may save relaxed atomic positions into the {\i0\scaps0\b0\f2 rst.*}. As \ldblquote lmf \endash help\rdblquote  shows, {\b0\i0\scaps0\f3 lmf si --rs=1,1,1,0,0} can read atomic position from ctrl file.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 4.2  Generate default ctrl from ctrls by ctrlgenM1.py\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 To run programs of lm7K (lmfa, lmf, lmchk) in ecalj, we need an input file {\b0\i0\scaps0\f3 ctrl.*}, which contains not only structures but also other settings. To generate {\b0\i0\scaps0\f3 ctrl.*} from {\b0\i0\scaps0\f3 ctrls.*}, we have a command "ctrlgenM1.py" (written in python 2.x and call fortran programs(lmfa,lmchk) internally). Two steps required to complete ctrl file: (i) we give reasonable options when we run ctrlgenM1.py. Then (ii) we may edit the ctrl file afterward. In anyway, ctrl file is the starting point of calculations; ctrls is required just in order to generate ctrl.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 At first, try {\b0\i0\scaps0\f3 ctrlgenM1.py} without arguments. It shows help. To generate {\b0\i0\scaps0\f3 ctrl} from {\b0\i0\scaps0\f3 ctrl}, type {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par    $ ctrlgenM1.py cu --nk1=8
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Here cu specify ctrls.cu. The option \endash nk1=8 means the number of division of the Brillouin zone for integration. It means 8x8x8 division. If we like to use 8x8x4, we have to supply three arguments \endash nk1=8 \endash nk2=8 \endash nk3=4. The above command gives following console output. {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     $ ctrlgenM1.py cu --nk1=8
\par      === INPUT arguments (--help gives default values) === 
\par       --help  Not exist
\par       --showatomlist  Not exist
\par       --nspin=1
\par       --nk=8
\par       --xcfun=vwn   !(bh,vwn,pbe) 
\par       --systype=bulk !(bulk,molecule)
\par       --insulator  Not exist !(do not set for --systype=molecule)
\par 
\par     ...
\par 
\par     OK! A template of ctrl file, ctrlgen2.ctrl.cu, is generated.
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 As we see above, options which you specified are shown at the beginning of the console output (in this case \endash nk1=8). Others such as \endash nspin=1 are default settings. If we like to perform spin-polarized calculations, we add other option \rquote \endash nspin=2\rquote  as {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     ctrlgenM1.py nio --nspin=2 --nk1=6
\par \par
}(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 NOTE: In the spin-polarized case, we need to set initial condition of size of magnetic moment at each atoms. Set it in {\b0\i0\scaps0\f3 ctrls.*} as in the previous section, or edit MMOM of ctrl file ({\b0\i0\scaps0\f3 MMOM=s p d f ...}) to be like {\b0\i0\scaps0\f3 MMOM=0 0 1.2}.). The {\b0\i0\scaps0\f3 ctrlgenM1.py} generates ctrl file named as {\b0\i0\scaps0\f3 ctrlgenM1.ctrl.cu}. To do calculations, copy it to ctrl.cu so that lmf can recognize it. {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par    cp ctrlgenM1.ctrl.cu ctrl.cu
\par \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 4.3  crystal structure checker: lmchk\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Do lmchk to confirm that we can let {\i0\scaps0\b0\f3 lmf} know correct crystal structure. It also show crystal structure informaiton, equivalent sites, site index and so on. {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par    lmchk --pr60 cu  (--pr# gives more informations if # is number)
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Then it reads {\b0\i0\scaps0\f3 ctrl.cu}. {\b0\i0\scaps0\f3 --pr60} is an option of verbose. Bigger number gives more information. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Lattice info, Space group symmetry operations (in lmf format), and their generators (these operations can be generated from a few of them.)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 See SYMGRP in Document/Manual/CategoryAndToken.org. about how to represent the operations. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Show atomic positions in ctrl file. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Tabulate MT radius and distance between atomic sites. \par
}(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 lmchk \endash help shows help, but difficult to see. Not need to read it first.)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 lmchk is also shows atom (MT site) id (position and class(equivalent positions). This is needed to interpret PDOS.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b CAUTION for a known bug! See {\field{\*\fldinst{\lang1024 REF BMbuglmchk \\* MERGEFORMAT }}{\fldrslt{3}}} in Sec.{\field{\*\fldinst{\lang1024 REF BMldagga \\* MERGEFORMAT }}{\fldrslt{4}}}.}:\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 4.4  ctrl file\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 It is not necessary to look into ctrl file first, although some details are explained in the generated ctrl file. Please compare obtained results by lmf with those by other packages or literatures; let me know if you find something strange or your questions.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 It is necessary to edit ctrl file to use full ability of lmf. For example, LDA+U, atomic position relaxation, core level spectroscopy, Change setting of default MTO and lo, better mixing procedure for stable convergence; higher accuracy, and so on. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 But a few of ctrl file is easy to modify. Search these words and read explanations embedded in ctrl file.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 (1)XCFUN \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 (choice of XC\emdash it is not need to repeat ctrlgenM1.py). It is also possible to change number of k points for sampling, to modify crystal structure slightly, and so on; all things needed are in ctrl. It is not needed to repeat ctrlgenM1.py again.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 (2)SO \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 To obtain correct dispersion around top of valence at {{\u915*}} point for GaAs, we need to set SO=1 and NSPIN=2. QSGW calculation (by {\i0\scaps0\b0\f3 gwsc}) do not allow this option now; Thus we run {\i0\scaps0\b0\f3 lmf} (or {\i0\scaps0\b0\f3 lmf-MPIK}) with such settings changed in ctrl file, after QSGW is converged.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\b0\i0\scaps0\f3 lmf --input} shows what can we write in ctrl file. But more than half are not for users, but for developers (or irrelevant now).\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMlm7K_scf}4.5{\*\bkmkend BMlm7K_scf}  Run LDA/GGA calculations, and get convergence\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Here we show how to get converged results from a {\b0\i0\scaps0\f3 ctrl} file.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 At first, we need initial guess of charge density. It can be given by a super position of atomic charge density. To obtain the charge density, we solve atoms first. It is by {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par    $ lmfa gaas | tee llmfa
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 It takes just a few seconds. Here tee is a command of Linux. It keeps console output (standard output) to a file (llmfa in this case).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Then try {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     $ grep conf llmfa
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 . Then you see a key point that {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par conf:SPEC_ATOM= Ga : --- Table for atomic configuration ---
\par conf:  isp  l  int(P) int(P)z    Qval     Qcore   CoreConf
\par conf:    1  0       4  0         2.000    6.000 => 1,2,3,
\par conf:    1  1       4  0         1.000   12.000 => 2,3,
\par conf:    1  2       4  3        10.000    0.000 => 
\par conf:    1  3       4  0         0.000    0.000 => 
\par conf:    1  4       5  0         0.000    0.000 => 
\par conf:-----------------------------------------------------
\par conf:SPEC_ATOM= As : --- Table for atomic configuration ---
\par conf:  isp  l  int(P) int(P)z    Qval     Qcore   CoreConf
\par conf:    1  0       4  0         2.000    6.000 => 1,2,3,
\par conf:    1  1       4  0         3.000   12.000 => 2,3,
\par conf:    1  2       4  3        10.000    0.000 => 
\par conf:    1  3       4  0         0.000    0.000 => 
\par conf:    1  4       5  0         0.000    0.000 => 
\par conf:-----------------------------------------------------
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 This is an initial electron distribution, and how we divide core and valence. In this case core charge Qcore are \ldblquote 6 electron for s channel=1s,2s,3s and 12 electron for 2s and 3p\rdblquote . Qcore is treated by frozen core approximation. See Sec.2.5 in Ref.{\field{\*\fldinst{\lang1024 REF BMkotani2015pmt \\* MERGEFORMAT }}{\fldrslt{?}}}. Qval means electrons for valence s,p,d channels. The valence channels are 4s,4p,4d,4f (if we set EH=s,p,d,f) in this case The int(P)z column is for local orbital. Thus we have 3d treated as local orbital. (ecalj allow add one local orbital per {{\i l}}.)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The isp index means spin (1 or 2), since \endash nspin=1 (when we invoke ctrlgenM1.py) for GaAs, no isp=2 exist. In summary we have 4s,4p,4d,3d,4f as valence. This means we use corresponding number of MTOs and local orbitals.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 After lmfa, let us start main calculation. {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     $ lmf cu
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 In unix, we ca save console output to llmf by {\b0\i0\scaps0\f3 $ lmf cu | tee llmf}. As it starts iteration calculations, it shows similar output again and again (it is a little too noisy now). Then you end up with self-consistent result as {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     ......
\par    it  8  of 30    ehf=   -3304.895853   ehk=   -3304.895853
\par  From last iter    ehf=   -3304.895856   ehk=   -3304.895855
\par  diffe(q)=  0.000003 (0.000007)    tol= 0.000010 (0.000010)   more=F
\par c ehf=-3304.8958531 ehk=-3304.8958529
\par  Exit 0 LMF 
\par  CPU time:    7.024s     Mon Aug 19 02:03:19 2013   on  
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 {\b0\i0\scaps0\f3 it  8  of 30} means it stop at 8th iteration, although we set maximum number of iteration 30. Note that this number is given by {\b0\i0\scaps0\f3 ITER_NIT=30} in {\b0\i0\scaps0\f3 ctrl.cu}). {\b0\i0\scaps0\f3 ehf} and {\b0\i0\scaps0\f3 ehk} are the ground state energy in Ry. They are calculated in a little different procedure. Although they are different during iterations, it finally get to be the almost the same number. (But they can be slightly different even converged for large systems. But you don\rquote t need to care it so much).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 NOTE: ehk:Hohenberg-Kohn energy, ehf: Harris-Faulkner energy.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \ldblquote grep diffe lllmf\rdblquote  shows how the changed of total energy (and charges) during iteration. diffe mean changes of energy with previous iteration, (q) is for electron density difference as well. See also save.* file, which only show ehk and ehk obtained by each iteration.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \ldblquote  grep gap llmf\rdblquote  shows how the band gap changes (in the usual setting), two same numbers per iteration are shown now.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Thus we do have ground state energy. Although output of lmf is long, most of all are to monitor convergence (we will shrink it). As long as it converged well, you don\rquote t need to look into it in detail. Eigenvalues are shown as {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par  bndfp:  kpt 1 of 4, k=  0.00000  0.00000  0.00000   ndimh = 122
\par  -1.2755 -1.2008 -1.2008 -0.2052 -0.2052 -0.2052 -0.0766 -0.0766 -0.0766
\par  -0.0174 -0.0174 -0.0174  0.1094  0.1095  0.1095  0.2864  0.2864  0.4170
\par   0.4170  0.4736  0.6445  0.6445  0.6445
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 This is at k= 0.00000 0.00000 0.00000 . (because of historical reason, two same bndfp: are shown in each iteration; two band path method). \ldblquote {\b0\i0\scaps0\f3 lmf cu| grep -A6 BZWTS}\rdblquote  shows the Fermi energy (for insulator, we see band gap). Deep levels which gives little dependence on k are core like levels. These are in Ry; zero level is not so meaningful (for convenience, it is simply determined from the potential at MT boundaries).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 rst.* contains is the main output which contains electron density. mix.* is a mixing file (which keeps iteration history). When you restart lmf again, it read rst.cu and mix.cu. If you start from lmfa result, please remove them. We can do parallel calculation with lmf-MPIK, we can invoke it with mpirun -np 8 lmf-MPIK cu. It should give the same answer.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 4.6  DOS, PDOS plot\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We already have script to plot dos, band, and pdos from the result of lmf self-consistent calculations. We have scripts {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     job_tdos, job_band, job_pdos
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 . Look into these scripts, and then you see how to plot them.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 For total DOS plot, it is better to check ctrl file; {\b0\i0\scaps0\f3 BZ_TETRA=1}(this is default; thus make sure that {\b0\i0\scaps0\f3 BZ_TETRA} do not exist or {\b0\i0\scaps0\f3 BZ_TETRA=1}). In addition, it might be better to enlarge number of k point {\b0\i0\scaps0\f3 NKABC} in ctrl file to have smooth curve. Then we do {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     job_tdos cu
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 This shows total DOS as {\par
\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300  {\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0   \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure 1: DOS(Cu)}{\field{\*\fldinst TC "1 DOS(Cu)" \\f f}{\fldrslt }}\par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 The range of DOS and division of total DOS is given by DOSMAX and NPTS in ctrl. Edit tdos.cu.glt for gnulot for your presentation. Please look into {\i0\scaps0\b0\f2 job_tdos} file in your bin directory. It is a small script.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 For PDOS plot, {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     job_pdos cu
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 It shows figures (number of figures are number of atoms in the cell) in gnuplot (they are written in the same position on X-window; move top one a little). The command {\b0\i0\scaps0\f3 job_pdos} is a little time-consuming because we use no symmetry to distinguish all lm channels. (PDOS is not yet implemented for SO=1 case; spin-orbit coupling {\u322?{\f5\u775.}{\i S}} is added.) We can edit script of gnuplot (pdos.site*.*.glt) for your purpose. To plot again, run {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par   gnuplot -persist pdos.site001.cu.glt
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 In principle, meanings of all data files are shown (see at the bottom of console output about lm ordering in a line), thus not so difficult to rewrite *.glt. For example, to plot eg and t2g separately. (NOTE: site id is shown by lmchk).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b WARNING}: Usually lmf and so on recognize options such as -v option. For example, \rquote  lmf gaas -vnspin=2\rquote  or \rquote lmf gaas -vso=1\rquote . This option changes values of variables defined in {\b0\i0\scaps0\f3 % const} section. This is recorded in save.* file, and also shown at the top of console output. However, job_tdos and so on, do not yet accept these options. Thus we need to modify ctrl file without using -v option. Or you need to write these option to these command by hand (we will fix this problem in future.)\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMsec_bandplot}4.7{\*\bkmkend BMsec_bandplot}  Band plot\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 For band plot, we have to set symmetry lines along which we plot eigenvalues. Collections {\b0\i0\scaps0\f3 syml.*} are in ecalj/MATERIALS/. (On Jan2017, we prepared automatic generator of syml.* See Sec.{\field{\*\fldinst{\lang1024 REF BMsec_getsyml \\* MERGEFORMAT }}{\fldrslt{4.7.1}}}). Choose and modify one of them and rename it. I will gather other samples soon. \rquote BZ wikipedia\rquote  or something else will help you to interpret it.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To do band plot, we need {\b0\i0\scaps0\f3 syml.cu} in your directory. {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par    $ cp ~/ecalj/MATERIALS/Cu/syml.cu .
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Then check {\b0\i0\scaps0\f3 syml.cu}; it is {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     21  .5 .5 .5     0  0 0   L Gamma
\par     21   0  0  0     1  0 0   Gamma X
\par     0   (this is the terminator line)
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We supply ten data for each lines (integer, three real, three real, two words). First line means, we calculate eigenvalues for {\i0\scaps0\b k} points from {\i0\scaps0\b k}=(0.5,0.5,0.5) to {\i0\scaps0\b k}=(0,0,0). "L Gamma" are names of two end points (.5 .5 .5) and (0 0 0) in this case. These names are used in a gnuplot script for band plot (bndplot.isp*.glt). Second line means, we calculate eigenvalues for k points from {\i0\scaps0\b k}=(0,0,0) to {\i0\scaps0\b k}=(1,0,0). 3rd line means calculation just stop here. Units of {\i0\scaps0\b k} are in 2{{\u960*}/}{\b0\i0\scaps0\f3 ALAT} (or 2{{\u960*}/}{\b0\i0\scaps0\f3 (ALAT+DALAT)} if {\b0\i0\scaps0\f3 DALAT} exist.). A line starting from \rquote #\rquote  is neglected (comment line).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To do band plot, run {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     $ job_band cu
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 . This is for both nspin=1 and nspin=2 (These scripts try to determine the Fermi energy first. You may skip it in cases (but need to change the script)).\par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300  {\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0  \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure 2: band plot(Cu)}{\field{\*\fldinst TC "2 band plot(Cu)" \\f f}{\fldrslt }}\par
}}\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb360 \fi0 {\*\bkmkstart BMsec_getsyml}4.7.1{\*\bkmkend BMsec_getsyml}  syml genearator\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Jan2017, we added directory {\i0\scaps0\b0\f3 ecalj/GetSyml}, which contains automatic generator of symmetry-line file {\i0\scaps0\b0\f3 syml.*} from {\i0\scaps0\b0\f3  ctrl.*}). Simultaneously, we plot a picture of BZ showing the symmetry lines by matplotlib. See {\i0\scaps0\b0\f3 ecalj/GetSyml/README}. We use open softwares {\i0\scaps0\b0\f3 spglib} and {\i0\scaps0\b0\f3 seekpath} (these should be installed separetely). We have to add acknoledgement to them (see README) )when we use this generator.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 4.8  Useful samples: ecalj/MATERIAL/\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Not only {\b0\i0\scaps0\f3 ecalj/lm7K/TestSamples} (some of them are by older version), We have a material database in {\b0\i0\scaps0\f3 ecalj/MATERIALS/}. Move to the directory, and type {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par   $ ./job_materials.py
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Then it shows a help. You see {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par ...
\par === Materials in Materials.ctrls.database are:===
\par   2hSiC  3cSiC  4hSiC  AlAs  AlN  AlNzb  AlP  AlSb  Bi2Te3  C
\par   CdO  CdS  CdSe  CdTe  Ce  Cu  Fe  GaAs  GaAs_so  GaN
\par   GaNzb  GaP  GaSb  Ge  HfO2  HgO  HgS  HgSe  HgTe  InAs
\par   InN  InNzb  InP  InSb  LaGaO3  Li  MgO  MgS  MgSe  MgTe
\par   Ni  NiO  PbS  PbTe  Si  SiO2c  Sn  SrTiO3  SrVO3  YMn2
\par   ZnO  ZnS  ZnSe  ZnTe  ZrO2  wCdS  wZnS
\par ...
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 . For these simple materials (now 57 materials), input files can be generated, and run them automatically by a command {\b0\i0\scaps0\f3 ./job_materials.py} below. The ctrls are stored in {\b0\i0\scaps0\f3 ecalj/MATERIALS/Materials.ctrls.database} in a compact manner (in addition, options passed to ctrlgenM1.py and options to lmf-MPIK are included). See {\b0\i0\scaps0\f3 ecalj/MATERIALS/README} about how to add new material to it; it is not difficult. The command {\b0\i0\scaps0\f3 ./job_materials.py} gives ctrls.* for these materials from descriptions in the {\b0\i0\scaps0\f3 Materials.ctrls.database}. And then it generates ctrl file by calling ctrlgenM1.py internally, and run lmfa lmf-MPIK successively (when no \endash noexec).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Try {\b0\i0\scaps0\f3 ./job_materials.py Fe --noexec}. (not fe but Fe as it shown above) at {\b0\i0\scaps0\f3 ecalj/MATERIALS/}. Then it makes a directory Fe/ and set ctrl.fe (also ctrls.fe) in the directory. Without \rquote \endash noexec\rquote , it does calculation for Fe successively. As for NiO and Fe, we see that {\b0\i0\scaps0\f3 ./job_materials.py} gives SPEC_ATOM_MMOM in generated ctrls and ctrl files. (Look into ctrls.fe; we need SPEC section when we add MMOM.)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Try {\b0\i0\scaps0\f3 job_materials.py GaAs Si}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Then directories GaAs/ and Si/ are generated. See {\b0\i0\scaps0\f3 save.*} files containing total energies iteration by iteration. Starting from {\b0\i0\scaps0\f3 ctrl.*} in these directory, the command perform DFT calculations (Console output is stored in {\b0\i0\scaps0\f3 llmf}, {\b0\i0\scaps0\f3 save.*} gives total energies. {\b0\i0\scaps0\f3 rst.*} contains self-consistent density, from which we can calculate energy bands and so on).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \ldblquote {\b0\i0\scaps0\f3 ./job_materials --all --noexec}\rdblquote  generates ctrls and ctrl files of these materials. \ldblquote {\b0\i0\scaps0\f3 ./job_materials --all}\rdblquote  do self-consistent LDA calculations for materials (it takes an hour or more. To change the number of cores for lmf-MPIK, set option -np (number of core). See help of {\b0\i0\scaps0\f3 ./job_materials} (type this without arguments).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 To make band plot and so on for Fe, follow instructions already explained. {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par   $ ./job_materials.py Fe  (and need to type return)
\par   (If you like start over, remove Fe/ under it first).
\par   $ cd Fe
\par   $ ./job_materials.py fe
\par     (but it might be better to do --noexec, and observe Fe/ctrls.fe and
\par  Fe/ctrl.fe first. grep conf llmf shows the initial electron distribution).
\par   $ cat save.fe  (this shows total energies of each iteration. 'c ' at
\par  the first column gives converged result. 'h ' is from atm file.)
\par         If it does not ends with 'c ...' line, something strange
\par  occurs. see llmf (console out put of lmf is saved to llmf).
\par   $ cp ../syml.fe .
\par   $ job_band fe -np 4 
\par         (As I said, this shell script do not yet accept
\par      options to lmf. Look into the script).
\par         (This calculate fermi energy first for safe; it takes
\par      some time)       
\par   $ job_tdos fe
\par   $ job_pdos fe (as I said, this supress space-group symmetry, thus time consuming).
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 At the end of {\b0\i0\scaps0\f3 job_pdos}, we show a help which pdos data is where (In pdos file, we have 26 numbers a line; first is energy, 2-26 are pdos for s,p,d,f,g; which is which are shown in the help). See joblmf file also (it contains options to invoke lmf. This is shown in save.*. In principle, options in joblmf should be passed to band plot and so on. But not yet implemented (it is not so difficult; I have to do it).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 After doing {\b0\i0\scaps0\f3 ./job_materials} foobar, you may like move it back to original... In such a case, git works. At {\b0\i0\scaps0\f3 ecalj/}, do {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par   $ mv MATERIALS MATERIALS.bk
\par   $ git checkout MATERIALS
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Then you can see {\b0\i0\scaps0\f3 MATERIALS/} is moved back to just downloaded one.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 4.9  How to add spin-orbit coupling?\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \sb60 \fi0 
\par In the LDA level calculations, we can use
\par SO=0 (no SO), SO=1(LdotS), or SO=2(LzSz) schemes.
\par However, SO=1 is not the non-collinear method
\par (z-direction is assumed to be spin direction; in cases
\par we may need to primitive cell so that the z-direction
\par is the spin direction).
\par 
\par Within LDA, we have two possible ways.
\par (A) Do LDA and/or QSGW with SO=0 first.
\par Then apply the spin-orbit coupling by perturbation.
\par or (B) do self-consitent LDA calculations with SO=1 (or =2).
\par For semiconductors, we think you observe little differences.
\par 
\par Let me explain the case (A).
\par After converged with nspin=1, create new directory and copy
\par   ctrl.gas, rst.gas, sigm.gas, QGpsi,
\par to it. Then we set
\par   nspin=2 
\par   METAL=3 (usually this is default)
\par   SO=1  (this is ldots calculation off-diagonal elements included).
\par   Q=band (we do not change potential.)
\par in ctrl.gas. 
\par Then run
\par >lmf gas >& llmf_SO
\par You can see "band gap with SO" by 
\par > grep gap llmf_SO.
\par Then you can see two same lines.
\par   VBmax = 0.101949  CBmin = 0.236351  gap = 0.134402 Ry = 1.82786 eV
\par   VBmax = 0.101949  CBmin = 0.236351  gap = 0.134402 Ry = 1.82786 eV
\par (two lines per iteration is shown in metel mode).
\par This is the band gap with SO as a first-order perturbation 
\par on top of the "QSGW without SO". When you use ctrl fil e generated by
\par ctrlgenM1.py. You can do the above procedure with
\par >lmf --rs=1,0 gas -vnit=1 -vso=1 -vnspin=2 -vmetal=3 --quit=band
\par (--rs=1,0 read rst.gas but not write rst.gas. Run lmf --help.
\par  The switch -v (-vso=1 in this case) replaces so=0 with so=1. 
\par  This is recorded in save.gas file).
\par 
\par For band plot, you can use the same procedure 
\par for the case without SO. (Look into the shell script job_band.
\par You have to modify it so that 
\par   '--rs=1,0 gas -vnit=1 -vso=1 -vnspin=2 -vmetal=3 --quit=band' 
\par is added to arguments for >lmf --band:syml ...).
\par (--quit=band is not necessary if we like to renew eigenfunctions
\par self-consistent. Anyway we expect little differences.)
\par 
\par ---
\par 
\par \\noindent QSGW with SO:\\\\
\par For given sigm file, it is possible to attain self-consisency with SO=1(or=2) with keeping sigm (then we do not set Q=band). 
\par However, this imply that Vxc is fixed in QSGW, 
\par it is not necessary better than the above procedure.
\par \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 4.10  PROCASR (VASP format) generator\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 PROCASR mode for lmf (not yet in lmf-MPIK) Band weight decomposition. (Size of circles show the size of components. Superposed on band plot). See {\b0\i0\scaps0\f3 ecalj/MATERIALS/MgO_PROCAR/README}, May19.2014\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 4.11  efermi.lmf\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 This is generated by lmf(lmf-MPI), which is used in the job_band.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 4.12  Effective mass calculation\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \sb60 \fi0 
\par New band plot and effective mass calculation (curvature):
\par (see sample at ecalj/MATERIALS/mass_fit_test/ and its README).
\par ------------
\par We now read syml.* in lm7K/fp/bndfp.F. Thus job_band is changed
\par (nspin=1 or nspin=2 is automatically choosed by job_band command).
\par We do not use plbnd anymore. If necessary, you can modify
\par "writeband" subrouitne in lm7K/fp/bndfp.F by yourself.
\par 
\par Follow steps to get effective mass...
\par 1. 
\par New syml read label of k point. It is shown by the gnuscript
\par file "bandplot.glt". Type "gnuplot -p bandplot.isp1.glt" and so on,
\par when you like to remake band plot.
\par 
\par 2. 
\par New syml allow a special input suitable to determine effective mass
\par for semiconductor. An example of new syml is (this is a case of GaAs)
\par ------ syml example start ------------------
\par #NOTE: ndiv2, ninit2 nend2 etolv etolc are for mass mode.
\par #ndiv qleft(1:3) qright(1:3) llabel rlabel  ndiv2 ninit2 nend2 etolv(Ry) etolc(Ry)
\par 5  0 0 0   .5 .5  .5    Gamma  L  257 1   32     0.1 0.01
\par 5  0 0 0    1.  0  0    Gamma  X  
\par 5  0 0 0   .75 .75 0    Gamma  K  257 1   32     0.1 0.01
\par -------  end ----------------------
\par New feature is start from the next columns of symmetry points labels.
\par In this example, 257 means a line connecting 0 0 0 (Gamma) and .5 .5 .5 (L) is divided
\par into 256. Then we only calculate from the 1st point to the 32th point
\par among 257 points.
\par 
\par Then we see not only band*.spin*, but also
\par we have files such as "Band001Syml001Spin1.dat" 
\par files which contains eigenvalues for selected bands, that is,
\par we make a table of detailed plot of energy bands 
\par whose energy E at Gamma (exactly speaking, at
\par left-end point), is evaltop-etolv (Ry) < E < econtop + etolc(Ry).
\par 
\par (As its head line shows, Band*Syml*.dat file contains data
\par  isyml,iq, ib,isp, QPE-EF, QPE-QPE(start), |q|, mass=2*2*(QPE-QPE(start))/|q|**2).
\par  here QPE(start) is QPE at the left-end of sym line.)
\par 
\par This sample is only for Gamma-L and Gamma-K.
\par 
\par Let us use this example for GaA and run job_band.
\par (e.g., job_band gaas -np 2 -vnspin=2 -vso=1; 
\par  note that -vfoobar=xxx replace value of foobar with xxx in ctrl.gaas)
\par Then you can see not only bandplot.isp1.glt.
\par Then you can see usual energy bands plot in addition to the dense energy bands
\par superposed on it. The dense energy bands are controlled by
\par the part "257 1   32     0.1 0.01". In the current version, set all lines
\par of etolv and etolc are the same.
\par 
\par There are useful data, not only the eigenvalues in "Band001Syml*Spin*.mass" 
\par files. But, anyway, we have to determine effective mass from the eigenvalues
\par on the dense symmetry mesh.
\par 
\par 
\par 3. 
\par Least square fit by gnuplot. 
\par 
\par We have an example is at ~/ecalj/MATERIALS/mass_fit_test
\par Look into ./job and run it. 
\par See README in it.
\par ----
\par For your convenience, we have dE/dk in the bnd*.spin* files.
\par This is useful to determine the Fermi surface.
\par See the efermi.lmf to read the Fermi energy.
\par 
\par \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 4.13  density and {|}eigenfunction{{\field{\*\fldinst{ EQ |\\s\\up5({\fs16 2})}}{\fldrslt }}
} plot\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We can generate density and {{\field{\*\fldinst{ EQ  \\i \\su({\i n},, )|{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}})({\i0\scaps0\b r})|\\s\\up5({\fs16 2})}}{\fldrslt }}
} by {\b0\i0\scaps0\f3 --density} mode (after 18mar2016) Usages are {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par >mpirun -np 24  lmf-MPIK si --density 
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 This is for density. We have {\b0\i0\scaps0\f3 smrho.xsf}, and {\b0\i0\scaps0\f3 rho1mt*}(1st components) and {\b0\i0\scaps0\f3 rho2mt*}(2nd components).\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par >mpirun -np 24  lmf-MPIK si --density,iq=1,ib=5
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 {\b0\i0\scaps0\f3 iq=1} means Gamma point. See index shown by the console output of {\b0\i0\scaps0\f3 lmf}. The index {\b0\i0\scaps0\f3 ib} is the band index.\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par >mpirun -np 24  lmf-MPIK si --density,iq=1,ib=5,6,7
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 In this case we have sum for {\b0\i0\scaps0\f3 ib=5,6,7}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Use xcrysden as {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par >xcrysden --xsf smrho.xsf
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Then open menu \rquote Tools{{\field{\*\fldinst{ EQ {\u8594*}}}{\fldrslt }}
}DetaGrid\rquote . Then plot isosurface and/or planes. For example, you need to set isovalue, and/or turn on \rquote display color plane\rquote  buttons.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 4.14  LDA+U\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 There is a document of {\f3 \field{\*\fldinst{ HYPERLINK "file://../BACKUP/MarksOriginalDoc/fp.html\\#ldaplusu" }{{}}}{\fldrslt{file://../BACKUP/MarksOriginalDoc/fp.html\\#ldaplusu}}}. But I include all required things here. Usage is slighly changed. We have examples at \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\b0\i0\scaps0\f3 ~/ecalj/MATERIALS/erasldau,GdNldau}. I am going to add some samples.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To run LDA+U calculaiton, we need two extra steps in addition to usual LDA calculaitons:\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Step.(1) Set three tokens in ctrl file. LDA+U type, Parameters U and J.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Step.(2) Prepare occnum.{\scaps0\b0\i ext} (initial condition of diagonal part of the density matrix).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Let us explain one by one. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b Step.(1)}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 For the point (1), we have a new line in SPEC_ATOM sections. In ecalj/MATERIALS/erasldau, it is {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par        IDU= 0 0 2 2 UH= 0 0 0.1 0.632 JH= 0 0 0 0.055
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The SPEC_ATOM_IDU token tells lmf that no U is to be added to the s or p channels, but that a U is to be added to the d and f channels. IDU=2 specifies LDA+U functional style 2; this is the "Fully Localized Limit" described in Liechtenstein, PRB 52, R5467 (1995)). IDU=1 specifies the "Around Mean Field" functional (Petukhov, PRB 67, 153106 (2003)). U=0.1 Ry is included on the d orbital, and U=0.632 is included on the f orbital. Additionally J=0.055 is put on the f orbital.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b Density matrix:}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 It is stored in {\b0\i0\scaps0\f3 dmats.ext}. In principle, the density-matrix is read from and written to the file {\b0\i0\scaps0\f3 dmats.ext}. Thus, in principle, we need a dmats.ext as an initial condition. However, we usually use diagonal-only density matric occunum.ext instead. If no {\b0\i0\scaps0\f3 dmats.ext}, we read {\b0\i0\scaps0\f3 occnum.eras} instead. We explain it afterwards. Two density-matrices (for each spin) are written to this file in a (2l+1) by (2l+1) block for each l block for which a U is defined. dmats.ext is an ASCII file which you can read, and it\rquote s quite useful to interpret what\rquote s going on. The diagonal parts are the occupation numbers and are the most important. It is in the spherical harmonics (not the real harmonics). The harmonics is defined in the ecaljdetail.tex.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Note that in the LDA case, complete information is contained in the density, stored in file rst.ext. In the LDA+U, the Density-matrix is stored in file dmats.ext. Thus complete information is contained in the combination of rst.ext and dmats.ext.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The density matrix is printed out in the standard output. It can be represented on the real harmonics. To check it, run {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par >lmf eras --quit=dmat
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 . This stops promptly without side effect. Then the symmetrized density matrix represented on the spherical harmonics and real harmonics are shown (we make symmetrization for the given SYMOPS in ctrl file).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\b0\i0\scaps0\f3 Step.(2)}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Usually it is too tedious to supply dmats.ext itself. Instead, you can supply an "occupation numbers" file occnum.ext, which is a starting guess for the density-matrix (its diagonal part). occnum.ext has one line of (2l+1) numbers for the occupation numbers of the first spin, following by a line with the occupation numbers for the second spin. In the case of ecalj/MATERIALS/erasldau, we have occnum.eras.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Er has 11 f electrons, 7 of which go into the majority channel and 4 into the minority channel. There is some choice in which m states to fill and which to keep empty. A key point is that the self-consistent solution you end up with will depend on this choice. The ErAs test uses the following input file for occnum.eras : {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par   0 0 0 0 0
\par   0 0 0 0 0
\par   1 1 1 1 1 1 1
\par   0 1 1 1 1 0 0
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The first and second lines are occupation numbers for the majority and minority d channel; the third corresponds to the majority f channel where all states are taken to be filled. The last line corresponds to the minority f channel. In this case, m=-2,-1,0,1 are filled and m=-3,2,3 are empty. As the script notes, different choices of starting occupation numbers lead to different self-consistent solutions. The one with the lowest energy is that which satisfies Hund\rquote s rule (m=0,1,2,3 filled and m=-3,-2,-1 empty).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 It is possible to use \rquote real harmonics (see ecalj/fpgw/exec/jobpdos for definition)\rquote  instead of \rquote spherical harmonics\rquote . As for occnum.ext, you can use {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par % real
\par   0 0 0 0 0
\par   0 0 0 0 0
\par   1 1 1 1 1 1 1
\par   0 1 1 1 1 0 0
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 . Here {\b0\i0\scaps0\f3 '% real'} means on the basis of real harmonics. Check whether this is correctly supplied or not by {\b0\i0\scaps0\f3 >lmf --quit=dmat eras}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To run with spin-orbit coupling, set HAM_SO=1, then run >grep IORBTM -A20 llmf , here llmf is the standard output of lmf. Then you see orbital moments at \rquote IORBTM\rquote .\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 NOTE for gwsc:\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 When you just like to generate initial condition for gwsc by LDA+U, you have to exit right after sigm generated (add {\b0\i0\scaps0\f3 exit} right after {\b0\i0\scaps0\f3 $echo_run echo == $ix 'iteration over=='} in gwsc). Then gwsc stops right after sigm generated. Then you have to remove or comment out IDU (or set all zero) in ctrl file. Then run lmf together with obtained sigm file. This is because sigm contains LDA+U kind of effect. After this, check energy band (jobband) for check. And run usual gwsc\emdash  then you can perform QSGW with the LDA+U\rquote s initial condition.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 4.15  QSGW after LDA+U\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We modified {\b0\i0\scaps0\f3 lm7K/subs/m_rdctrl.F}(feb2019), so that An option which makes \ldblquote QSGW after LDA+U\rdblquote  easy to run. A line for atom section {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par        IDU=0 0 0 12  UH=0 0 0 .7  JH=0 0 0 0
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 works in ctrl file. Here 12=10+2 instead of 2 means that we set UH=JH=0 when sigm.* exits. Thus we can perform QSGW(without U term) calculaiton, after LDA+U calculaiton. This can be convenient for cases when we control the initial condition of QSGW.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 4.16  partially occupied core-hole\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 See {\f3 \field{\*\fldinst{ HYPERLINK "file://../BACKUP/MarksOriginalDoc/fp.html#ldaplusu" }{{}}}{\fldrslt{file://../BACKUP/MarksOriginalDoc/fp.html#ldaplusu}}} around. Search the keyword ldau in fp/lmfp.F {{\field{\*\fldinst{ EQ {\u8594*}}}{\fldrslt }}
} sudmtu.F which read occnum.gdn.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Core-hole procedure is one of the important procedure. An example setting for Nd case is {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par --------------------------
\par       ATOM=Nd Z=60 R=3.00
\par       C-HOLE=4f C-HQ=-11 P=6.5,6.5,5.5,5.2\u227?\u8364?\u8364?\u227?\u8364?\u8364?<-- this line is added
\par --------------------------
\par \par
}{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
C-HOLE=4f means that 4f core is to set \ldblquote core hole\rdblquote . \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
P=6.5,6.5,5.5,5.2 is to set principle (fractinal) quantum number explicitly for valence electrons. \u227?\u8364?\u8364?To set this, try {\i0\scaps0\b0\f3 lmfa nd\emdash grep conf} first. The you can see the electronic configulation of an atom. Key point here is to set \ldblquote 5.2\rdblquote  for f channel. Thus 4f is treated as core and 5f as valence. Fractional parts (0.2 of 5.2) means the radial funciton contains nodes as 5f and closer to the energy right on the change of 4f to 5f. If 5.9, it is closer to the enrgy almost have noded of 6f. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
C-HQ means that corehole is \u226?\u710?\u8217?\u239?\u188?\u8216?\u239?\u188?\u8216?. Thus we have only 14-11=3 electrons for 4f (spherically occupied). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 4.\tab
Run lmfa. If it does not show that {\b0\i0\scaps0\f3 freeat (warning) atom not neutral}, it is the neutral atom. You can also chage the message tagged by {\b0\i0\scaps0\f3 Add core hole:} Simultaneously you can control initial total valence charge by {\b0\i0\scaps0\f3 Q=...} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 Very recently (aug2019), I fixed a bug of EFERMI(fermi energy for GW calculaiton, given by {\b0\i0\scaps0\f3 fpgw/main/heftet.m.F}) for the case C-HOLE is supplied.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 5  How to run QSGW calculation?\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 In the QSGW, we calculate a {\scaps0\b0\i non-local exchange-correlation potential} {{\field{\*\fldinst{ EQ {\i V}\\s\\up5({\fs16 \i0\scaps0\b0\f0 xc})({\i0\scaps0\b r}\\,{\i0\scaps0\b r}')}}{\fldrslt }}
}, by a procedure of GW calculation (very time-consuming part). Then difference {{\field{\*\fldinst{ EQ {\i V}\\s\\up5({\fs16 \i0\scaps0\b0\f0 xc})({\i0\scaps0\b r}\\,{\i0\scaps0\b r}'){\i V}\u8722?{\i V}\\s\\up({\fs16 \i0\scaps0\b0\f0 LDA,\i0\scaps0\b0\f0 xc})({\i0\scaps0\b r}){\u948*}({\i0\scaps0\b r}\u8722?{\i0\scaps0\b r}')}}{\fldrslt }}
} is stored into {\i0\scaps0\b0\f2 sigm.*} file. The potential file {\b0\i0\scaps0\f3 sigm} is a key to perform QSGW calculations as seen in Fig.{\field{\*\fldinst{\lang1024 REF BMgwscpicture \\* MERGEFORMAT }}{\fldrslt{6}}}. The {\b0\i0\scaps0\f3 sigm} contains static non-local potential {{\field{\*\fldinst{ EQ {\u931*}\\s\\do5({\fs16 \i0\scaps0\b0\f0 QSGW})\u8722?{\i V}\\s\\up({\fs16 \i0\scaps0\b0\f0 LDA,\i0\scaps0\b0\f0 xc})}}{\fldrslt }}
}. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Then, we again do one-body calculation by {\i0\scaps0\b0\f3 lmf} (or {\i0\scaps0\b0\f3 lmf-MPIK}) where we add this sigm to one-body potential ; when we run {\b0\i0\scaps0\f3 lmf} or {\b0\i0\scaps0\f3 lmf-MPIK}(k-parallel mpi version), {\b0\i0\scaps0\f3 sigm} is read and added to the one-body potential if we have {\i0\scaps0\b0\f2 HAM_RDSIG=12} in {\i0\scaps0\b0\f2 ctrl.*}. Thus this means that we replace {{\field{\*\fldinst{ EQ {\i V}\\s\\up({\fs16 \i0\scaps0\b0\f0 LDA,\i0\scaps0\b0\f0 xc})({\i0\scaps0\b r}){\u948*}({\i0\scaps0\b r}\u8722?{\i0\scaps0\b r}')}}{\fldrslt }}
} with {{\field{\*\fldinst{ EQ {\i V}\\s\\up5({\fs16 \i0\scaps0\b0\f0 xc})({\i0\scaps0\b r}\\,{\i0\scaps0\b r}')}}{\fldrslt }}
}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 This iteration cycle is performed by a script \ldblquote gwsc\rdblquote  as we explain later on. (In the default setting of {\b0\i0\scaps0\f3 ctrl.*} file, lmf try to read sigm.* file as long as it exists. If not, do lmf or lmf-MPIK calculation.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To start QSGW calculation by {\i0\scaps0\b0\f3 gwsc}, we need not only {\i0\scaps0\b0\f2 ctrl.si}, but also another input file {\i0\scaps0\b0\f2 GWinput}. Its template {\i0\scaps0\b0\f2 GWinput.tmp} can be generated by the Step.2 as follows.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 As a summary, you have to follow steps below in order to perform QSGW calculation. {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {Step 1.}\tab
Perform from the Step.1 thru the Step.4 (up to lmfa) in Sec.{\field{\*\fldinst{\lang1024 REF BMlm7K_scf \\* MERGEFORMAT }}{\fldrslt{4.5}}}. (as same as the case of LDA/GGA).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 You don\rquote t need to perform LDA calculation in advance, since {\i0\scaps0\b0\f3 gwsc} perform LDA/GGA calculation at its beginning. (It means that we start from the one-body Hamiltonian {{\field{\*\fldinst{ EQ {\i H}\\s\\do5({\fs16 0})}}{\fldrslt }}
} in LDA/GGA as initial condition.In cases, LDA/GGA give poor initial conditions for QSGW; in such a case, we may need another trick to prepare starting point.).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 [Caution: We have to use the same {\b0\i0\scaps0\f3 LMXA} ({{\i l}} in the expansion of eigenfunctions in each MT) for all the MT spheres. (This is due to historical reason; we may need to fix this.)] xxx need to explain {\b0\i0\scaps0\f3 LMA} xxx\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {Step 2.}\tab
{\ul Run the script {\i0\scaps0\b0\f3 mkGWIN_lmf2}.}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 The purpose of this script is to get {\i0\scaps0\b0\f2 GWinput.tmp}. Other files generated are not used in the following stage.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {Step 3.}\tab
{\ul Edit {\i0\scaps0\b0\f2 GWinput.tmp} and save it as {\i0\scaps0\b0\f2 GWinput}}.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 {\i0\scaps0\b0\f2 GWinput} is the input file describing the computational conditions for {{\i G}{\i W}}calculation. Usually, the default setting gives reasonable results. To reduce computational time, we may use {\b0\i0\scaps0\f3 lcutmx(atom)=2} for oxygen sites (this may be also other small atoms.). {\b0\i0\scaps0\f3 grep lcut GWinput -A1} shows {\b0\i0\scaps0\f3 lcutmx} for each atomic sites) These step 2. and step 3. are just only to get {\i0\scaps0\b0\f2 GWinput}.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {Step 4.}\tab
{\ul  Run the script {\i0\scaps0\b0\f3 gwsc}.} \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 {\*\bkmkstart BMGWinput}5.1{\*\bkmkend BMGWinput}  GWinput\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 In order to perform QSGW, one another input file {\b0\i0\scaps0\f3 GWinput} (no extension) is necessary in addition to {\b0\i0\scaps0\f3 ctrl.*}. Thus all input files for QSGW is just two files, ctrl.* and GWinput. A template {\b0\i0\scaps0\f3 GWinput} can be generated by a script {\b0\i0\scaps0\f3 mkGWIN_lmf2}. You may have to modify it in cases for your purpose.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Let us start from ctrls.si; {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par #id  = Si
\par %const bohr=0.529177 a= 5.43095/bohr
\par STRUC
\par      ALAT=\{a\} 
\par      PLAT=0 0.5 0.5  0.5 0 0.5  0.5 0.5 0 
\par SITE
\par      ATOM=Si POS=0.0 0.0 0.0
\par      ATOM=Si POS=0.25 0.25 0.25
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 . Do {\b0\i0\scaps0\f3 ctrlgenM1.py si --tratio==1.0 --nk1=6} and copy ctrlgenM1.ctrl.si to ctrl.si. {\fs18 NOTE: the option {\b0\i0\scaps0\f3 --tratio=1.0} means we use touching MT; this can be checked by {\b0\i0\scaps0\f3 lmchk si}; since defaults is almost unity ({\b0\i0\scaps0\f3 --tratio=0.97}), this is irrelevant, just to explain options.} \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We have to write {\b0\i0\scaps0\f3 GWinput}. The default is given automatically by a command {\b0\i0\scaps0\f3 mkGWIN_lmf2}; {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     $ lmfa si (lmfa is needed to do in advance).
\par     $ mkGWIN_lmf2 si
\par     ......
\par     == Type three integers n1 n2 n3 for Brillowin Zone meshing for GW! ==
\par      n1=
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Then it pause and ask numbers. You have to type three numbers as 2+ return + 2+return+2 return. {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     == Type three integers n1 n2 n3 for Brillowin Zone meshing for GW! ==
\par      n1= 2
\par      n2= 2
\par      n3= 2
\par     2 2 2
\par     ...(skip)...
\par     OK! GWinput.tmp is generated!
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Generated file is {\b0\i0\scaps0\f3 GWinput.tmp}; you have to copy it to {\b0\i0\scaps0\f3 GWinput}. {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     $ cp GWinput.tmp GWinput
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 These \rquote 2 2 2\rquote  you typed is reflected in a section \rquote n1n2n3 2 2 2 \rquote  in {\b0\i0\scaps0\f3 GWinput}. This means 2x2x2 (8 points in 1st BZ). You can edit it, and change it to e.g. \rquote n1n2n3 4 4 4\rquote  if you like to calculate self-energy on dense BZ mesh 8x8x8. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The template of GWinput is usually not so bad. But it may give a little expensive setting (or not very good enough in cases).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 NOTE: GWinput allows some options. Some newer points are {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
For the atoms without 3d involved, you can use lcutmx=2. Typically we use lcutmx=2 for oxygen. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
{\b0\i0\scaps0\f3 GaussianFilterX0 0.0001} given in GWinput is effective to stabilize the convergence for metals. \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 {\*\bkmkstart BMfpgw_calc}5.2{\*\bkmkend BMfpgw_calc}  Run gwsc script\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Let us perform QSGW calculation. For this purpose, we use a script {\b0\i0\scaps0\f3 gwsc}. We need to do {\b0\i0\scaps0\f3 lmfa} in advance. Then do (not need to do {\b0\i0\scaps0\f3 lmf}); {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     gwsc (number of iteration+1) -np (number of nodes) (id of ctrl)
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 If (number of iteration+1)=0, it gives one-shot calculation from LDA. But it is different from the usual one-shot; since it calculates off-diagonal elements of self-energy also, we can plot energy band dispersion. In cases (for usual semiconductors), it can give rather reasonable results in comparison with experiments from practical point of view.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 This is an example of one iteration of QSGW cycle. (now a little different but essentially similar) {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par takao@TT4:~/ecalj/test1$ gwsc 0 -np 2 si
\par gwsc 0 -np 2 si
\par ### START gwsc: ITER= 0, MPI size=  2, TARGET= si
\par --- No sigm nor sigm.$TARGET files for starting ---
\par  ---- goto sc calculation with given sigma-vxc --- ix=,0
\par No sigm ---> LDA caculation for eigenfunctions 
\par         Start  mpirun -np 2 /home/takao/ecalj/TestInstall/bin/lmf-MPIK  si > llmf_lda 
\par OK! --> Start  echo 0| /home/takao/ecalj/TestInstall/bin/lmfgw si > llmfgw00 
\par OK! --> Start  echo 1|/home/takao/ecalj/TestInstall/bin/qg4gw > lqg4gw 
\par OK! --> Start  echo 1|mpirun -np 2 /home/takao/ecalj/TestInstall/bin/lmfgw-MPIK  si> llmfgw01 
\par OK! --> Start  /home/takao/ecalj/TestInstall/bin/lmf2gw >llmf2gw
\par OK! --> Start  echo 0|/home/takao/ecalj/TestInstall/bin/rdata4gw_v2  > lrdata4gw_v2 
\par OK! --> Start  echo 1| /home/takao/ecalj/TestInstall/bin/heftet > leftet 
\par OK! --> Start  echo 1| /home/takao/ecalj/TestInstall/bin/hchknw > lchknw 
\par OK! --> Start  echo 3| /home/takao/ecalj/TestInstall/bin/hbasfp0 > lbasC 
\par OK! --> Start  echo 3| mpirun -np 2 /home/takao/ecalj/TestInstall/bin/hvccfp0 > lvccC 
\par OK! --> Start  echo 3| mpirun -np 2 /home/takao/ecalj/TestInstall/bin/hsfp0_sc > lsxC 
\par OK! --> Start  echo 0|/home/takao/ecalj/TestInstall/bin/hbasfp0  > lbas 
\par OK! --> Start  echo 0| mpirun -np 2 /home/takao/ecalj/TestInstall/bin/hvccfp0  > lvcc 
\par OK! --> Start  echo 1|  mpirun -np 2 /home/takao/ecalj/TestInstall/bin/hsfp0_sc > lsx 
\par OK! --> Start  echo 11|  mpirun -np 2 /home/takao/ecalj/TestInstall/bin/hx0fp0_sc > lx0 
\par OK! --> Start  echo 2|  mpirun -np 2 /home/takao/ecalj/TestInstall/bin/hsfp0_sc  > lsc 
\par OK! --> Start  echo 0|  /home/takao/ecalj/TestInstall/bin/hqpe_sc  > lqpe 
\par OK! --> == 0 iteration over ==
\par OK! --> Start  mpirun -np 2 /home/takao/ecalj/TestInstall/bin/lmf-MPIK  si > llmf_gwscend.0 
\par OK! ==== All calclation finished for gwsc 0 -np 2 si ====
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Here {\b0\i0\scaps0\f3 echo (integer)} is readin in at the beginning of the code. To see it, please look into gwsc script (gwsc is at ecalj/fpgw/exec/ and copied to your bin/ by make install2). In anyway, this console output shows calculations finished normally.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Now we get rst.si and sigm.si file which contains (static version of) self-energy minims {{\field{\*\fldinst{ EQ {\i V}\\s\\up({\fs16 \i0\scaps0\b0\f0 LDA,\i0\scaps0\b0\f0 xc})}}{\fldrslt }}
}. What we did is the one-shot GW from LDA result; but note that we calculate not only diagonal elements but also off-diagonal elements. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We can write energy dispersion (band plot) in the same manner in LDA. To do it, we need rst.si, sigm.si, ctrl.si, QGpsi. (but QGpsi is quickly reproduced). After you have syml.si (e.g. in ecalj/MATERIALS/), Do {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     $ job_band si
\par \par
}{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb300 \fi300  {\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0  \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure {\*\bkmkstart BMsigwscone}3{\*\bkmkend BMsigwscone}: Si, one-shot GW with off-diagonal elements}{\field{\*\fldinst TC "3 Si, one-shot GW with off-diagonal elements" \\f f}{\fldrslt }}\par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 You can observe large band gap as shown in the Fig.{\field{\*\fldinst{\lang1024 REF BMsigwscone \\* MERGEFORMAT }}{\fldrslt{5.2}}}. (To see it again, {\b0\i0\scaps0\f3 gnuplot bnds.gnu.si -p}. All plots are in gnuplot, thus it is easy to replot it as you like).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We have QPU file (and also QPD for spin=2), which contains content of the diagonal part of self-energy. It will be explained elsewhere.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 You can make total DOS and PDOS plot by {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     $ job_tdos si
\par     $ job_pdos si
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 CAUTION:pdos plot is not allowed for so=1. (even tdos\endash > ask to t.kotani.)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 To get final QSGW results, we have to repeat iteration until eigenvalues are converged. Note that total energy shown by console output llmf (and also shown in save file) is not so meaningful in the QSGW; we just take it as an indicator to check convergence. Let us repeat 5 iteration more. "-np 2" means one core to use. {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par $ gwsc 5 -np 2 si
\par ### START gwsc: ITER= 5, MPI size=  2, TARGET= si
\par  --- sigm is used. sigm.$TARGET is softlink to it  ---
\par  ---- goto sc calculation with given sigma-vxc --- ix=,0
\par  we have sigm already, skip iter=0
\par  ---- goto sc calculation with given sigma-vxc --- ix=,1
\par  ...(skeip here) ...
\par 
\par OK! --> == 5 iteration over ==
\par OK! --> Start  mpirun -np 2 /home/takao/ecalj/TestInstall/bin/lmf-MPIK  si > llmf_gwscend.0 
\par OK! ==== All calclation finished for gwsc 0 -np 2 si ====
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Note that we do skip 0th iteration (it is for one-shot from LDA) since we start from rst.si and sigm.si given by one-shot LDA. Thus we do just five iterations. Information of eigenvalues are in {\b0\i0\scaps0\f3 QPU.(number)run} files. (for magnetic systems with nspin=2), wee have {\b0\i0\scaps0\f3 QPD.(number)run} also). Check it by ls; {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     $ ls QPU.*run
\par     QPU0.run  QPU.1run  QPU.2run  QPU.3run  QPU.4run  QPU.5run
\par \par
}(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 These are overwritten when we again repeat gwsc; be careful.) Note that {\b0\i0\scaps0\f3 QPU0.run} was old one when you did 1-shot GW from LDA at the beginning. In anyway *.0run are confusing files; remove them).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 In order to check convergence calculations going well during iteration, do {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par    $ grep gap llmf*
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 This shows how band gap changes in llmf.*run files. In metal cases, we need to compare QPU file, magnetic moment or {\b0\i0\scaps0\f3 grep '[xc] save.*}; this shows end of lmf iteration. Energy is not so meaningful but can be indicator to convergence.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Let us check convergence of the QSGW calculations. For this purpose, it is convenient to take a difference of QPU(QPD) files by a script {\b0\i0\scaps0\f3 dqpu}. These files are human readable. To compare {\b0\i0\scaps0\f3 QPU4.run} and {\b0\i0\scaps0\f3 QPU5.run}, do {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     $ dqpu QPU.3run QPU.4run
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Then we see a list of numbers (these are the differences of values in QPU files). Then it shows at the bottom as {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     Error! Difference>2e-2 between:   QPU.4run   and   QPU.5run  
\par     :  sum(abs(QPU-QPD))= 0.05736
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 but you don\rquote t need to care it so much. You rather need to check the difference of values. I can say most of all difference (especially around the Fermi energy are ) are almost 0.00eV or 0.01eV, we can judge QPEs are converged. If not converged well, you may need to repeat {\b0\i0\scaps0\f3 gwsc} again. (when the size of two QPU files are different, dqpu stops.)\par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300  {\par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0   \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure 4: band plot(Si, QSGW one-shot test) and band(Si) (GGA)}{\field{\*\fldinst TC "4 band plot(Si, QSGW one-shot test) and band(Si) (GGA)" \\f f}{\fldrslt }}\par
}}{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb480 \fi300   \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure 5: band(GaAs), QSGW (test case)}{\field{\*\fldinst TC "5 band(GaAs), QSGW (test case)" \\f f}{\fldrslt }}\par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb360 \fi0 5.3  Spectrum function: How to calculate {{\f5\u9001*}{\i0\scaps0\b q}{\i n}|{\u931*}({\u969*})|{\i0\scaps0\b q}{\i n}{\f5\u9002*}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We have an example at {\i0\scaps0\b0\f3 ecalj/MATERIALS/SiSigma/}, where you can just type {\i0\scaps0\b0\f3 job}. It calls a shell script {\i0\scaps0\b0\f3 gwsigma}, which is just a modification of {\i0\scaps0\b0\f3 gwsc} for spectrum function plotting. If you have {\i0\scaps0\b0\f3 sigm.*}, it will automatically read it as in the case of {\i0\scaps0\b0\f3 gwsc}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 By the script {\i0\scaps0\b0\f3 gwsigma}, we calculate the diagonal elements {{\field{\*\fldinst{ EQ {\f5\u9002*}{\u968*}({\i0\scaps0\b q}\\,{\i n})|{\u963*}\\s\\do5({\fs16 \i0\scaps0\b0\f0 c})({\u969*})|{\u968*}({\i0\scaps0\b q}\\,{\i n}){\f5\u9001*}}}{\fldrslt }}
}. Thus we need to set {{\i0\scaps0\b q}} and band index {{\i n}} for which we calcualte. In addition, we need to set resolution of {{\u969*}}.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {1.}\tab
Set {\i0\scaps0\b0\f3 <QPNT>} section. This section is to set the q point, and band index for which we calculate the self energy. In addition, energy mesh for plotting is set.\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par (A) Set q point set 
\par 
\par    If you set 
\par   ----------
\par   *** all q -->1, otherwise 0;  up only -->1, otherwise 0
\par            1           0
\par   ----------
\par   You will have self-energy for all irreducible k points. This may be needed for A(omega).
\par   or 
\par   You have to set all q points as
\par   ----------
\par   *** q-points, which shoud be in qbz.,See KPNTin1BZ.
\par            3            <--- number of readin q point 
\par   1     0.0000000000000000     0.0000000000000000     0.0000000000000000 <--1st number is irrelevant
\par   2    -0.5000000000000000     0.5000000000000000     0.5000000000000000
\par   3     0.0000000000000000     0.0000000000000000     1.0000000000000000
\par   ----------
\par    To know allowed q points on regular mesh point, run the command "mkGWIN_lmf2", then
\par    supply n1,n2,n3. The templete of GWinput.tmp contains all possible q points. Edit it.
\par   
\par    NOTE:Anyq option can allow you to specify any q points by shifted mesh technique.
\par    (if necessary, but only for some special purpose).
\par 
\par (B) Band index set
\par   It is specified by the section
\par   ----------
\par   *** no. states and band index for calculation.
\par   2
\par   4  5
\par   ----------
\par   means the self-energy for band index 4 and 5. Just two bands.
\par   If you like to plot self energy from 1 through 8, use
\par   *** no. states and band index for calculation.
\par   8
\par   1 2 3 4 5 6 7 8
\par   ----------
\par   If you need 17 bands for example, it should be 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
\par   in addition to 17 (number of bands at the first line).   
\par 
\par 
\par (C) energy mesh set
\par   At the bottom of <QPNT> section, we have
\par   ----------------
\par   *****
\par    0.01 2.0
\par   ----------------
\par    Two real number should be supplied.
\par    These are dwplot and omegamaxin, read in hsfp0.m.F by a line 
\par      read (ifqpnt,*,err=2038,end=2038) dwplot,omegamaxin
\par    dwplot (=0.01 Ry) is mesh for self energy.
\par    omegamaxin=(2.0 Ry) means the range "-2 Ry to 2 Ry" for self-energy plot.
\par 
\par    Note that imaginary part of Sigma is given as the comvolution of ImW(omega) and the pole of Green's function
\par    (esmr in GWinput gives energy smearing of the pole). Resolution for Im W (near omega=0) is by dw in GWinput.)
\par    I think that the reolution of self-energy is ~ 0.05 eV in the default setting.
\par    This is because \{\\tt dw\} \\sim \{\\tt esmr\} \\sim 0.05 eV. 
\par 
\par \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {2}\tab
{\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par   Run gwsigma. This will run 
\par     echo 4| mpirun -np 24 hsfp0,
\par   after dielectric funcition is calculated.
\par   Then we have SEComg.UP (DN) files, Look for file handle, ifoutsec,
\par   for the file in fpgw/main/hsfp0.m.F to see format for the file. 
\par   (not hsfp0.sc.m.F but hsfp0.m.F). Search a line
\par        open(ifoutsec,file='SEComg'//sss) (around hsfp0.m.F L1052)
\par    You can find that we use folloing lines to plot SEComg.*.
\par     ----------------                    
\par            write(ifoutsec,"(4i5,3f10.6,3x,f10.6,2x,f16.8,x,3f16.8)")
\par      &          iw,itq(i),ip,is, q(1:3,ip),  eqx(i,ip,is),
\par      &          (omega(i,iw)-ef)*rydberg(),  hartree*zsec(iw,i,ip) !,sumimg                                                   ----------------                    
\par      This means we use energy in eV. 
\par      iw:      omega index
\par      itq(iq): band index specified by <QPNT>
\par      ip:      k point index specified by <QPNT>
\par      is:      spin index
\par      q:       q vector (cartesian in 2pi/alat)
\par      eqx:     eigenvalue in eV. (I think relative to the Fermi energy)
\par      (omega(i,iw)-ef)*rydberg():  omega relative to the Fermi energy
\par      hartree*zsec(iw,i,ip):       Self energy. real and imaginary part.(complex, two values)
\par 
\par    You can only repeat echo 4| mpirun -np 24 hsfp0 
\par    when you change setting in <QPNT> section.
\par \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {3}\tab
Example. There is an example MATERIALS/SiSigma/ {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par   plot 'SEComg.UP' u ($9):($10) w l,'' u ($9):($11) w l
\par   can give a plot for Re (Sigma_c(omega)) and Im(Sigma_c).
\par 
\par   9th:  energy in eV   (omega(i,iw)-ef)*rydberg()
\par   10th: real part      Re hartree*zsec(iw,i,ip) 
\par   11th: imag part      Im hartree*zsec(iw,i,ip) 
\par \par
}\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 {4}\tab
To get integrated spectrum function (DOS), we need to superpose all the spectrum function (All q points and all band index). Be careful about the degeneracy (multiplicity) for each q points. You have to build it from SEComg file. To know the multiplicity, search following lines ofkeyword {\i0\scaps0\b0\f3 Multiplicity} in the console output of qg4gw (lqg4gw).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 Anyway, consider about \ldblquote is it worth to do?\rdblquote  To confirm your result, use sum rule (sum of spectrum weight). And pay attention to the relation between real and imag parts (Hilbert transformation). \par
}\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 {\*\bkmkstart BMgwsc}6{\*\bkmkend BMgwsc}  gwsc script to perform QSGW\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 6.1  outputs of {\i0\scaps0\b0\f3 gwsc}\par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb300 \fi0   \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure {\*\bkmkstart BMgwscpicture}6{\*\bkmkend BMgwscpicture}: Shell script {\i0\scaps0\b0\f3 gwsc} to perform QS{GW}contains an iteration loop to make sigm (and eigenvalues, eigenfunctions) self-consistent. The iteration loop is written in ecalj/fpgw/exec/gwsc (a bash script). Exactly speaking, we have to pass all the required data (not only eigenvalues and eigenfunctions, but also crystal structure, {\i0\scaps0\b q+G} vectors, symmetry information and so on) to GW part. The purpose of the GW part is to calculate {{\field{\*\fldinst{ EQ {\u931*}\\s\\do5({\fs16 \i0\scaps0\b0\f0 QSGW})\u8722?{\i V}\\s\\up({\fs16 \i0\scaps0\b0\f0 LDA,\i0\scaps0\b0\f0 xc})}}{\fldrslt }}
}.}{\field{\*\fldinst TC "6 Shell script {\i0\scaps0\b0\f3 gwsc} to perform QS{GW}contains an iteration loop to make sigm (and eigenvalues, eigenfunctions) self-consistent. The iteration loop is written in ecalj/fpgw/exec/gwsc (a bash script). Exactly speaking, we have to pass all the required data (not only eigenvalues and eigenfunctions, but also crystal structure, {\i0\scaps0\b q+G} vectors, symmetry information and so on) to GW part. The purpose of the GW part is to calculate {{\field{\*\fldinst{ EQ {\u931*}\\s\\do5({\fs16 \i0\scaps0\b0\f0 QSGW})\u8722?{\i V}\\s\\up({\fs16 \i0\scaps0\b0\f0 LDA,\i0\scaps0\b0\f0 xc})}}{\fldrslt }}
}." \\f f}{\fldrslt }}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 When {\i0\scaps0\b0\f3 gwsc} runs normally, it gives console output as follows. This is a case for {\i0\scaps0\b0\f2 ctrl.gaas} for\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\b0\i0\scaps0\f3 >gwsc 10 -np 24 gaas}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 . Without arguments, typing {\i0\scaps0\b0\f3 gwsc} shows usage as \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\b0\i0\scaps0\f3 >An example of usage: gwsc 5 -np 4 si, where 5 means 5+1 iterations}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 . We recommend you do look into the script {\i0\scaps0\b0\f3 gwsc}. It uses {\i0\scaps0\b0\f2 run_arg}, which is a special subroutine of bash; but not so difficult to understand it. (In the followings, we assume {\i0\scaps0\b0\f2 /home/binx/} is your bin directory at which we have all binaries for ecalj.)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 { {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par ### START gwsc: ITER= 10, MPI size=  24, TARGET= gaas
\par --- No sigm nor sigm.$TARGET files for starting ---
\par  ---- goto sc calculation for given sigma-vxc --- ix=,0
\par No sigm ---> LDA caculation for eigenfunctions 
\par OK! --> Start echo --- | mpirun -np 24 /home/binx/lmf-MPIK gaas > llmf_lda 
\par OK! --> Start echo 0 | /home/binx/lmfgw gaas > llmfgw00 
\par OK! --> Start echo 1 | /home/binx/qg4gw  > lqg4gw 
\par OK! --> Start echo 1 | mpirun -np 24 /home/binx/lmfgw-MPIK gaas > llmfgw01 
\par OK! --> Start echo --- | /home/binx/lmf2gw  > llmf2gw 
\par  ... (preparation stage ends here; start main stage) ...
\par OK! --> Start echo 0 | /home/binx/rdata4gw_v2  > lrdata4gw_v2 
\par OK! --> Start echo 1 | /home/binx/heftet  > leftet 
\par OK! --> Start echo 1 | /home/binx/hchknw  > lchknw 
\par OK! --> Start echo 3 | /home/binx/hbasfp0  > lbasC 
\par OK! --> Start echo 3 | mpirun -np 24 /home/binx/hvccfp0  > lvccC 
\par OK! --> Start echo 3 | mpirun -np 24 /home/binx/hsfp0_sc  > lsxC 
\par OK! --> Start echo 0 | /home/binx/hbasfp0  > lbas 
\par OK! --> Start echo 0 | mpirun -np 24 /home/binx/hvccfp0  > lvcc 
\par OK! --> Start echo 1 | mpirun -np 24 /home/binx/hsfp0_sc  > lsx 
\par OK! --> Start echo 11 | mpirun -np 24 /home/binx/hx0fp0_sc  > lx0 
\par OK! --> Start echo 2 | mpirun -np 24 /home/binx/hsfp0_sc  > lsc 
\par OK! --> Start echo 0 | /home/binx/hqpe_sc  > lqpe 
\par OK! --> Start echo --- | mpirun -np 24 /home/binx/lmf-MPIK gaas > llmf_oneshot 
\par   ... (this is the end of main stage) ...
\par == 0 iteration over ==
\par  ---- goto sc calculation for given sigma-vxc --- ix=,1
\par OK! --> Start echo --- | mpirun -np 24 /home/binx/lmf-MPIK gaas > llmf 
\par OK! --> Start echo 0 | /home/binx/lmfgw gaas > llmfgw00 
\par    ... (lines here omitted ) ...
\par OK! --> Start echo 0 | /home/binx/hqpe_sc  > lqpe 
\par == 1 iteration over ==
\par    ... (lines here omitted ). ..
\par == 2 iteration over ==
\par    ... (this repeat until ITER= 10(the first argument to gwsc) ) ...
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 This shows that {\i0\scaps0\b0\f3 gwsc} invoke {\i0\scaps0\b0\f3 lmf-MPIK,lmfgw,qg4gw,...} successively. {\i0\scaps0\b0\f3 echo\~3{|}hbasfp0 } means running a fortran program {\i0\scaps0\b0\f3 hbasfp0} with the argument \rquote 3\rquote  from the standard input ({\i0\scaps0\b0\f2 read(*,*)} in fortran code). We can divide these successive calls to \ldblquote preparation stage\rdblquote  and \ldblquote main stage\rdblquote . Preparation stage is just to prepare eigenfunctions and so on which are required for the \ldblquote main stage\rdblquote  of GW calculation. At the end of \ldblquote main stage\rdblquote , we have the potential file {\i0\scaps0\b0\f2 sigm}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 As it shows, console output are going to l* files.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb290 \fi0 6.2  \i0\scaps0\b Preparation stage of {\i0\scaps0\b0\f3 gwsc}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b At the end of this stage, we get required eigenfunctions, BZmesh data, and so on, which are required for the main stage. Note that {\i0\scaps0\b echo 0 {|} lmfgw} means supply an integer to the fortran program {\i0\scaps0\b lmfgw} from standard input by read(*,*). {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b0\f3 lmf-MPIK} (k-parallel version of {\i0\scaps0\b0\f3 lmf})\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b This is the one-body calculation for given {\i0\scaps0\b0\f2 sigm.gaas}. At the beginning, we do not have {\i0\scaps0\b0\f2 sigm.gaas}. In this case {\i0\scaps0\b0\f3 lmf-MPIK} just perform LDA/GGA calculation. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b echo 0 {|} lmfgw}: \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b Get some small information files to start {\i0\scaps0\b qg4gw}. If you type just lmfgw, and observe what occurs. It shows a menu and pauses (asking you to supply an integer); then we supply 0 in this case. (If we do {\i0\scaps0\b echo 0 {|} lmfgw}, no pause occurs.) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b echo 1 {|}qg4gw }: Get {{\i0\scaps0\b k}} points used in the {GW}calculations and the corresponding {{\i0\scaps0\b G}} vectors. And what is the irreducible k point (See console output of qg4gw. {\i0\scaps0\b0\f3 gwsc} keeps it in {\i0\scaps0\b0\f2 lqg4gw}).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b Since we use the offset-Gamma method for BZ integration for {G{\u215*}W}, we need shifted mesh points to calculate {W} at offset-Gamma points. The {{\i0\scaps0\b q}} vectors of offset-Gamma method is in {\i0\scaps0\b0\f2 Q0P} file. (If you have two points in {\i0\scaps0\b0\f2 Q0P}, we see two shifted mesh points in addition to regular mesh points.) Remember that cutoff of {{\i0\scaps0\b G}} is given by QpGcut_psi and QpGcut_cou in {\i0\scaps0\b0\f2 GWinput}. (Based on the experiences, we use smaller QpGcut_cou to reduce computational time. Explained in other section xxx). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b echo 1 {|} lmfgw-MPIK} : Calculate the LDA eigenfunctions, eigenvalues, and {{\field{\*\fldinst{ EQ {\f5\u9001*}{\u968*}|V\\s\\up({\fs16 \i0\scaps0\b0\f0 LDA,\i0\scaps0\b0\f0 xc})|{\u968*}{\f5\u9002*}}}{\fldrslt }}
} at the irreducible {{\i0\scaps0\b k}} points (shown at the bottom of output {\i0\scaps0\b0\f2 lqg4gw} of {\i0\scaps0\b0\f3 qg4gw}.) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b lmf2gw}: store these data into {\i0\scaps0\b0\f2 DATA4GW_V2} and {\i0\scaps0\b0\f2 CphiGeig}, whose I/O is controlled by a key subroutine {\i0\scaps0\b gwinput_v2.f}. \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b {\*\bkmkstart BMmainstage}6.3{\*\bkmkend BMmainstage}  \i0\scaps0\b Main stage of {\i0\scaps0\b0\f3 gwsc}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b We can start the main stage of {GW}calculation from these files;\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b {\b0\i0\scaps0\f3 GWinput DATA4GW_V2 CphiGeig QGpsi QGcou Q0P QIBZ SYMOPS BZDATA HAMindex CLASS};\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b these files contains eigenfunctions and so on in the manner of Eq.(17) of 
[{\field{\*\fldinst{\lang1024 REF BIB_kotani_quasiparticle_2014 \\* MERGEFORMAT }}{\fldrslt{2}}}
], eigenvalues and other required information. This is the starting point of the GW calculation.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWinput{\xe{\v \i0\scaps0\b0\f2 GWinput}}} : computational conditions.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} DATA4GW_V2{\xe{\v \i0\scaps0\b0\f2 DATA4GW_V2}}} : Crystal structures and so.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} CphiGeig{\xe{\v \i0\scaps0\b0\f2 CphiGeig}}} : Eigenvalues and Eigenfunctions\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QGpsi{\xe{\v \i0\scaps0\b0\f2 QGpsi}}} : q and G vector for the eigenfunctions(q means {\i0\scaps0\b k} in the previous section),\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QGcou{\xe{\v \i0\scaps0\b0\f2 QGcou}}} : q and G vector for the Coulomb matrix\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} Q0P{\xe{\v \i0\scaps0\b0\f2 Q0P}}} : q points near q=0 instead of q=0 (offset Gamma points)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QIBZ{\xe{\v \i0\scaps0\b0\f2 QIBZ}}} : irreducible q points (This is also contained in {\i0\scaps0\b0\f2 BZDATA}).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} SYMOPS{\xe{\v \i0\scaps0\b0\f2 SYMOPS}}} : point group operation\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} BZDATA{\xe{\v \i0\scaps0\b0\f2 BZDATA}}} : q points date (and tetrahedron weights if necessary) for BZ integrals.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} HAMindex{\xe{\v \i0\scaps0\b0\f2 HAMindex}}} : Hamiltonian index, all required complex index for Hamiltonian of PMT method. (See the top of {\i0\scaps0\b0\f2 subroutine write_hamindex} in {\i0\scaps0\b0\f2 lm7K/subs/m_hamindex.F}. This is also in {\i0\scaps0\b0\f2 fpgw/gwsrc/m_hamindex.F}. Identical files are in two different directory\emdash  it should be avoided in future.)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} CLASS{\xe{\v \i0\scaps0\b0\f2 CLASS}}} : class information or atomic sites (equivalent sites).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b With these files, we do the main stage as\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b rdata4gw_V2}: Read {\i0\scaps0\b0\f2 DATA4GW_V2} and so on, and decompose it into files required in the followings. And calculate PPOVL* files (overlap matrix of interstitial plane waves. Because of technical reasons some different types of PPOVL* with {\i0\scaps0\b q}-point index). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b heftet }: Get the Fermi energy {\i0\scaps0\b0\f2 EFERMI} by tetrahedron method. It is used in {\i0\scaps0\b hx0fp0}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b hchknw }: stores the number of required {{\u969*}} points along real-axis into {\i0\scaps0\b0\f2 NW}. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b {\fs18 ({\i0\scaps0\b0\f2 NW} is not essentially used, but is supposed to exist in the followings.)} \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b echo 3{|}hbasfp0}: gives the product basis for Core exchange. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b echo 0{|}hvccfp0}: gives the Coulomb matrix for the Core exchange. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b echo 3{|}hsfp0_sc }: gives the Core exchange part of the self-energy. {\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} Correlation part due to cores is neglected. In future, we will switch to a version without PB for core part to reduce computational time and for numerical accuracy.}
 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b echo 0{|}hbasfp0}: gives the product basis. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b echo 0{|}hvccfp0}: gives the Coulomb matrix {v}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b echo 1{|}hsfp0_sc }: gives the exchange part of the self-energy. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b echo 11{|}hx0fp0_sc }: gives the correlated part of the screened Coulomb interaction {W\u8722?v}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b echo 2{|}hsfp0_sc }: gives the correlated part of the self-energy. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b echo 0{|}hqpe_sc}: gather data and write down final results into {\i0\scaps0\b0\f2 sigm}, {\i0\scaps0\b0\f2 QPU}, {\i0\scaps0\b0\f2 TOTE.UP} files. \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb520 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 6.4  \i0\scaps0\b Other functions (or scripts)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b In addition to {\i0\scaps0\b gw_lmfh}, there are some other additional scripts and functions.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b gw_lmfh} : The one-shot {GW}calculation. Lifetime(impact ionization rate) of QPs.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b gwsc} : QSGW calculation explained here\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b  epsPP_lmfh, eps_lmfh} : Dielectric function without or with local-field effects.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
run-mode 4 of {\i0\scaps0\b hsfp0}: to plot the spectrum function {{\u931*}({\u969*})}.(need to be fixed again probably). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b epsPP_lmfh_chipm} : non-interacting spin susceptibility. One-degree of freedom like Rigid moment approx. After it ends, you need to do {\b0\i0\scaps0\f3 calj_nlfc_metal} and/or {\b0\i0\scaps0\f3 calj_summary_mat} to get the full spin susceptibility.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b \bullet\tab
{\i0\scaps0\b genMLWF} : Wannier funciton and its matrix elements of the Screened Coulomb interaction.\par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb340 \fi0 7  Usage problems, QandA error messages.\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \sb60 \fi0 
\par 1.Bandplot for FSMOMMETHOD/=0 
\par   Even when you use FSMMOMMETHOD/=0 in GWinput for gwsc, 
\par   you need to set FSMOMMETHOD=0 (or comment it out) when you run job_band_nspin2.
\par   [If you run job_band_nspin2 with FSMOMMETHOD/=0, it make a shift 
\par   (adding bias magnetic field).]
\par 
\par 2.Note that ctrlgenM1.py automatically set this for --systype=molecule.
\par    Then we have 
\par        TETRA=0
\par        N=-1  #Negative is the Fermi distribution function W= gives temperature.
\par        W=0.001 #W=0.001 corresponds to T=157K as shown in console
\par    In addiiton, FSMOM (n_up-n_down) is needed (FSMOMMETHOD=1)if we
\par    have magnetic moment.
\par 
\par 3. core>evalence message.
\par    Ecore is grater than Evalence.
\par    For save, we do not allow this.
\par    Complare ECORE file and valence levels, shown in log file or
\par    console output.
\par 
\par 4. If you see a error message from lmf (e.g., internally called in the gwsc script).;
\par   Exit -1 rdsigm: Bloch sum deviates more than allowed tolerance (tol=5e-6)
\par   You have to enlarge RSRNG so that lmf finsh normally.
\par 
\par 5. Back ground charge and fractional Z.
\par    You can use fractional numbers for ATOM_Z, and also can set
\par    valence charge by BZ_ZBAK (I removed BZ_VAL).
\par    You see console out put, e.g,
\par      "Charges:  valence    19.80000   cores     8.00000   nucleii   -28.00000
\par         hom background       .20000   deviation from neutrality:      0.00000
\par    . This is a case with BZ_ZBAK=.2.
\par 
\par    NOTE: at the first iteration, Charges: shows such as
\par      Charges:  valence     8.00000   cores    20.00000   nucleii   -28.00000
\par       hom background     0.12300   deviation from neutrality: 0.12300
\par       because of the initial condition by superposition of atoms. It show
\par       deviation seems nonzero. But charge should be conserved from the
\par       next iteration.
\par 
\par 6. Not converged in metal. --->mixing may help
\par    For example, if you try metal such as Bi2Sr2CuO6, it may fail at LDA/GGA level.
\par    Then use ITER MIX=A2,b=.2. or something (.2 means it only mix 20% of output to give
\par   new input for next iteration). Then I see convergence. (b is the
\par    mixing parameter.
\par 
\par 7. Use PZ or not.
\par    If spillout of core is not so small (more then 0.05 or something.),
\par    it is better to use PZ(lo). Treat the core as valecne.
\par    Bi4d is such a case. Maybe use PZ=0,0,4.9
\par 
\par 8. Core treatment 
\par    See 10.1103/PhysRevB.76.165106 (Eq.35 and after).
\par    Now I usually not use CORE2 (CORE1 only).
\par 
\par 9. ERROR EXIT! rgwina: 2nd wrong l valence
\par    This may be because you use wrong GWinput.
\par    Back it up. And run mkGWIN_lmf2 (any n1 n2 n3 is fine).
\par 
\par 10. Known bug.
\par     Error occurs when system is anisotroic such as CuAlTe2. 
\par     Temporary fix is "Add token NPWPAD=100 in HAM category".
\par     (guess of used APW fails (more than expected)).
\par     CuAlTe2,CuGaTe2 cases.
\par 
\par 11. Known bug
\par     a little unstable when metal GGA, especially when we have large empty regions.
\par \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 {\*\bkmkstart BMcautionusage}8{\*\bkmkend BMcautionusage}  Cautions for usage\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
== not meaningful total energy in QSGW===\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Total energy shown in QSGW mode in current version is not meaningful. (just treat as an indicator to convergence).\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
== Do we use VWN or GGA for QSGW? ===\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 In principle, QSGW results should not depends on VWN or GGA (XCFUN=1 or 103 in ctrl). But there is minor dependence, because\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 1. frozen core density.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 2. core eigenfunctions.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 3. radial basis functions\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 4. Slight numerical reason \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 (This is probably because Sigma-interpolation procedure But not exactly figured out yet {{\field{\*\fldinst{ EQ {\u8594*}}}{\fldrslt }}
} affect about 0.02eV as for band gap for GaAs. ). In anyway, use VWN (HAM_XCFUN=1) as standard. And such technical things affects, 0.05 eV level of error for band gap.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
{EH and EH2} : For si, if EH and EH2 are the same, the following error occurred. {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par  fexit,fexit2,fexit3 error retval=          -1
\par  Exit -1 zhev_tk2: nev /=nevx something wrong.
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 The large EH, EH2 get to be meaningless. We usually use up to {{\f5\u8764*}2}. (If you use very large EH such as E{{\f5\u8764*}10}, I am not so sure weather it is )\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 4.\tab
{ The options about the product basis within MT. (SeungWoo\rquote s memo)}\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par <PRODUCT_BASIS>
\par  tolerance to remove products due to poor linear-independency
\par   0.100000D-02 ! =tolopt
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 When the product basis are made, we may have poorly linear independent basis. For example, one in the set \{{{\field{\*\fldinst{ EQ {\i f}\\s\\do5({\fs16 1})\\,{\i f}\\s\\do5({\fs16 2})\\,...\\,{\i f}\\s\\do5({\fs16 {\i n}})}}{\fldrslt }}
}\} would be almost give by a linear-combination of others. We need to make the linear-independent set. Therefore, after calculating the overlap matrix {{\field{\*\fldinst{ EQ {\f5\u9001*}{\i f}\\s\\do5({\fs16 {\i i}})|{\i f}\\s\\do5({\fs16 {\i j}}){\f5\u9002*}}}{\fldrslt }}
}. We do diagonalization, then we remove eigenvectors corresponding to small eigenvalues than {\b0\i0\scaps0\f3 tolopt}. See the {\i0\scaps0\b hbasfp0} command in {\i0\scaps0\b gwsc}\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par lcutmx(atom) = maximum l-cutoff for the product basis.
\par   4  4  4  2  2  4  4
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 For {{\field{\*\fldinst{ EQ {\u966*}\\s\\do5({\fs16 1}){\u215*}{\u966*}\\s\\do5({\fs16 2})}}{\fldrslt }}
} case, {{\field{\*\fldinst{ EQ |{\i l}\\s\\do5({\fs16 1})\u8722?{\i l}\\s\\do5({\fs16 2})|{\u8804*}{\i l}\\s\\do5({\fs16 {\i t}{\i o}{\i t}}){\u8804*}|{\i l}\\s\\do5({\fs16 1})+{\i l}\\s\\do5({\fs16 2})|}}{\fldrslt }}
}. So \lquote lcutmx\rquote  changes the maximum cutoff for the l{{\field{\*\fldinst{ EQ \\s\\do5({\fs16 {\i t}{\i o}{\i t}})}}{\fldrslt }}
}. The order is the same as the order of atoms in the {\i0\scaps0\b ctrl} file.\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par   atom   l  nnvv  nnc !
\par     1    0    3    3
\par     1    1    3    2
\par     1    2    2    1
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 \lquote atom\rquote  means the atom number identified in the {\i0\scaps0\b ctrl} file.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \lquote l\rquote  is the angular momentum quantum number.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \lquote nnvv\rquote  is the number of radial functions (valence) on the augmentation-waves.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \lquote nnc\rquote  is the number of radial functions for core.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 The latter two ones, \lquote nnvv\rquote  and \lquote nnc\rquote , will be understood more clearly if you see the following ones.\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par   atom   l    n  occ unocc  ! Valence(1=yes,0=no)
\par     1    0    1    1    1   ! 5S_p  -----
\par     1    0    2    0    0   ! 5S_d
\par     1    0    3    1    1   ! 4S_l
\par     1    1    1    1    1   ! 5p_p
\par     1    1    2    0    0   ! 5p_d
\par     1    1    3    1    1   ! 4p_l
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 Above options are about the product basis set within MT (Valence).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \lquote atom\rquote  and \lquote l\rquote  are explained above. \lquote nnvv\rquote  for \lquote atom = 1 and l = 0\rquote  was \lquote 3\rquote  so this case we have 3 basis (\lquote n = 1, 2, 3\rquote )\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \lquote n\rquote  is the degree of freedom of the radial function, {{\u966*}}. \lquote n = 1\rquote  means {{\u966*}}, \lquote n = 2\rquote  means {{\f5\u775.}{\u966*}}, and \lquote n = 3\rquote  means kind of {{\f5\u776.}{\u966*}}, which the dot above the letter represents the differentiation with respect to the energy. So \lquote n = 1 and 2\rquote  is related to the linearization of the radial function and \lquote n = 3\rquote  is the local orbital which is restricted in MT. The local orbital can be modified changing \lquote PZ\rquote  in the {\i0\scaps0\b ctrl} file. Finally, the number of the basis set which is needed for expanding eigenfunctions is {{\field{\*\fldinst{ EQ ({\i l}+1)\\s\\up5({\fs16 2}){\u215*}{\i n}}}{\fldrslt }}
}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \lquote occ\rquote  and \lquote unocc\lquote  mean that we use only ones that checked as \lquote 1\rquote , in other words we neglects \lquote 0\rquote  cases for making product basis. Be careful for confusion with name \lquote occ\rquote  and \lquote unocc\rquote . These don\rquote t mean that occupied or unocc. When making product basis, {{\field{\*\fldinst{ EQ {\i M}={\u966*}\\s\\do5({\fs16 1}){\u215*}{\u966*}\\s\\do5({\fs16 2})}}{\fldrslt }}
}, \lquote occ\rquote  corresponds to {{\field{\*\fldinst{ EQ {\u966*}\\s\\do5({\fs16 1})}}{\fldrslt }}
} and \lquote unocc\rquote  to {{\field{\*\fldinst{ EQ {\u966*}\\s\\do5({\fs16 2})}}{\fldrslt }}
}. For example, {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par   atom   l    n  occ unocc  ! Valence(1=yes,0=no)
\par     1    0    1    1    1   ! 5S_p  -----
\par     2    3    1    0    1   ! 4f_p
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 If the options are like the above, the product basis will be consists of ({{\field{\*\fldinst{ EQ {\u966*}\\s\\do5({\fs16 1})={\u966*}\\s\\do5({\fs16 {\i a}{\i t}{\i o}{\i m}=1\\,{\i l}=0})){\u215*}({\u966*}\\s\\do5({\fs16 2})={\u966*}\\s\\do5({\fs16 {\i a}{\i t}{\i o}{\i m}=1\\,{\i l}=0}))}}{\fldrslt }}
}, ({{\field{\*\fldinst{ EQ {\u966*}\\s\\do5({\fs16 {\i a}{\i t}{\i o}{\i m}=1\\,{\i l}=0}){\u215*}{\u966*}\\s\\do5({\fs16 {\i a}{\i t}{\i o}{\i m}=2\\,{\i l}=3})}}{\fldrslt }}
}). As you can see, ({{\field{\*\fldinst{ EQ {\u966*}\\s\\do5({\fs16 1})={\u966*}\\s\\do5({\fs16 {\i a}{\i t}{\i o}{\i m}=2\\,{\i l}=3})}}{\fldrslt }}
}) is skipped.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 In the {\i0\scaps0\b ctrl} file, \lquote EH\rquote  controls the l part. As for \lquote EH\rquote , (s, p, d, f) are used but {\i0\scaps0\b GWinput} file uses (s, p, d, f, g). \lquote EH\rquote  : HEAD part. \lquote GWinput\rquote  : contains TAIL part... need more explanation.\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par   atom   l    n  occ unocc  ForX0 ForSxc ! Core (1=yes, 0=no)
\par     1    0    1    0    0      0    0    ! 1S -----
\par     1    0    2    0    0      0    0    ! 2S
\par     1    0    3    0    0      0    0    ! 3S
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 Above options are about the product basis set within MT (Core).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \lquote nnc\rquote  for \lquote atom = 1 and l = 0\rquote  was \lquote 3\rquote  so this case we have 3 basis (\lquote n = 1, 2, 3\rquote )\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 Finally, for the convergence check, we can modify the following three things, (i) tolerance, (ii) lcutmx, and (iii) occ and unoccu.\par
}{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \sb100 \fi0 
\par 
\par 
\par == one show QSGW (not one-shot GW) ==
\par   one-shot QSGW can be useful in cases.
\par   As it contains off-diagonal part, we can resolve band tanglement
\par   problem in Ge (no band gap).
\par 
\par == Restart calculation in lda ==
\par  lmf(lmf-MPIK) read rst.* in defaluts.
\par  rst contains electron density.
\par  If rst is already converged, it stops after two iteration.
\par  rst contains atomic positions.
\par  So, in order to read atomic positions change in ctrl,
\par  Use options shown in lmf --help.
\par 
\par == Restart calculation in qsgw ==
\par   To remove mixsigm* (mixing for sigm), maybe required.
\par 
\par == iteration check ===
\par   First, watch console output of gwsc (do redirect to output file)
\par   Need to check OK! signs arrayed on 1st columns.
\par 
\par   gwsc iteration is time cosuming,
\par   So we need to check calculations are normally going on or not.
\par 
\par   Memory inefficiency.
\par   Set 'KeepEigen off' an 'KeepPPOVL' off.
\par   In fact, out code is still inefficient for memory usage.
\par   
\par   grep gap llmf ---> minimum gap at mesh point.
\par   see save.* ,or grep '[xc] ' save.*
\par   the end of iteration of lmf is shown as x or c.
\par   (if failed, QPU file. 
\par   dqpu QPU.4run QPU.3run
\par   As for usual semi-conductor, accuracy abou t0.1 eV is limit of current implementation.
\par   Set vwn (xcfun=1) looks better (stable) for GW.
\par 
\par   $grep rms lqpe* 
\par   shows
\par            ...  rmsdel=2.44D-04
\par            ...  rmsdel=4.91D-03
\par            ...   rmsdel=2.44D-04
\par            ...   rmsdel=3.37D-04
\par   If rsmdel is getteing to be smaller, it is on convergence path.
\par   (but in magnetic cases, it may give be too good even not yet going to
\par  be converged..., beccause magnetic energy is so small)
\par 
\par   grep diffe llmf  ---> difference of energies of each iteration.
\par 
\par   ehf (harris energy)
\par   ehk (Hohenberg kohn energy)
\par 
\par == emax cutoff for APWs. ==
\par   We can not use so many APWs in current version,
\par   because of overcompleteness (this is because null vector within MTs), 
\par   In anyway, use pwemax=3 as standard (test it with 4 or 5).
\par   To avoid failure of calculation, we may use smaller MT radius for
\par   alkali, and alkali-earth elements. 
\par   In feature, I think we can introduce pseudopotentials for these atoms only.
\par 
\par == Check Used MTO 
\par  Near beginig of console output, what MTO you use is shown as: (GaAs case).
\par  sugcut:  make orbital-dependent reciprocal vector cutoffs for tol= 1.00E-06
\par  spec      l    rsm    eh     gmax    last term    cutoff
\par   Ga       0*   1.13  -1.00   6.579    1.19E-06    1459
\par   Ga       1*   1.13  -1.00   7.028    1.26E-06    1807
\par   Ga       2*   1.13  -1.00   7.475    1.09E-06    2109
\par   Ga       3    1.13  -1.00   7.920    1.06E-06    2637
\par   Ga       0*   1.13  -2.00   6.579    1.19E-06    1459
\par   Ga       1*   1.13  -2.00   7.028    1.26E-06    1807
\par   Ga       2    1.13  -2.00   7.475    1.09E-06    2109
\par   As       0*   1.18  -1.00   6.300    2.13E-06    1243
\par   As       1*   1.18  -1.00   6.720    1.26E-06    1471
\par   As       2*   1.18  -1.00   7.140    1.37E-06    1837
\par   As       3    1.18  -1.00   7.558    1.05E-06    2229
\par   As       0*   1.18  -2.00   6.300    2.13E-06    1243
\par   As       1*   1.18  -2.00   6.720    1.26E-06    1471
\par   As       2    1.18  -2.00   7.140    1.37E-06    1837
\par 
\par == gwsc cause error stop.
\par  Have you ever changed MTO setting? Consistent with GWinput?
\par 
\par == QSGW for Fe.
\par   It is better to use 3p as core. Furthermore, 3d+4d as valence is better. 
\par   Thus we need to set PZ=0,3.9,4.5
\par   I also got aware that emax_sigm should be large enough (4$\\sim$5 Ry) 
\par   to have smooth band dispersion. n1n2n3 can be 10x10x10.
\par 
\par == RSRNGE: enlarge RSRNGE ===
\par   Use RSRNGE=10 or so (in cases, RARNGE=20 or more is required), 
\par   for large number of k points. Try and enlarge it if it fails with a
\par   message "Exit -1 rdsigm: Bloch sum deviates more than allowed tolerance (tol=5e-6)".
\par   We will have to make it automatic in future.
\par   Detailed memo (for deverlopers) is at the bottoem of ecalj/Document/BACKUP/MarksOriginalDoc/gw.html.
\par 
\par == Q0P check
\par    In cases, it is better to use Q0Pchoice=2 instead of default Q0Pchoice=1.
\par    (For slabs, Q0Pchoice=2 may be better; need check more. In anyway,
\par     it is problematic to use unbalanced k points for anisotropic cell).
\par     See Copmuter Physics Comm. 176(2007)1-13).
\par 
\par === When calculation in LDA level fails ===
\par when calculation fails in LDA level.
\par   (1) smaller MT
\par   (2) fewer PW. smaller pwemax.
\par   (3) core as semicore.
\par 
\par 
\par === LDA+U ===
\par not yet written...
\par 
\par === MAE by rotating crystal ===
\par (we have a sample at lm7K/TESTsmaples/MAEtest/, but only in GGA/LDA).
\par 
\par === spin wave ===
\par J calculation.
\par 
\par 
\par ====
\par If not stable convergence in gwsc, try to set
\par mixbeta 0.5
\par (and/or mixpriorit 3 or something)
\par at the begining of sigma.
\par 
\par 
\par =======
\par cleargw (directory):
\par This command clean up up intermediate files under (directory).
\par This recursively into deeper level. Be careful, or edit it.
\par I use it as '>cleargw .'
\par 
\par 
\par 
\par ------------------------------------
\par Magnetic moment within MTs are shown as
\par ------------------------------------
\par  charges:       old           new     
\par  smooth      17.240314     17.240740   ...
\par  mmom         0.000024     -0.000010   
\par  site    1    6.207135      6.206590  
\par  mmom         1.062276      1.062991  <--- here
\par  site    2    6.207115      6.206834  
\par  mmom        -1.062323     -1.062958  <--- here
\par  site    3    1.172718      1.172918  
\par  mmom         0.000011     -0.000011  
\par  site    4    1.172718      1.172918  
\par  mmom         0.000011     -0.000011  
\par In this case, MTsite1 has 1.062991 and MTsite2 has -1.062958.
\par >grep 'lin mix' -A30 llmf 
\par can take out this message (if console output is in llmf).
\par 
\par 
\par -----------------------------
\par ORBITAL MOMENT in pertubation:
\par -----------------------------
\par Try 
\par >lmf nio --rs=1,0 -vso=1 --quit=band >llmf
\par After converged, try
\par >grep IORBTM -A20 llmf
\par Then llmf shows shows orbital moment in first order perturbation.
\par (Here --rs=1,0 read rst.* file but not change it. See >lmf --help.
\par --quit=band means quit just after band calculation.)
\par 
\par == EPS mode,
\par   Check Im part of chi0 is smoothly damping at high energy (typically
\par   1Ry or larger enengy range). If there is some large Im part remains,
\par   something strange (usually due to orthogonality problem of
\par   eigenfunctions when you set low q).
\par 
\par    Related source codes are in ecalj/lm7K/ .
\par    A command ecalj/lm7K/ctrlgenM1.py can generate 'standard input file (ctrl file)' 
\par    just from a given crystal structure file called as ctrls file. 
\par    Binaries are lmf and lmf-MPIK (MPI k-parelell verion).
\par 
\par \par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 8.1  lmf \endash help\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 lmf \endash help show option of \endash rs=(five numbers); this let lmf know how to read atm.* file which is the initial atom file by lmfa.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 9  Wannier function \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We can generate Wannier functions (maximally localized Wannier Functions or similar) by a script {\i0\scaps0\b0\f3 genMLWF}. It automatically perform cRPA calculation sucessively. (If it is not necessary, insert \rquote exit\rquote  in {\i0\scaps0\b0\f3 genMLWF}, after it performs {\b0\i0\scaps0\f3 lmaxloc2}).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Try to run examples in {\b0\i0\scaps0\f3 ecalj/MATERIALS/Sample_MLWF/}. Read {\b0\i0\scaps0\f3 README} in it. To run the script {\i0\scaps0\b0\f3 genMLWF}, we need to get {\b0\i0\scaps0\f3 GWinput} by editing {\b0\i0\scaps0\f3 GWinput.tmp}. ({\b0\i0\scaps0\f3 mkGWin_lmf2} contains default Wannier section). In addition, we have some settings (energy windows and so on). This is the example of the initial conditions for Cu case. 5 is the number of Wannier function. The most left one means {{\u966*}} index and the right one of it is {{\f5\u775.}{\u966*}} index. They are written in the {\i0\scaps0\b @MNLA_CPHI} file.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Then we can run {\i0\scaps0\b0\f3 genMLWF}. After it finished, we can analyze it results. (if you don\rquote t need Wannier funciton plot, You can skip a line of wanplot in genMLWF. Then we don\rquote t need to set {\b0\i0\scaps0\f3 vis_wan_*} options.)\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 9.1  lwmatK1 and lwmatK2\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 If you input the following command {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par >grep Wan lwmatK*
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 You will get the following results. (This case : Cu cases) {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par lwmatK1:  Wannier    1    1   24.644475    0.000000 eV
\par lwmatK1:  Wannier    1    2   24.644576    0.000000 eV
\par lwmatK1:  Wannier    1    3   25.471361    0.000000 eV
\par lwmatK1:  Wannier    1    4   24.644575    0.000000 eV
\par lwmatK1:  Wannier    1    5   25.470946    0.000000 eV
\par lwmatK2:  Wannier    1    1    0.000000 eV   -21.263759   -0.000000 eV
\par lwmatK2:  Wannier    1    2    0.000000 eV   -21.263839    0.000000 eV
\par lwmatK2:  Wannier    1    3    0.000000 eV   -21.931033   -0.000000 eV
\par lwmatK2:  Wannier    1    4    0.000000 eV   -21.263839   -0.000000 eV
\par lwmatK2:  Wannier    1    5    0.000000 eV   -21.930702   -0.000000 eV
\par \par
}{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \sb60 \fi0 
\par 
\par ### Wanneir Branch now under developing (imported from T.Miyake's Wannier and H.Kino's).
\par    A. make at ecalj/fpgw/Wannier/ directory, and do make, and make install. 
\par       (need to check Makefile first). You first have to install fpgw/exec/ in advance.
\par    B. Samples are at these directories. 
\par       MATERIALS/CuMLWFs (small samples),
\par       MATERIALS/CuMLWF/
\par       MATERIALS/CuMLWFs/
\par       MATERIALS/FeMLWF/      
\par       MATERIALS/NiOMLWF/
\par       MATERIALS/SrVO3MLWF/
\par    C. With GWinput and ctrl.*, run 
\par       >genMLWF
\par       at these directories.
\par       In GWinput, we supply settings to generate Wannier funcitons. (Sorry,not documentet yet..)
\par    D. After genMLWF, do
\par       >grep Wan lwmatK*
\par       then compare these with Result.grepWanlwmatK
\par       These are onsite effective interactions (diagonal part only shown).
\par       *.xsf are for plotting the Maximally localized Wannier funcitons.
\par Anyway, documentaion on Wannier is on the way half.
\par Time consuming part (and also the advantage) is for effective interaction in RPA.
\par Look into the shell script genMLWF; you can skip last part if you don't need the effective interaction.
\par 
\par \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 10  ctrl file details\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 A ctrl file is usually generated from a ctrls file by the {\b0\i0\scaps0\f3 ctrlgenM1.py} (a crystal structure file is not \ldblquote ctrl\rdblquote  but \ldblquote ctrls\rdblquote .). It contains self explanation. Here we give complementary explanations to it. Let us Look into a ctrl file. This is a head part of {\b0\i0\scaps0\f3 ctrl.cu} generated by ctrlgenM1.py: {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     ### This is generated by ctrlgenM1.py from ctrls 
\par     ### For tokens, See Document/Manual/CategoryAndToken.org.
\par     ### Do lmf --input to see all effective category and token ###
\par     ### It will be not so difficult to edit ctrlge.py for your purpose ###
\par     VERS    LM=7 FP=7        # version check. Fixed.
\par     IO      SHOW=T VERBOS=35 TIM=2,2
\par                  # SHOW=T shows readin data (and default setting at the begining of 
\par     console output)
\par                  # It is useful to check ctrl is read in correctly or not
\par                    (equivalent with --show option).
\par                  # larger VERBOSE gives more detailed console output.
\par     SYMGRP find  # 'find' evaluate space-group symmetry automatically.
\par                  # Usually 'find is OK', but lmf may use lower symmetry
\par     ...
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Note that {\b0\i0\scaps0\f3 #} means comment lines. We can also use lines starting from {\b0\i0\scaps0\f3 % const ...} to define variables and set constant.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We see \ldblquote categories\rdblquote  such as {\b0\i0\scaps0\f3 VERS}, {\b0\i0\scaps0\f3 IO}, and so on. The beginning of categories are starting from the first column. Under categories, we have "tokens" such as {\b0\i0\scaps0\f3 VERBOSE}. Thus we specify full name of token {\b0\i0\scaps0\f3 VERBOSE} under category {\b0\i0\scaps0\f3 IO} as {\b0\i0\scaps0\f3 IO_VERBOSE}.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\b0\i0\scaps0\f3 IO_TIM} is for debugging. It shows which subroutines are called and so on. Bigger number shows deeper subroutines.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\b0\i0\scaps0\f3 SYMGRP} is a category without token under it; we set generators of space group (See explanation in previous paragraph). When we set {\b0\i0\scaps0\f3 find}, it automatically calculate symmetry of crystal lattice. If we like to enforce symmetry, set some of generators which are shown by lmchk.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
We see {\b0\i0\scaps0\f3 ctrls} is embedded in the {\b0\i0\scaps0\f3 ctrl} by {\b0\i0\scaps0\f3 ctrlgenM1.py}. {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par     ... (skip) ...
\par     % const  da=0 alat=6.798
\par     STRUC   ALAT=\{alat\} DALAT=\{da\}
\par             PLAT=  0.0 0.5 0.5  0.5 0.0 0.5   0.5 0.5 0.0
\par             NL=4 NBAS= 1  NSPEC=1
\par     SITE    ATOM=Cu POS=0 0 0
\par     ... (skip) ...
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 NL, NBAS(number of SITE) and NSPEC(number of SPEC) are automatically added by ctrlgenM1.py. It is possible to deform unit cell by adding some optional tokens under STRUC category. Search STRUC in an old document (which may be still effective) BACKUP/MarksOriginalDoc/lmto.html. However, it is a little complicated. For new calculations, it is better to find some examples first.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b SITE} category: As for MT sites, we have two categories. (1)SPEC(species) and (2)SITE(specify centers of atoms(species) in primitive cell). As for SPEC, we specify MTs(radius, Z, MTOs on it) appeared in the cell. These are defined subtokens under SPEC_ATOM=foobar (we have multiple SPEC_ATOM=foobar).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 Then we place these MTs at SITE sections in the cell. At SITE, we specify atomic sites (What SPEC_ATOM is placed to positions by POS) in a primitive cell. We set {\b0\i0\scaps0\f3 POS=} by direct form (Cartesian) but with the unit of {\b0\i0\scaps0\f3 ALAT+DLAT}. Total number of SITE (number of tokens SITE_ATOM) is the number of atoms in the primitive cell. Setting {\b0\i0\scaps0\f3 POS=} under SITE_ATOM=foobar means that we place MT named as foobar defined in SPEC_ATOM=foobar. In addition, we can set SITE_ATOM_RELAX, if you like to find relaxed structure (we simultaneously set DYN category) in LDA. As for relaxation, see {\b0\i0\scaps0\f3 LaGaO_relax/ctrl.lagao} example, and read DYN in Document/Manual/CategoryAndToken.org.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 The SITE_ATOM=foobar (with same foobar with different POS) are not necessarily equivalent with respect to the space group operation of a system. Thus {\b0\i0\scaps0\f3 SITE_ATOM=foobar} are divided into \ldblquote classes\rdblquote  which are connected by the operation. The lmf automatically judge \ldblquote classes\rdblquote  (see also info by lmchk). Thus not need to specify it, but it may be better to check it. A sample is {\b0\i0\scaps0\f3 lmchk lagao} at {\b0\i0\scaps0\f3 ~/ecalj/lm7K/TESTsamples/LaGaO_relax}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b SPEC} category: In ctrls, we have not yet specified contents of SPEC; we have just given default symbols or only Z= when we use non-default names (shown by ctrlgenM1.py \endash showatomlist). The command {\b0\i0\scaps0\f3 ctrlgenM1.py} adds default SPEC sections.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 We have some {\b0\i0\scaps0\f3 SPEC_ATOM}, under which we give subtokens such as {\b0\i0\scaps0\f3 SPEC_ATOM_R}(MT radius), {\b0\i0\scaps0\f3 SPEC_ATOM_Z}(nucleus charge), cutoff parameters of angular momentum, and so on. These {\b0\i0\scaps0\f3 SPEC_ATOM} is refereed to in SITE.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 An example of SPEC category is {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par SPEC                                                            
\par     ATOM=Fe Z=26 R=1.70 
\par       KMXA=\{kmxa\}  LMX=3 LMXA=4 NMCORE=1                        
\par       PZ=0,3.9,4.5
\par       EH=-1 -1 -1 -1  RSMH=0.85 0.85 0.85 0.85          
\par       EH2=-2 -2 -2   RSMH2=0.85 0.85 0.85
\par       MMOM=0 0 2 0                                                    
\par   
\par     ATOM=... (then the similar block of ATOM= are repeated.)
\par        ...
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 Under the token {\b0\i0\scaps0\f3 ATOM=Fe}, we have subtokens {\b0\i0\scaps0\f3 SPEC_ATOM_Z},{\b0\i0\scaps0\f3 SPEC_ATOM_R}, and so on.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 Subtokens Z= is the nucleus charge and R= MT radius. Note that Fe is just a name to distinguish MT sphere in the cell. If you set SPEC_ATOM_Z=27, it is recognized as Co (since Z=27). {\b0\i0\scaps0\f3 LMX=3} is the maximum l of MTOs. Thus maximum l of MTO is l=3. The maximum of l to expand electron density and potential within MT is LMXA (in contrast to usual LAPW), we can use quite small LMXA such as LMXA=4. NMCORE=1 means we calculate core density without non magnetically-polarization. This can reduce computational confusion.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 PZ is to set local orbital (if not, no local orbitals). EH and RSMH are to specify first set of MTOs.(We can check how local orbitals are set by lmfa explained in the next section). EH2 and RSMH2 are to specify second set of MTOs. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 After PZ=, we have three numbers. These are numbers for s,p,d,f,g,... channels. Zero means not exist. You can use space or comma(,) as delimiter. Here not only the integer part of principle quantum number, but also the fractional part should be supplied (If PZ=0,3,4, it does not work.) Now PZ=3.9 for p and PZ=4.5 for d. This means we use local orbital for 3p, and local orbital for 4d (fractional parts (continuous principle quantum number) are large {{\f5\u8764*}0.9} for core like orbital, and smaller for extended orbital {{\f5\u8764*}0.3} or something. See Logarithmic Derivative Parameters in Document/BACKUP/MarksOriginalDoc/lmto.html. This is a little confusing, thus we will explain this in appendix. See Sec.{\field{\*\fldinst{\lang1024 REF BMpzsetting \\* MERGEFORMAT }}{\fldrslt{10.1}}}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 EH(damping factor), and RSMH (where the smooth Hankel function bent) determines MTOs (or its envelope function as a smooth Hankel function). We now set four numbers for them. Thus we set MTOs s,p,d,f with EH=-1 and RSMH=0.85. Our current test shows that RSMH is one half of R (that is, 0.85=1.70/2, but minimum RSMH is 0.5) and not need to be dependent on s,p,d,f. (If LMX=2, s,p,d are allowed and no f MTOs.) EH is -1; not need to change except test purpose. In a similar manner, EH2 and RSMH2 for second set of MTOs are given. Just three numbers means these for s,p,d. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 MMOM=s,p,d,f... gives initial condition of magnetic moment in {{\field{\*\fldinst{ EQ {\u956*}\\s\\do5({\fs16 {\i B}})}}{\fldrslt }}
} (number of up-down electron).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 In cases such as As, the local orbital given by default ctrl is responsible of rather deep core, and it is not need to be treated as valence electrons. In such a case, we don\rquote t need local orbital.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 In the case of AntiFerro-II NiO, it contains two NiO in a primitive cell. Thus it is reasonable to have two SPEC_ATOM as Ni1 and Ni2, although subtokens under ATOM=Ni1 and ATOM=Ni2 (e.g. {\b0\i0\scaps0\f3 SPEC_ATOM_EH} for them) are the same except initial condition of magnetic moment of MMOM=s,p,d,f... See example of NiO. \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 The minimum help of call Category_token_subtoken are listed with minimum explanation with {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par     $ lmf --input
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 It gives a long output. But many of them are experimental and not need to manage them. A part of it is {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par  Token            Input   cast  (size,min)
\par  ------------------------------------------
\par     ... ...
\par 
\par      STRUC_ALAT        reqd   r8       1,  1
\par        Scaling of lattice vectors, in a.u.
\par     ... ..
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 This is an minimum explanation of it. "reqd" means "required" (no default). r8 means it read with real number, 1,1 means that ALAT=xxx should contain one number minimum (max is also one) (See also STRUC_PLAT, and so on).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 There are kinds of examples in ecalj packages. Please look into their ctrls.* and ctrl.* These are in lm7K/TESTsample/* and ecalj/CMDsampls. In addition, ecalj/MATERIALS contain many samples (need a command); see a later subsection.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 As for what is shown in {\b0\i0\scaps0\f3 $ lmf --input}, most of important tokens are already described in the ctrl file generated by ctrlgenM1.py. So, we don\rquote t need to care many options shown by it.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li512\ri512\fi300 For QSGW calculation:\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li512\ri512\fi300 We need a setting in ctrl file to read sigm file (HAM_SIGP). It is simplified now, and not need to care it so much. As we set RDSIG=12 in defaults, lmf read sigm file and add it to one-body potential as long as sigm.* exist.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li512\ri512\fi0 {\i0\scaps0\b NOTE for old users}: We now set {\b0\i0\scaps0\f3 SIGP[MODE=3 EMAX=9999.]} in ctrl file to read self-energy in lmf (or lmf-MPIK). This is because we use very localized MTOs (similar with the Maxloc Wannier). Our test shows reasonable results and this simplify algorithms. In my previous version, we asked you to use {\b0\i0\scaps0\f3 SIGP[MODE=3 EMAX=2.0]} where EMAX is a little (0.5Ry) less than {\b0\i0\scaps0\f3 emax_sigm}. If something strange occurs, try this setting).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li512\ri512\fi300 {{\u8226*}} In principle, QSGW result should not depended on the choice of XCFUN. However, it can affect slightly. In our tests, it seems slightly better to use VWN (XCFUN=1) for QSGW calculations. (BUT need to check more...)\par
}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 {\*\bkmkstart BMpzsetting}10.1{\*\bkmkend BMpzsetting}  How to set local orbitals\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \sb60 \fi0 
\par   As we stated, do "lmfa |grep conf" to check used MTO basis. 
\par 
\par   We have to set SPEC_ATOM_PZ=?,?,? 
\par   (they ordered as PZ=s,p,d,f,... ) to set local orbitals.
\par   
\par   lmv7 (originally due to ASA in Stuttgart) uses a special terminology
\par   "continious principle quantum number for each l", which is just
\par   relatated to the logalismic derivative of radial funcitons at MT
\par   boundary. It is defined as
\par    P= principleQuantumNumber + 0.5-1/pi*atan(r* 1/phi dphi/dr),
\par   where phi is the radial function for each l.   For example, 
\par    P= n.5 for l=0 of free electron (flat potential) because phi=r^0,
\par    P= n.25 for l=1 because phi=r^1; 
\par    P= n.147584 for l=2 because phi=r^2; P=, n.102416 n.077979 for l=3,4.
\par   (Integer part can be changed). See Logarithmic Derivative Parameters in
\par   http://titus.phy.qub.ac.uk/packages/LMTO/lmto.html#section2
\par 
\par   Its fractioanl part 0.5-atan(1/phi dphi/dr) is closer to unity for
\par   core like orbital, but closer to zero for extended orbitals.
\par 
\par   Examples of choice:
\par   Ga p: in this case, choice 0 or choice 2 is recommended.
\par       We usually use lo for semi-core, or virtually unoccupied level.
\par 
\par      (0)no lo (4p as valence is default treatment without lo.)
\par         3p core, 4p valence, no lo: default.
\par         Then we have choice that lo is set to be for 3p,4p,5p.
\par      (1)3p lo ---> 4p val (when 3p is treated as valence)
\par         3d semi core, 4d valence  
\par         Set PZ=0,3.9 
\par         (P is not requied to set. *.9 for core like state. It is just an initial condition.)
\par      (2)5p lo ---> 4p val (PZ>P)
\par         Set PZ=0,5.5 
\par         5.5 is just simply given by a guess (no method have yet
\par   implemented for 
\par         If 5.2 or something, it may fails
\par         because of poorness in linear-dependency. We may need to observe
\par         results should not change so much on the value of PZ.
\par 
\par      (3xxx)4p lo ---> 5p val (we don't use this usually. this is for test purpose)
\par         4p lo, 5p valence 
\par         Set PZ=0,4.5 P=0,5.5 (In this case, set P= simultaneously).
\par         (NOTE: zero for s channel is to use defalut numbers for s)
\par 
\par   Ga d: (in this case, choice 0 or choice 1 is recommended).
\par      (0)no lo (3d core, 4d valecne, no lo: default.)
\par           Then we have choice that lo is set to be for 3d,4d,5d.
\par      (1) 3d lo ---> 4d val  (when 3d is treated as valence)
\par          Set PZ=0,0,3.9  (P is not required to set)
\par      (2) 5d lo ---> 4d val  (PZ>P)
\par          Set PZ=0,0,5.5
\par      (3xxx) 4d lo ---> 5d val  (this is for test purpose)
\par          Set PZ=0,0,5.5 P=0,0,4.5
\par          (NOTE: zero  for s,p are to use defalut numbers )
\par 
\par    If you like to read from atm.ga file instead of rst file(if exist).
\par    You have to do lmf --rs=1,1,0,0,1, for example. See lmf --help
\par    Becase rst file keeps the setting of MTO, thus change in ctrl is not
\par    reflected without the above option to lmf.
\par =============================================================
\par \par
}\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 {\*\bkmkstart BMmaininput}11{\*\bkmkend BMmaininput}  GWinput details\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb350 \fi0 11.1  \i0\scaps0\b generate a template of {\i0\scaps0\b0\f2 GWinput}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b As in the previous section, we need two input files {\i0\scaps0\b0\f2 ctrl.si} and {\i0\scaps0\b0\f2 GWinput}. In principle, these two determines final results uniquely. A template {\i0\scaps0\b0\f2 GWinput.tmp} is generated by {\i0\scaps0\b0\f3 mkGWIN_lmf2}. Required files are\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} ctrl.si{\xe{\v \i0\scaps0\b0\f2 ctrl.si}}} : The control file for PMT method.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b (Recently modified {\i0\scaps0\b0\f3 mkGWIN_lmf2} runs {\i0\scaps0\b0\f3 lmfa} internally. If you use older version, do {\i0\scaps0\b0\f3 lmfa} in advance).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWinput.tmp{\xe{\v \i0\scaps0\b0\f2 GWinput.tmp}}} : A file including computational conditions for the {GW}calculation. In addition, it specifies the {\i0\scaps0\b k} points for which you calculate the QP energy.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb170 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b When you run {\i0\scaps0\b mkGWIN_lmf}, it asks you to supply three numbers for BZ integration as { {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b 
\par == Type three integers n1 n2 n3 for Brillouin Zone meshing for GW! ==
\par  n1= 
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b Then you need to type a number e.g. as "2 {Return}" for n1. Then you need to repeat it for n2 and n3 as\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b n1= 2 {Return}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b n2= 2 {Return}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b n3= 2 {Return}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b . These numbers specifies what k points in BZ is used for BZ integration (In this case, {2{\u215*}2{\u215*}2=8} {\i0\scaps0\b k} point in the 1st BZ is used. Roughly speaking, we need {4{\u215*}4{\u215*}4} (or {6{\u215*}6{\u215*}6}) to get band gap for Si and so on, with {{\u8776*}0.1} eV accuracy.)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b Then you have to edit {\i0\scaps0\b0\f2 GWinput.tmp} and copy it to {\i0\scaps0\b0\f2 GWinput}. We details the {\i0\scaps0\b0\f2 GWinput} in later chapter.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b We need to repeat mkGWIN_lmf2 when you change MTO sections in ctrl file (adding PZ case, and so on).\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 11.2  overview of GWinput\par
(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b Because of historical reason, input file is different from {\i0\scaps0\b0\f2 ctrl.*}).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b The main input files is {\i0\scaps0\b0\f2 GWinput}. This controls the setting of {GW}calculation. The file {\i0\scaps0\b0\f2 GWinput} consists of structures as\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b {\scaps0\b0\i keyword1 data1}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b {\scaps0\b0\i keyword2 data2}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b ...\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b In each lines, it consists of keyword and data. Data can be single or plural. As for keywords, upper case or Lowercase is not distinguished. All keywords should start from 1st column (no space at head). Order of lines are irrelevant. As for logical variable, you can use anything \ldblquote true, yes, on, 1, T\rdblquote  for .true., and anything \ldblquote false, no, off, 0, F\rdblquote  for .false.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b Or we have \ldblquote tag sections\rdblquote  in {\i0\scaps0\b0\f2 GWinput} specified by {\b0\i0\scaps0\f3 <PRODUCT_BASIS>}, {\b0\i0\scaps0\f3 <QPNT>}, {\b0\i0\scaps0\f3 <PBASMAX>}, {\b0\i0\scaps0\f3 <QforEPS>}, and {\b0\i0\scaps0\f3 <QforEPSL>}. ({\b0\i0\scaps0\f3 <PRODUCT_BASIS>} is requires for all kinds of calculations. {\b0\i0\scaps0\f3 <PBASMAX>} is optional. {\b0\i0\scaps0\f3 <QforEPS>} and/or {\b0\i0\scaps0\f3 <QforEPSL>} are required for epsilon mode). It is like {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b 
\par <PRODUCT_BASIS>
\par  tolerance to remove products
\par   0.100000D-02 ! =tolopt
\par  lcutmx(atom) 
\par   3 3 
\par   atom   l
\par ...
\par </PRODUCT_BASIS>
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b . In these tag sections, you have to keep format for its own (usually numbers are read by free format {\b0\i0\scaps0\f3 read(*,*)}).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b The fundamental readin routine for {\i0\scaps0\b0\f2 GWinput} is a subroutine {\b0\i0\scaps0\f3 getkeyvalue} defined in {\b0\i0\scaps0\f3 gwsrc/keyvalue.F}. {\b0\i0\scaps0\f3 getkeyvalue} is a general and convenient readin routine in full use of the f90 features. Read a head part of the file and try to do "grep getkeyvalue *.F" in {\b0\i0\scaps0\f3 gwsrc/} or {\b0\i0\scaps0\f3 main/} so as to see how to use it (test routine is {\b0\i0\scaps0\f3 main/kino_input_test.F}.)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b Soche the {\i0\scaps0\b0\f2 GWinput} consists of three sections \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b 1.\tab
General section \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b 2.\tab
{\b0\i0\scaps0\f3 <PRODUCT_BASIS>} section \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b 3.\tab
{\b0\i0\scaps0\f3 <QforEPS>},{\b0\i0\scaps0\f3 <QforEPSL>} section (only effective for dielectric function mode) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b 4.\tab
{\b0\i0\scaps0\f3 <QPNT>} section (only effective for one-shot mode) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \b 5.\tab
{\b0\i0\scaps0\f3 <PBASMAX>} section (optional) \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b We will explain each by each in the followings.\par
\column
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 11.3  \i0\scaps0\b0\f2 General section{\xe{\v \i0\scaps0\b0\f2 General section}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 In general section, it looks like {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 \f2 
\par ! ##### From GWIN0 ################ 
\par n1n2n3         1    1    1 ! for BZ meshing in GW 
\par QpGcut_psi    4.000 !(See unit_2pioa for unit) |q+G| cutoff for eigenfunction.
\par QpGcut_cou    3.000 !(See unit_2pioa for unit) |q+G| cutoff for Coulomb and W.
\par unit_2pioa off ! off --> a.u.; on--> unit of QpGcut_* are in 2*pi/alat 
\par alpha_OffG    1.000 !(a.u.) Used in auxially function in the offset-Gamma method.
\par !emax_chi0   99999.000 !(Ry) emax cutoff for chi0  (Optional)
\par emax_sigm       3.000 !(Ry)  emax cutoff for Sigma
\par 
\par ! ##### FREQUENCIES from GWIN_V2 ################ 
\par dw      0.005000 !(a.u.) energy-mesh (bin width size) along real axis.
\par omg_c      0.040 !(a.u.) energy-mesh is twiced at omg_c
\par   !  coaser mesh for higher energy. Width get to be doubled at omg_c.
\par iSigMode     3 ! QSGW mode switch for gwsc. use =3.
\par niw         10 ! Number of frequencies along Im axis. Used for integration to get Sigma_c
\par   ! E.g. try niw=6 and niw=12
\par delta     -0.10D-05 !(a.u.)  Broadening of x0. negative means tetrahedron method.
\par   ! used by hx0fp0. You get smeard x0 witth abs(delta).
\par deltaw     0.020000 !(a.u.) Mesh for numerical derivative to get the Z factor
\par esmr       0.003000 !(Ry) used by hsfp0. Keep esmr smaller than band gap for insulators
\par   ! Poles of G^LDA are treated as if they have width esmr in hsfp0. 
\par   ! Change esmr for metals.  See DOSACC*---especailly around Ef.
\par GaussSmear on  ! Gaussian or Rectangular smearing for Pole of G^LDA with esmr for hsfp0.
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 \f2 ---------------------------------------------------\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 1.\tab
BZ integration.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 n1n2n3} 3 integers as {{\field{\*\fldinst{ EQ {\i N}\\s\\do5({\fs16 1})\\,{\i N}\\s\\do5({\fs16 2})\\,{\i N}3}}{\fldrslt }}
} (no default); They are {{\u8805*}0}. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 Brillouin Zone mesh for integration is determined by keywords{\i0\scaps0\b0\f3 BZmesh} and {\i0\scaps0\b0\f3 n1n2n3}. Current version only allow regular mesh point including Gamma point for {{\i G}{\u215*}{\i W}}. But not that Chi_RegQbz below allow you to use off-Gamma mesh for {{\i W}({\u969*})} (and dielectric function mode).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 We usually take \rquote 4 4 4\rquote , \rquote 6 6 6\rquote  or \rquote 8 8 8\rquote  for GaAs. For metal such as Fe, \rquote 10 10 10\rquote  or more is better.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 Chi_RegQbz}\par
(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 on or off)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 Chi_RegQbz = on (default): Use regular mesh (including gamma) for eps calculation.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 Chi_RegQbz = off : Use off-Gamma mesh (Not including gamma) for eps calculation.\par
(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 In cases, {\i0\scaps0\b0\f3 Chi_RegQbz off} gives faster convergence as for {\i0\scaps0\b0\f3 n1n2n3}; not only for GW, but also for dielectric functions {\i0\scaps0\b0\f3 eps_lmfh}.)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 2.\tab
Plane wave ({{\i0\scaps0\b q+G}}) cutoff \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 QpGcut_psi} 1 real (no default)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 QpGcut_Cou} 1 real (no default)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 unit_2pioa} 1 logical (no defalt)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 We have two cutoff for {{\i0\scaps0\b q+G}}. {\i0\scaps0\b0\f3 QpGcut_psi} is the cutoff of {|{\i q}+{\i G}|} for the IPW in the expansion of the eigenfunctions. {\i0\scaps0\b0\f3 QpGcut_Cou} is for the IPW of the interactions {{\i v},{\i D},{\i W}}. Its unit is specified by {\i0\scaps0\b0\f3 unit_2pioa }; "off" means unit in a.u. and "on" means in unit of {{\field{\*\fldinst{ EQ  \\F(2{\u960*},{\i0\scaps0\b0\f0 alat})}}{\fldrslt }}
}. (alat is length scale unit in {\i0\scaps0\b0\f2 ctrl.*}).\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 Rule of thumb: {\b0\i0\scaps0\f3 QGcut_psi} is a little (usually 0.5 or so) larger than {\b0\i0\scaps0\f3 QpGcut_cou}. It becomes accurate if we use large {\b0\i0\scaps0\f3 QpGcut_cou}. But it enlarge size of IPW(interstitial plane wave) part of Mixed product basis. For test, try 2.7, 3.2, 3.7 for {\b0\i0\scaps0\f3 QGcut_cou} (and add 0.5 or 1 for {\b0\i0\scaps0\f3 QGcut_psi}). Larger one is expensive.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 We expand eigenfunctions in the Muffin-tin division of the space. See Eq.
[{\field{\*\fldinst{\lang1024 REF BIB_xxx \\* MERGEFORMAT }}{\fldrslt{xxx}}}
] in Ref.
[{\field{\*\fldinst{\lang1024 REF BIB_xxx \\* MERGEFORMAT }}{\fldrslt{xxx}}}
]; in the current {{\i G}{\i W}} implementation, we use very simple form of eigenfuncitons (not by the 3-component formalism in the 
[{\field{\*\fldinst{\lang1024 REF BIB_xxx \\* MERGEFORMAT }}{\fldrslt{xxx}}}
]).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 Thus the form of expansion is just related to the division of space; not directly related to the difference among LAPW, LMTO, and PMT.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 3.\tab
Eigenfunctions within MTs (no parameters setting for them).\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 The radial functions (phi and phidot for each {{\i l}}), corresponding to the true parts, (= 2nd component in the 3-component formalism 
[{\field{\*\fldinst{\lang1024 REF BIB_xxx \\* MERGEFORMAT }}{\fldrslt{xxx}}}
]), are automatically determined already in the one-body part of program {\i0\scaps0\b0\f3 lmf-MPIK}.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 4.\tab
Cutoff for used bands.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 emax_chi0}: 1 real (optional,default={{\u8734*}}), in Ry\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 emax_sigm}: 1 real (optional,default={{\u8734*}}; We usually use 3 Ry).\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\b0\i0\scaps0\f3 emax_sigm} is the maximum limit of the self-energy (measured from the Fermi energy). See the paper 
[{\field{\*\fldinst{\lang1024 REF BIB_xxx \\* MERGEFORMAT }}{\fldrslt{xxx}}}
] which shows how the results are affected by {\i0\scaps0\b0\f3 emax_sigm}. But in cases, small {\b0\i0\scaps0\f3 emax_sigm} can give poor dispersion curve (slightly unnatural behavior) because of sudden cutoff by emax_sigm. However, we like to use smaller value to reduce computational time.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 That is, larger is better, but expensive (And note that we simultaneously need to use empty spheres when we use large {\i0\scaps0\b0\f3 emax_sigm}, as shown in 
[{\field{\*\fldinst{\lang1024 REF BIB_xxx \\* MERGEFORMAT }}{\fldrslt{xxx}}}
], ). \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 Generally speaking, accuracy less than {{\f5\u8764*}}0.1eV (for bandgap) is allowance of current technique. Probably, it may be possible to have better accuracy, but it may ask us to repeat many calculations with changing conditions to confirm stability. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 nband_chi0}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 : 1 integer (optional,default={{\u8734*}})\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 nband_sigm}: 1 integer (optional,default={{\u8734*}})\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 These specify how many bands you use in {\i0\scaps0\b hx0fp0} (for chi0) and in {\i0\scaps0\b hsfp0} (for sigma). Higher bands above them are neglected.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 5.\tab
Energy mesh related parameters.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 \emdash  new after march2016 \emdash \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 HistBin_dw} : 1 real (a.u.). Mesh width along real axis for {{\i W}({\u969*})}.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 HistBin_ratio} : 1 real (a.u.). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\b0\i0\scaps0\f3 HistBin_dw} and {\b0\i0\scaps0\f3 HistBin_ratio} specify real space bins which we accumulate imaginary part weight of polarization functions. The bins are (see {\b0\i0\scaps0\f3 frhis} in {\b0\i0\scaps0\f3 ecalj/fpgw/gwsc/m_freq.F}) {\par
\pard\plain\s16\ql\sb120\sa120\keep\widctlpar\f0\tqr\tx3840\tqc\tx4267\tql\tx4694\tqr\tx8535\sl240\slmult1 \li600\fi0 \f2 \tab
{\field{\*\fldinst{ EQ {\u969*}\\s\\do5({\fs16 {\i i}})={\i b}*({\plain exp}({\i a}*({\i i}\u8722?1))\u8722?1)\\,}}{\fldrslt }}
\tab
\tab
\tab{\b0 (4)}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 where {{\field{\*\fldinst{ EQ [{\u969*}\\s\\do5({\fs16 {\i i}})\\,{\u969*}\\s\\do5({\fs16 (}){\i i}+1)]}}{\fldrslt }}
} ({{\i i}=1,2,...,}{\b0\i0\scaps0\f3 nwhis+1}) is the {{\i i}}-th bin. {\b0\i0\scaps0\f3 HistBin_dw} is bin width at {{\u969*}=0}. The ratio {{\field{\*\fldinst{ EQ {\u969*}\\s\\do5({\fs16 (}){\i i}+1)/{\u969*}\\s\\do5({\fs16 (}){\i i})}}{\fldrslt }}
} for large {{\u969*}} is {{\plain exp}({\i a})}={\b0\i0\scaps0\f3 HistBin_ratio}. This choice of getting coarser at high energy is because we think {{\i W}({\u969*})} around {{\u969*}{\f5\u8764*}0} gives most important contribution to the GW approximation. If histogram bins are too wide, dielectric function can be less accurate, but results may be not so much affected.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 In GW calculation, the Plasmon pole is important. It is determined not by the Drude weight; it usually gives small contribution to the Plasmon pole (for example, Si is described well by a Plasmon pole model, but Si has no Fermi surface). We expect that the GW results are not so sensitive to the choice of {\b0\i0\scaps0\f3 HistBin_dw, HistBin_ratio} usually. We may use fine mesh when we plot quantities such as {{\i W}({\u969*})} near {{\u969*}=0}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 The ecalj gives {{\f5\u772\'5f}{\i W}({\u969*}=0){\f5\u8764*}0} for metal; where {{\f5\u772\'5f}{\i W}({\u969*})} is the effective interaction averaged in the {{\u915*}}-cell 
[{\field{\*\fldinst{\lang1024 REF BIB_kotani_formulation_2015 \\* MERGEFORMAT }}{\fldrslt{10}}}
]. And {{\f5\u772\'5f}{\i W}({\u969*}} get closer to {{\i v}} for larger {{\u969*}}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 Default value of them are given in {\b0\i0\scaps0\f3 fpgw/gwsrc/m_freq.F}. They are {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 \f2 
\par  call getkeyvalue("GWinput","HistBin_ratio",oratio, default=1.03d0) 
\par  call getkeyvalue("GWinput","HistBin_dw",dw, default=1d-5) !a.u.
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 \f2 These are safer settings. Thus new {\b0\i0\scaps0\f3 mkGWIN_lmf2} (GWinput.tmp generator) gives default lines in {\b0\i0\scaps0\f3 GWinput} as {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 \f2 
\par HistBin_dw  2d-3 ! 1d-5 for metal  !(a.u.) bin width along real axis at omega=0.
\par HistBin_ratio 1.08 ! 1.03 for check. frhis(iw)= b*(exp(a*(iw-1))-1),
\par   where a=ratio-1.0 and dw=b*a 
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 \f2 . This is given in the {\b0\i0\scaps0\f3 conv2gwinput.F}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 \emdash  old version. before 14march2016 \endash \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 dw} : 1 real (a.u.). Mesh width along real axis for {{\i W}({\u969*})}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 omg_c} : 1 real (a.u.). \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 dw} and {\i0\scaps0\b0\f3 omg_c} determines {{\u969*}} mesh along real axis to calculate {{\i W}({\u969*})}...\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 -------------------------\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\ul (WARNING! Some of my examples may show as if they are in "(Ry)". But they are Wrong!)}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2  {\i0\scaps0\b0\f3 delta}: 1 real (a.u.). We usually use very small number as -1d-8 for gw_lmfh, eps mode and so.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 xxx does this really make the stabilization? xxx This is the size of {{\u948*}} in denominator of {{\u928*}} (EQ.xxx). But (I think) we can (or can not) use it so as to make broadening for theoretical test (maybe not exactly corresponding to {{\u948*}}). or when you make calculation stabilized (Takao need to check this point again xxx!) \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 niw} : 1 integer. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 Number of integration points along the imaginary axis(FIG.1) to get {{\field{\*\fldinst{ EQ {\u931*}\\s\\do5({\fs16 {\i c}})}}{\fldrslt }}
}. See routines {\i0\scaps0\b0\f3 wint*} called from {\i0\scaps0\b0\f3 sxcf*.F}, which is called from the main routine {\i0\scaps0\b0\f3 hsfp0.m.F} (or {\i0\scaps0\b0\f3 hsfp0.sc.m.F} in the QSGW case). The integration points are {{\i i}{\u969*}'({\i n})={\i i}(1/{\i x}({\i n})\u8722?1)}, where {{\i x}({\i n})} is the usual Gaussian-integration points for the interval [0,1]. In addition, we give the special analytical treatment for the peaky part at {{\u969*}'=0}. Out tests shows {\i0\scaps0\b0\f3 niw}=6 for Si is good enough for 0.01 eV accuracy. The convergence as for {\i0\scaps0\b0\f3 niw} is quite good. This integration scheme has been developed by Ferdi Aryasetiawan. The number of points should be the one of 6,10,12,16,20,24,32,40,or 48. It is because we use a {\i0\scaps0\b0\f3 subroutine gauss} in {\i0\scaps0\b0\f3 /gwsrc/mate.F} prepared by Ferdi. We will replace better one in future. See II-F in Ref.I.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 GaussSmear} : 1 logical \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 esmr} : 1 real (Ry). Used by hsfp0 (and hsfp0.sc for QSGW). \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 Poles of the Green function {{\field{\*\fldinst{ EQ {\i G}\\s\\up5({\fs16 \i0\scaps0\b0\f0 LDA})}}{\fldrslt }}
} are treated as if they have width esmr in hsfp0. If {\i0\scaps0\b0\f3 GaussSmear} is on, each pole of {{\field{\*\fldinst{ EQ {\i G}\\s\\up5({\fs16 \i0\scaps0\b0\f0 LDA})}}{\fldrslt }}
} is smeared by a Gaussian function with {{\u963*}=}{\i0\scaps0\b0\f3 esmr} in the calculation of hsfp0. If {\i0\scaps0\b0\f3 GaussSmear} is off, we assume rectangular smearing for the poles. Usually it is necessary to take rather smaller value than band gap for insulators. Try to use 0.003 or so in the case of Si and {\i0\scaps0\b0\f3 GaussSmear}=on.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 For metal, this {\i0\scaps0\b0\f3 esmr} is somehow related to how we capture the Fermi surface; In principle, we have to take the limit {\i0\scaps0\b0\f3 n1n2n3} {{\u8594*}{\u8734*}} and {\i0\scaps0\b0\f3 esmr} {{\u8594*}0}). However, we may inevitably use some finite {\i0\scaps0\b0\f3 esmr} to make calculations converged.)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 deltaw}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 : 1 real (a.u.) only for one-shot case.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 deltaw} is the interval for the numerical derivative {{\field{\*\fldinst{ EQ  \\F({\u8706*}{\u931*}({\u969*}),{\u8706*}{\u969*})}}{\fldrslt }}
} in EQ.8. We calculate {{\field{\*\fldinst{ EQ {\f5\u9001*}{\u968*}\\s\\up5({\fs16 {\i0\scaps0\b k}{\i n}})|{\u931*}({\u949*}\\s\\up5({\fs16 {\i0\scaps0\b k}{\i n}})+{\i0\scaps0\b0\f3 deltaw})|{\u968*}\\s\\up5({\fs16 {\i0\scaps0\b k}{\i n}}){\f5\u9002*}}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\f5\u9001*}{\u968*}\\s\\up5({\fs16 {\i0\scaps0\b k}{\i n}})|{\u931*}({\u968*}\\s\\up5({\fs16 {\i0\scaps0\b k}{\i n}})\u8722?{\i0\scaps0\b0\f3 deltaw})|{\u968*}\\s\\up5({\fs16 {\i0\scaps0\b k}{\i n}}){\f5\u9002*}}}{\fldrslt }}
} in addition to {{\field{\*\fldinst{ EQ {\f5\u9001*}{\u968*}\\s\\up5({\fs16 {\i0\scaps0\b k}{\i n}})|{\u931*}({\u949*}\\s\\up5({\fs16 {\i0\scaps0\b k}{\i n}}))|{\u968*}\\s\\up5({\fs16 {\i0\scaps0\b k}{\i n}}){\f5\u9002*}}}{\fldrslt }}
}. From these values, we can calculate two {{\i Z}} (or second-derivative of {{\u931*}({\u969*})}), as shown in {\i0\scaps0\b0\f2 SECU}. It will help to see whether the used {\b0\i0\scaps0\f3 deltaw} is O.K. or not.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 6.\tab
Offset-gamma point.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 Q0PChoice 0}:1 integer\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 Q0P_Choice} gives how to determine the offset gamma points. Initially we take them as\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 1: \emdash q\emdash  is ten times smaller than regular mesh.(default)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 2: \emdash q\emdash  is average in the Gamma cell (cell of BZ including Gamma point). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 Then we choose only inequivalent {{\i0\scaps0\b q}} points based on the point group symmetry. Obtained offset gamma points is given in {\i0\scaps0\b0\f2 Q0P} file.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 alpha_offG}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 : 1 real (a.u.) \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 alpha_offG} corresponds to {{\u945*}} in EQ.48. {\i0\scaps0\b0\f3 alpha_offG}=1d0 is usually good in the sense that it seems to be almost a limit at {{\u945*}{\u8594*}0}. So you can usually fix it as {\i0\scaps0\b0\f3 alpha_offG}=1d0, and check the convergence as for {\i0\scaps0\b0\f3 n1n2n3}.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 7.\tab
core orthogonalization (default=off)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 CoreOrth} 1 logical \emdash  recently, this option is not maintained \emdash  Better to use local orbital instead, so that core charge do not spill out.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 If this is on, we enforce cores orthogonalized to valence {{\u966*}} and {{\f5\u775.}{\u966*}} (these appear in II-C in Ref.I). This procedure enforce the correct orthogonal condition, thus we have correct behavior for the dielectric function at {{\i0\scaps0\b q}{\u8594*}0}. However, it may deform core functions too much, especially in the case of shallow 3d (or maybe 4d) cores. So we don\rquote t recommend use this option, even though then the orthogonality condition is somehow broken. Anyway you can check weather it affects to results or not by this switch.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 8.\tab
QP self-consistent GW.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 iSigMode} 1 integer (no default).\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 This is required for QSGW calculation by the script {\i0\scaps0\b0\f3 gwsc}. We have some possible ways to make GW self-consistent (how we determine {{\field{\*\fldinst{ EQ {\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})}}{\fldrslt }}
} from calculated {{\u931*}({\u969*})}). We now mostly use {\i0\scaps0\b0\f3 iSigMode}=3. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 3: Use {{\field{\*\fldinst{ EQ {\i0\scaps0\b0\f0 Re} \\F({\u931*}\\s\\do5({\fs16 {\i n}{\i n}'})({\u949*}\\s\\do5({\fs16 {\i n}}))+{\u931*}\\s\\do5({\fs16 {\i n}{\i n}'})({\u949*}\\s\\do5({\fs16 {\i n}'})),2)}}{\fldrslt }}
} (mode-A in 
[{\field{\*\fldinst{\lang1024 REF BIB_xxx \\* MERGEFORMAT }}{\fldrslt{xxx}}}
]).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 1: Use {{\field{\*\fldinst{ EQ {\u931*}\\s\\do5({\fs16 {\i n}{\i n}'})({\i E}\\s\\do5({\fs16 {\i F}}))+{\u948*}\\s\\do5({\fs16 {\i n}{\i n}'})({\u931*}\\s\\do5({\fs16 {\i n}{\i n}'})({\u949*}\\s\\do5({\fs16 {\i n}}))\u8722?{\u931*}\\s\\do5({\fs16 {\i n}{\i n}'})({\i E}\\s\\do5({\fs16 {\i F}})))}}{\fldrslt }}
} (mode-B in 
[{\field{\*\fldinst{\lang1024 REF BIB_xxx \\* MERGEFORMAT }}{\fldrslt{xxx}}}
]).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 5: Use {{\field{\*\fldinst{ EQ {\u948*}\\s\\do5({\fs16 {\i n}{\i n}'}){\u931*}\\s\\do5({\fs16 {\i n}{\i n}})({\u949*}\\s\\do5({\fs16 {\i n}}))}}{\fldrslt }}
} (Eigenvalue-only self-consistency, keeping the eigenfuncions as given)).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 See {\b0\i0\scaps0\f3 /gwsrc/sxcf_fal2.sc.F}, which is called from the main routine {\i0\scaps0\b0\f3 hsfp0_sc} (this is the routine to calculate self-energy)).\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 9.\tab
Others\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 KeepEigen} 1 logical (default=on) \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 These are for memory usage. When KeepEigen is on, eigenfunctions (Eigen) are kept in memory during calculation. If you have not enough memory in your machine, use them off. Then you can save memory usage. However, then we may have too frequent access to files. So %CPU might get lower. Be careful to use these options.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f3 Verbose}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 1 integer (default=0) If 0, it gives minimum standard output. If 40 or higher, it shows too much output. (these verbosity control is not well-organized yet). \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 10.\tab
{\i0\scaps0\b0\f3 LFC@Gamma},{\i0\scaps0\b0\f3 EIBZmode},{\i0\scaps0\b0\f3 multitet} are for test purpose.xxx\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb100 \fi300 \f2 \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 11.4  \i0\scaps0\b0\f2 {<}QPNT{>} section{\xe{\v \i0\scaps0\b0\f2 {<}QPNT{>} section}}\par
(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 only for one-shot GW. Not suitable to make band plot in BZ.) This section is to specify the q points and bands index for which you calculate the QP energies (QPE). An example is { {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 \f2 
\par <QPNT>
\par  --- Specify the q and band indeces,  for which we evaluate the self-energy ---
\par 
\par *** all q -->1, otherwise 0;  up only -->1, otherwise 0
\par            0           0
\par *** no. states and band index for calculation.
\par           3
\par   15 16 17 
\par *** q-points, which shoud be in qbz.  See KPNTin1BZ.
\par            2
\par   1     0.0000000000000000     0.0000000000000000     0.0000000000000000
\par   2     0.2886751358562925    -0.5000000000000000     0.0000000000000000
\par   3     0.0000000000000000     0.0000000000000000     0.3073140749846343
\par </QPNT>
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 Numbers are read by free format read(5,*), thus the numbers should be separated by space. At the next line to the first {\i0\scaps0\b0\f3 ***}, you have to give two numbers used as flags. Both of them takes 0 or 1. 1st one is whether you calculate QPE for all q points (in IBZ) or not. If it is 1, you calculate QPE for all q. If it is 0, you calculate them only for q points specified within this file. In the case of metal where you want to calculate the Fermi energy for QPE, you need to calculate all the eigenvalues somehow above the Fermi energy (If you put 1, it is safer but too time-consuming). The second number is whether you calculate QPE for both spins or not. It is usually 0. In the case of antiferro material, it should be 1.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 From the next line to the second {\i0\scaps0\b0\f3 ***}, you have to specify the states for which you calculate the QPE. In this example, you calculate the 3 bands of QPE for 15th, 16th, and 17th eigenfunctions (they are ordered from the bottom).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 From the next line to the third {\i0\scaps0\b0\f3 ***}, you have to specify the q points. The first numbers of each line are dummy. In this case, you calculate QPE for two q points. The third q point is neglected because 2 is given at first.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 When you generate GWinput.tmp, you see all the possible {{\i q}} points are listed (these q points should be a part of the regular mesh points).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 In the QS{{\i G}{\i W}}mode (gwsc), this section is neglected (then we calculate all QPE on regular mesh points); so its hsfp0_sc part is quite expensive (usually it takes time more than hx0fp0).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2   Additional Note --------------\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 {\i0\scaps0\b0\f3 QPNT_nbandrange} num1 num2 (two integers).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 This override setting in {\b0\i0\scaps0\f3 <QPNT>}. (I think this switch may still work, but not checked recently).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 {\i0\scaps0\b0\f3 AnyQ} on (default is off)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 If this is on, you can specify any Q point which is not on the mesh point. For the purpose, we need to prepare eigenfunctions at extra {\i0\scaps0\b k} points. But it is automatic. In order to make the computation efficient. Even in this case, from the computational view, it is better to choose {{\i0\scaps0\b q}} on the two times finer divided mesh (or three times finer divided {{\i0\scaps0\b k}} mesh). This is used for Fig.6 in Phys. Rev. B 74, 245125 (2006).\par
\column
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 11.5  \i0\scaps0\b0\f2 set QPNT for eps mode (QforEPS section){\xe{\v \i0\scaps0\b0\f2 set QPNT for eps mode (QforEPS section)}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 For eps modes (scripts {\b0\i0\scaps0\f3 eps_*}, which are for linear responses. See Sec.{\field{\*\fldinst{\lang1024 REF BMlinearr \\* MERGEFORMAT }}{\fldrslt{16}}}), you have to specify q point in the following ways.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 1. {\i0\scaps0\b0\f3 QforEPSIBZ} on\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 Then all Q point in IBZ are used.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 2. Use section as {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 \f2 
\par <QforEPS>
\par 0d0 0d0 0.01d0
\par 0d0 0d0 0.02d0
\par 0d0 0d0 0.04d0
\par 0d0 0d0 0.08d0
\par </QforEPS>
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 In addition, you can specify Q points as {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 \f2 
\par <QforEPSL>
\par 0d0 0d0 0d0   1d0   0d0  0d0 8
\par 0d0 0d0 0d0  .5d0  .5d0  0d0 8
\par </QforEPSL>
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 This is along the line\emdash  8 point along the line (not left-end q; so omitting 0 0 0). The first line means line (0d0 0d0 0d0)\emdash (1d0 0d0 0d0) is divided to 8. So we have 7 points, (0.125 0 0), (0.25 0 0),... (1 0 0).\par
\column
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 11.6  \i0\scaps0\b0\f2 {<}PRODUCT_BASIS{>} section{\xe{\v \i0\scaps0\b0\f2 {<}PRODUCT_BASIS{>} section}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 This section is to define product basis to expand {{\i W}} and so. Numbers are read by free format read(5,*),thus the numbers should be separated by space. The line number in this section is meaningful (you can not add comment lines).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 width 15cm { {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 \f2 
\par <PRODUCT_BASIS>
\par  tolerance to remove products due to poor linear-independency
\par   0.100000D-04 ! =tolopt; larger gives smaller num. of product basis. See lbas and lbasC, which are output of hbasfp0.
\par  lcutmx(atom) = maximum l-cutoff for the product basis.  =4 is required for atoms with valence d, like Ni Ga
\par   4  3
\par   atom   l  nnvv  nnc ! nnvv: num. of radial functions (valence) on the augmentation-waves, nnc: num. for core.
\par     1    0    2    3
\par     1    1    2    2
\par     1    2    3    0
\par     1    3    2    0
\par     1    4    2    0
\par     2    0    2    1
\par     2    1    2    0
\par     2    2    2    0
\par     2    3    2    0
\par     2    4    2    0
\par   atom   l    n  occ unocc  ! Valence(1=yes,0=no) 
\par     1    0    1    1    1   ! 4S_p  ----- 
\par     1    0    2    1    0   ! 4S_d        
\par     1    1    1    1    1   ! 4P_p        
\par     1    1    2    0    0   ! 4P_d        
\par     1    2    1    1    1   ! 4D_p        
\par     1    2    2    0    0   ! 4D_d        
\par     1    2    3    1    1   ! 3D_l        
\par     1    3    1    0    1   ! 4f_p        
\par     1    3    2    0    0   ! 4f_d        
\par     1    4    1    0    0   ! 5g_p        
\par     1    4    2    0    0   ! 5g_d        
\par     2    0    1    1    1   ! 2S_p  ----- 
\par     2    0    2    0    0   ! 2S_d        
\par     2    1    1    1    1   ! 2P_p        
\par     2    1    2    0    0   ! 2P_d        
\par     2    2    1    1    1   ! 3d_p        
\par     2    2    2    0    0   ! 3d_d        
\par     2    3    1    0    1   ! 4f_p        
\par     2    3    2    0    0   ! 4f_d        
\par     2    4    1    0    0   ! 5g_p        
\par     2    4    2    0    0   ! 5g_d        
\par   atom   l    n  occ unocc  ForX0 ForSxc ! Core (1=yes, 0=no)
\par     1    0    1    0    0      0    0    ! 1S -----
\par     1    0    2    0    0      0    0    ! 2S      
\par     1    0    3    0    0      0    0    ! 3S      
\par     1    1    1    0    0      0    0    ! 2P      
\par     1    1    2    0    0      0    0    ! 3P      
\par     2    0    1    0    0      0    0    ! 1S -----
\par </PRODUCT_BASIS>
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 width 15cm  This section is read in the free format in fortran. So, e.g., {\b0\i0\scaps0\f3 0.01} works as same as {\b0\i0\scaps0\f3 0.10000D-01}. The line order is important (you have to keep the order given by {\i0\scaps0\b0\f2 GWinput.tmp}). Be careful atom atom id\emdash lmf may re-order it and pass it to gw code. Look into LMTO file (generated by {\i0\scaps0\b mkGWIN_lmf2}); which contains crystal structure information after such re-ordering by lmf. I used {\b0\i0\scaps0\f3 !} to make clear that things after {\b0\i0\scaps0\f3 !} are comments. But {\b0\i0\scaps0\f3 !} is not meaningful \endash  just the expected numbers of data separated by blank(s) are read for each line from the beginning of lines.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 \bullet\tab
{\b0\i0\scaps0\f3 0.100000D-02 ! =tolopt} controls a number of Product basis to expand the Coulomb interaction within MTs. {\i0\scaps0\b0\f3 tolopt} is a criterion to remove the poorly linear-independent product basis. Note that the product basis, which is to expand the Coulomb interaction, is different from the basis to expand eigenfunctions. In our experience, {\b0\i0\scaps0\f3 0.100000D-02} (=0.001) is not so bad. If you like to reduce computational time use 0.01 or so, but a little dangerous in cases. With 0.0001, we can check stability on it.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 (note: By supplying multiple numbers, we can specify {\i0\scaps0\b0\f3 tolopt} atom by atom. Remember {\i0\scaps0\b0\f3 lmchk} gives atom ID.)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 \bullet\tab
lcutmx(atom) is the l cutoff of product basis for atoms in the primitive cell (do lmchk for atom id). In the case of Oxygen, we can usually use lcutmx=2 (need check by the difference when you use lcutmx=2 or lcutmx=4). Then the computational time is reduced well.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 \bullet\tab
(dec2014:{\b0\i0\scaps0\f3 <PBASMAX>} is not checked recently; see {\b0\i0\scaps0\f3 fpgw/main/hbasfp0.m.F} and {\b0\i0\scaps0\f3 fpgw/gwsrc/basnfp.F}).) You can use {\b0\i0\scaps0\f3 <PBASMAX>} section to override this setting. It is given as {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 \f2 
\par <PBASMAX>
\par 1  5 5 5 3 3
\par 2  5 5 3 2 3
\par 3  3 3 2 2 2
\par </PBASMAX>
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 \f2 The first number is for atom index (fixed), and other are product basis for each {{\i l}} channel.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 \bullet\tab
The integer numbers in 4th line {\i0\scaps0\b0\f3 lcutmx} gives the maximum angular momentum {{\i l}} for the product basis for each atomic site. In our experience, {\i0\scaps0\b0\f3 lcutmx}=4 is required when the semi-core (or valence ) {3{\i d}} electrons exist and we want to calculate the QP energies of them.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 \bullet\tab
Keep a block starting from " atom l nnvv nnc ..." as it originally generated in {\i0\scaps0\b0\f2 GWinput.tmp}. It just shows that how many kinds of radial functions for cores and valence electrons for each atom and l. {\i0\scaps0\b0\f3 nnvv}=2 in the case of {{\u966*}} and {{\f5\u775.}{\u966*}}; {\i0\scaps0\b0\f3 nnvv}=3 in the case to add the local orbital in addition.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 \bullet\tab
There are two blocks after the line "{\i0\scaps0\b0\f3 atom l n occ unocc :Valence(1=yes, 0=no)}\rquote  and after "{\i0\scaps0\b0\f3 atom l n occ unocc ForX0 ForSxc ! Core (1=yes, 0=no)}\rquote . These are used to choose atomic basis to construct the product basis. The product basis are generated from the products of two atomic basis.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 {\i0\scaps0\b0\f2 GWinput.tmp} generated by {\i0\scaps0\b mkGWIN_lmf2} contains labels on each orbitals as {\b0\i0\scaps0\f3 4S_p}, {\b0\i0\scaps0\f3 4S_d}, {\b0\i0\scaps0\f3 4P_p}... Here {\b0\i0\scaps0\f3 4S_p} is for {{\field{\*\fldinst{ EQ {\u966*}\\s\\do5({\fs16 4{\i s}})}}{\fldrslt }}
}; {\b0\i0\scaps0\f3 4S_d} for {{\field{\*\fldinst{ EQ {\f5\u775.}{\u966*}\\s\\do5({\fs16 4{\i s}})}}{\fldrslt }}
}; {\b0\i0\scaps0\f3 3D_l} for {{\field{\*\fldinst{ EQ {\u966*}\\s\\up({\fs16 \i0\scaps0\b0\f0 local,3d})}}{\fldrslt }}
}. Capital letter just after the principle-quantum number means the orbital is used as \lquote Head of MTO\rquote ; lowercase means just used only as the \lquote tail of MTO\rquote .\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 The switches for columns labeled as {\b0\i0\scaps0\f3 occ} and {\b0\i0\scaps0\f3 unocc}. take 0 (not included) or 1 (included). With the switch, we can construct two groups of orbitals, {\b0\i0\scaps0\f3 occ} and {\b0\i0\scaps0\f3 unocc}. In this sample {\i0\scaps0\b0\f2 GWIN_V2} as for atom 1, {{\field{\*\fldinst{ EQ \{{\u966*}\\s\\do5({\fs16 4{\i s}})\\,{\f5\u775.}{\u966*}\\s\\do5({\fs16 4{\i s}})\\,{\u966*}\\s\\do5({\fs16 4{\i p}})\\,{\u966*}\\s\\do5({\fs16 4{\i d}})\\,{\u966*}\\s\\up({\fs16 \i0\scaps0\b0\f0 local,3d})\\,{\u966*}\\s\\up({\fs16 \i0\scaps0\b0\f0 core,3s})\\,{\u966*}\\s\\up({\fs16 \i0\scaps0\b0\f0 core,3p})\}}}{\fldrslt }}
} consist the group {\b0\i0\scaps0\f3 occ}, and {{\field{\*\fldinst{ EQ \{{\u966*}\\s\\do5({\fs16 4{\i s}})\\,{\u966*}\\s\\do5({\fs16 4{\i p}})\\,{\u966*}\\s\\do5({\fs16 4{\i d}})\\,{\u966*}\\s\\up({\fs16 \i0\scaps0\b0\f0 local,3d})\\,{\u966*}\\s\\do5({\fs16 4{\i f}})\}}}{\fldrslt }}
} consists the group {\b0\i0\scaps0\f3 unocc}. So the any product of combinations {{\field{\*\fldinst{ EQ \{{\u966*}\\s\\do5({\fs16 4{\i s}})\\,{\f5\u775.}{\u966*}\\s\\do5({\fs16 4{\i s}})\\,{\u966*}\\s\\do5({\fs16 4{\i p}})\\,{\u966*}\\s\\do5({\fs16 4{\i d}})\\,{\u966*}\\s\\up({\fs16 \i0\scaps0\b0\f0 local,3d})\\,{\u966*}\\s\\up({\fs16 \i0\scaps0\b0\f0 core,3s})\\,{\u966*}\\s\\up({\fs16 \i0\scaps0\b0\f0 core,3p})\}{\u215*}\{{\u966*}\\s\\do5({\fs16 4{\i s}})\\,{\u966*}\\s\\do5({\fs16 4{\i p}})\\,{\u966*}\\s\\do5({\fs16 4{\i d}})\\,{\u966*}\\s\\up({\fs16 \i0\scaps0\b0\f0 local,3d})\\,{\u966*}\\s\\do5({\fs16 4{\i f}})\}}}{\fldrslt }}
} are included as for the basis of the product basis. As for atom 2, {{\field{\*\fldinst{ EQ \{{\u966*}\\s\\do5({\fs16 2{\i s}})\\,{\u966*}\\s\\do5({\fs16 2{\i p}})\\,{\u966*}\\s\\do5({\fs16 3{\i d}})\}{\u215*}\{{\u966*}\\s\\do5({\fs16 2{\i s}})\\,{\u966*}\\s\\do5({\fs16 2{\i p}})\\,{\u966*}\\s\\do5({\fs16 3{\i d}})\\,{\u966*}\\s\\do5({\fs16 4{\i f}})\}}}{\fldrslt }}
} are included.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 \bullet\tab
Core section: (not worth to read, since we currently use no CORE2, {\b0\i0\scaps0\f3 A=B=C=0}.)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \f2 Each line of the last section of {\i0\scaps0\b0\f3 Product BASIS} forms { {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 \f2 
\par   atom   l    n  occ unocc   ForX0 ForSxc :CoreState(1=yes, 0=no)
\par     1    2    1    A    x      B    C
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 \f2 At first you have to understand the concept of CORE1 and CORE2 in EQ.35 Ref.I. However, in our recent calculations, we do not use \ldblquote CORE2\rdblquote  generally. So, in such a case, set {\b0\i0\scaps0\f3 A=B=C=0}. And treat shallow cores (above Efermi{\u8722?}2Ry or so ) as valence electron by \ldblquote local orbital method\rdblquote  in lmf.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 \bullet\tab
Be careful. Current version is inconvenient... Need to repeat mkGWIN_lmf2 to generate GWinput template when you add PZ (local orbital). \par
}{\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb120 \li512\ri512\fi300 \f2 [( Note: you can skip here if you don\rquote t use CORE2.)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li512\ri512\fi300 \f2 Each of {\i0\scaps0\b0\f3 A,x,B,C} takes 0 or 1. There are some possible combination of these switches; {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1112\ri512\fi-300 \f2 1.\tab
If you take {\i0\scaps0\b0\f3 ( A x B C )= (1 0 1 1)}, then the core is included in core2. In other words, this core is treated in the same manner of the valence electron.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1112\ri512\fi-300 \f2 2.\tab
If you take {\i0\scaps0\b0\f3 ( A x B C )= (0 0 0 0)}, then the core is included in core1. The (exchange only) self-energy related to this core is included in {\i0\scaps0\b0\f3 SEXcore}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li1112\ri512\fi0 \f2 {\i0\scaps0\b0\f3 C} is the key switch which determine whether it is included in core1 or core2. There could be another option.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1112\ri512\fi-300 \f2 3.\tab
If you take {\i0\scaps0\b0\f3 ( A x B C )= (1 0 0 1)}. This core is in core2. But it is not included in the calculation of {{\i D}} and {{\i W}}. This core is only included for SEX and SEC calculations. \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li512\ri512\fi0 \f2 These three kinds of choices are reasonable ones but we can consider some another choice. In the following, we show how these switches ({\b0\i0\scaps0\f3 A,B,C}) affect executions called from {\i0\scaps0\b0\f3 gw_lmfh} (essentially as same as {\i0\scaps0\b0\f3 gw_lmf}). {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1112\ri512\fi-300 \f2 \bullet\tab
{\i0\scaps0\b0\f3 hbasfp0}(mode 3) :Product basis for exchange due to core.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li1112\ri512\fi0 \f2 We include the {\i0\scaps0\b0\f3 C}=0 cores as a part of the product basis as if {\i0\scaps0\b0\f3 A}=1 {\i0\scaps0\b0\f3 x}=0.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1112\ri512\fi-300 \f2 \bullet\tab
{\i0\scaps0\b0\f3 hsfp0}(mode 3): exchange mode for core.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li1112\ri512\fi0 \f2 {{\field{\*\fldinst{ EQ {\u931*}\\s\\do5({\fs16 \i0\scaps0\b0\f0 x})}}{\fldrslt }}
} only due to the {\i0\scaps0\b0\f3 C}=0 cores are calculated.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1112\ri512\fi-300 \f2 \bullet\tab
{\i0\scaps0\b0\f3 hbasfp0} (mode1): Product basis.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li1112\ri512\fi0 \f2 Only see the switch {\i0\scaps0\b0\f3 A} and {\i0\scaps0\b0\f3 x}. The product basis is generated from (occupied {{\u215*}} unoccupied), where {\i0\scaps0\b0\f3 A}=1 core is included as one of the occupied basis.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1112\ri512\fi-300 \f2 \bullet\tab
{\i0\scaps0\b0\f3 hsfp0} (mode 1): exchange mode.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li1112\ri512\fi0 \f2 Only see the switch {\i0\scaps0\b0\f3 C}. {{\field{\*\fldinst{ EQ {\u931*}\\s\\do5({\fs16 \i0\scaps0\b0\f0 x})}}{\fldrslt }}
} due to valence and due to {\i0\scaps0\b0\f3 C}=1 cores are calculated.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1112\ri512\fi-300 \f2 \bullet\tab
{\i0\scaps0\b0\f3 hx0fp} (mode 1): {{\i W}\u8722?{\i v}} calculation.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li1112\ri512\fi0 \f2 Only see the switch {\i0\scaps0\b0\f3 B}. {{\i W}} is calculates using all the valence and {\i0\scaps0\b0\f3 B}=1 cores.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li1112\ri512\fi-300 \f2 \bullet\tab
{\i0\scaps0\b0\f3 hsfp0} (mode 2): correlation mode.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li1112\ri512\fi0 \f2 Only see the switch {\i0\scaps0\b0\f3 C}. {{\field{\*\fldinst{ EQ {\u931*}\\s\\do5({\fs16 \i0\scaps0\b0\f0 c})}}{\fldrslt }}
} due to valence and due to {\i0\scaps0\b0\f3 C}=1 are calculated.\par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb160 \fi0 \f2 {{\u8226*}} After you perform {\b0\i0\scaps0\f3 gw_lmfh} or anything, you find output files {\i0\scaps0\b0\f2 lbas} by {\i0\scaps0\b0\f3 hbasfp0} (mode1), and/or {\i0\scaps0\b0\f2 lbasc} by {\i0\scaps0\b0\f3 hbasfp0} (mode3) for core. These contains important information about how many and how product basis are chosen. E.g. \rquote {\b0\i0\scaps0\f3 grep nbloch lbas}\rquote  shows how many product basis are used in the calculations.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 11.7  \i0\scaps0\b0\f2 ANFcond (we can skip here since we do not check this option now. Need fix this if necessary.{\xe{\v \i0\scaps0\b0\f2 ANFcond (we can skip here since we do not check this option now. Need fix this if necessary.}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 This file is used in {\i0\scaps0\b hx0fp0} in the calculation of {{\i W}\u8722?{\i v}} (or rather {{\u928*}} in the program) to specify the antiferro condition.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 {\i0\scaps0\b Note} : Now only for the case that (a translation vector + spin flip) is a symmetry operation.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 This should be given by hand. For the cases of not antiferro, this file should not exist. Even if {\i0\scaps0\b0\f2 ANFcond } does not exists for antiferro case, {\i0\scaps0\b hx0fp0} works but it requires about two time computational efforts.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 { \fs18  {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 \f2 \fs18  
\par The existence of this file means the Antiferro condition is used for x0k
\par Product basis B(\{\\bf r\}-\{\\bf a\}) is translated to B(\{\\bf r\}-\{\\bf a\}-Af\})= B(\{\\bf r\}-\{\\bf a\}'-T_0\})
\par  1d0  1d0  1d0        ! Af=Antiferro translation vector in Cartesian.
\par  1  2
\par  2  1
\par  3  4
\par  4  3
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 The first line specifies the Antiferro translation vector. From the second line, we specify that atom {{\i i}} in the primitive cell is mapped to what atom {{\i j}({\i i})} in the cell with the opposite spin by the translation. In this case, {{\i j}(1)=2,{\i j}(2)=1,{\i j}(3)=4,{\i j}(4)=3}. You have to be careful as for the true atomic position used in the GW calculations can be different from the given atomic positions in {\i0\scaps0\b0\f2 ctrl.MnO}. The true atomic positions is written in {\i0\scaps0\b0\f2 LMTO}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 In the case of one-shot GW (gw_lmf and gw_lmfh), it may be better to set "up only" QPE, so that you only calculate QPE of up spins at the same time.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 In the case of gwsc, we just calculate QPE for up spins automatically (QPNT section is neglected).\par
\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 {\*\bkmkstart BMmainoutputgw}12{\*\bkmkend BMmainoutputgw}  Main Output Files of GW part\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb180 \fi0 12.1  \i0\scaps0\b0\f2 QPU{\xe{\v \i0\scaps0\b0\f2 QPU}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 This is the main output{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} Note that QPU also implies QPD and so on. U is for up D is for down spins.}
 in human readable format. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 An example of one-shot GW by {\i0\scaps0\b0\f3 gw_lmfh}) is (In the case of QSGW, {{\i Z}} ({{\i Z}=1}) is not shown): { \fs18  {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 \f2 \fs18  
\par  ===============================================================
\par   quasiparticle energies MAJORITY
\par  ===============================================================
\par E_shift=  0.4263273221017709D+00  0.6075150850568627D+00  0.7046628446164018D+00 eV
\par 
\par     q      state SEx   SExcore SEc    vxc   dSE  dSEnoZ  eLDA    eQP  eQPnoZ   eHF  Z   2Z*Simg ReS(elda)
\par 0.0 0.0 0.0 1  -29.56  -1.97  10.40 -20.22 -0.52  -0.90 -19.08 -19.42 -19.71 -30.81 0.58 0.95   -21.12
\par 0.0 0.0 0.0 2  -30.52  -2.24  10.09 -21.53 -0.70  -1.14 -18.06 -18.58 -18.93 -29.72 0.61 0.96   -22.66
\par 0.0 0.0 0.0 3  -20.67  -1.87   5.97 -16.85  0.19   0.28  -7.20  -6.83  -6.65 -13.32 0.67 0.66   -16.57
\par   ...
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 From the 6h line, we have the eigenvalue data. All of the unit of energy is in eV. We should note that the zero-level of these values {\i0\scaps0\b0\f3 eLDA eQP eQPnoZ} can be changed by hqpe. This {\i0\scaps0\b0\f3 eLDA - E_shift} are the eigenvalues relative to a Fermi energy determined by the smearing method. Detailed value of {\i0\scaps0\b0\f3 eLDA} is in {\i0\scaps0\b0\f2 TOTE2.UP}. Detailed value of {\i0\scaps0\b0\f3 eLDA- E_shift} is in {\i0\scaps0\b0\f2 TOTE.UP}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2  \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 q} : {{\i0\scaps0\b k}} vector\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 state}: Band index {{\i n}}, which is from the lowest eigenvalue (not include cores).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 SEx}: = {{\field{\*\fldinst{ EQ ={\f5\u9001*}{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}})|{\u931*}\\s\\up({\fs16 \i0\scaps0\b0\f0 core2+valence,\i0\scaps0\b0\f0 x})({\i0\scaps0\b r}\\,{\i0\scaps0\b r}\\s\\up5({\fs16 '}))|{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}}){\f5\u9002*}}}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 SExcore}: {{\field{\*\fldinst{ EQ ={\f5\u9001*}{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}})|{\u931*}\\s\\up({\fs16 \i0\scaps0\b0\f0 core1,\i0\scaps0\b0\f0 x})({\i0\scaps0\b r}\\,{\i0\scaps0\b r}\\s\\up5({\fs16 '}))|{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}}){\f5\u9002*}}}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 SEc}: {{\field{\*\fldinst{ EQ ={\f5\u9001*}{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}})|{\u931*}\\s\\up({\fs16 \i0\scaps0\b0\f0 core2+valence,\i0\scaps0\b0\f0 c})({\i0\scaps0\b r}\\,{\i0\scaps0\b r}\\s\\up5({\fs16 '})\\,{\u949*}\\s\\do5({\fs16 {\i n}})({\i0\scaps0\b k}))|{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}}){\f5\u9002*}}}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 vxc}: LDA exchange correlation energy. {{\field{\*\fldinst{ EQ {\f5\u9001*}{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}})|{\i V}\\s\\up({\fs16 \i0\scaps0\b0\f0 LDA,\i0\scaps0\b0\f0 xc})([{\i n}\\s\\do5({\fs16 \i0\scaps0\b0\f0 total})]\\,{\i0\scaps0\b r})|{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}}){\f5\u9002*}}}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 dSE}: {{\field{\*\fldinst{ EQ {\i Z}\\s\\do5({\fs16 {\i n}{\i0\scaps0\b k}}){\u215*}}}{\fldrslt }}
} {\i0\scaps0\b0\f3 dSEnoZ}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 dSEnoZ}: {{\field{\*\fldinst{ EQ {\f5\u9001*}{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}})|{\u931*}\\s\\up({\fs16 \i0\scaps0\b0\f0 core1,\i0\scaps0\b0\f0 x})({\i0\scaps0\b r}\\,{\i0\scaps0\b r}\\s\\up5({\fs16 '}))+{\u931*}\\s\\up({\fs16 \i0\scaps0\b0\f0 core2+valence,\i0\scaps0\b0\f0 xc})({\i0\scaps0\b r}\\,{\i0\scaps0\b r}\\s\\up5({\fs16 '})\\,{\u949*}\\s\\do5({\fs16 {\i n}})({\i0\scaps0\b k}))|{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}}){\f5\u9002*}\u8722?{\f5\u9001*}{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}})|{\i V}\\s\\up({\fs16 \i0\scaps0\b0\f0 LDA,\i0\scaps0\b0\f0 xc})([{\i n}\\s\\do5({\fs16 \i0\scaps0\b0\f0 total})]\\,{\i0\scaps0\b r})|{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}}){\f5\u9002*}}}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 = {\i0\scaps0\b0\f3 SEx + SExcore + SEc - vxc}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 eLDA}: LDA eigenvalues. {{\field{\*\fldinst{ EQ {\u949*}\\s\\do5({\fs16 {\i n}})({\i0\scaps0\b k})}}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 eQP}: QP energy. {{\field{\*\fldinst{ EQ {\u949*}\\s\\do5({\fs16 {\i n}})({\i0\scaps0\b k})}}{\fldrslt }}
}+{\i0\scaps0\b0\f3 dSE}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 eQPnoZ}: QP energy without {{\i Z}}. {{\field{\*\fldinst{ EQ {\u949*}\\s\\do5({\fs16 {\i n}})({\i0\scaps0\b k})}}{\fldrslt }}
}+{\i0\scaps0\b0\f3 dSEnoZ}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 eHF}: HF energy of 1st iteration. {{\field{\*\fldinst{ EQ {\u949*}\\s\\do5({\fs16 {\i n}})({\i0\scaps0\b k})}}{\fldrslt }}
}+{\i0\scaps0\b0\f3 SEx + SExcore -vxc}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 Z}: Z factor. {{\field{\*\fldinst{ EQ {\i Z}\\s\\do5({\fs16 {\i n}{\i0\scaps0\b k}})}}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 2Z*Simg}: Quasi-particle life time. {{\field{\*\fldinst{ EQ 2{\i Z}\\s\\do5({\fs16 {\i n}{\i0\scaps0\b k}}){\u215*}{\i0\scaps0\b0\f0 Im}{\f5\u9001*}{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}})|{\u931*}\\s\\up({\fs16 \i0\scaps0\b0\f0 core2+valence,\i0\scaps0\b0\f0 c})({\i0\scaps0\b r}\\,{\i0\scaps0\b r}\\s\\up5({\fs16 '})\\,{\u949*}\\s\\do5({\fs16 {\i n}})({\i0\scaps0\b k}))|{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}}){\f5\u9002*}}}{\fldrslt }}
} \par
(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 Is this really the usual definition of the life time?\emdash don\rquote t believe me)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 {\i0\scaps0\b0\f3 ReS(elda)}: {{\field{\*\fldinst{ EQ {\i0\scaps0\b0\f0 Re}{\f5\u9001*}{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}})|{\u931*}\\s\\up({\fs16 \i0\scaps0\b0\f0 core1,\i0\scaps0\b0\f0 x})({\i0\scaps0\b r}\\,{\i0\scaps0\b r}\\s\\up5({\fs16 '}))+{\u931*}\\s\\up({\fs16 \i0\scaps0\b0\f0 core2+valence,\i0\scaps0\b0\f0 xc})({\i0\scaps0\b r}\\,{\i0\scaps0\b r}\\s\\up5({\fs16 '})\\,{\u949*}\\s\\do5({\fs16 {\i n}})({\i0\scaps0\b k}))|{\u936*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}}){\f5\u9002*}}}{\fldrslt }}
} \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 12.2  \i0\scaps0\b0\f2 XCU{\xe{\v \i0\scaps0\b0\f2 XCU}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 LDA exchange-correlation. Detailed data of above {\i0\scaps0\b0\f3 vxc}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 12.3  \i0\scaps0\b0\f2 SEXU{\xe{\v \i0\scaps0\b0\f2 SEXU}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 Exchange part of the self-energy due to valence electrons. Detailed data of above {\i0\scaps0\b0\f3 SEx}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 12.4  \i0\scaps0\b0\f2 SEXcoreU{\xe{\v \i0\scaps0\b0\f2 SEXcoreU}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 Exchange part of the self-energy due to core. Detailed data of above {\i0\scaps0\b0\f3 SExcore}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 12.5  \i0\scaps0\b0\f2 SECU{\xe{\v \i0\scaps0\b0\f2 SECU}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 Correlation part of the self-energy. Detailed data of above {\i0\scaps0\b0\f3 SEc}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 12.6  \i0\scaps0\b0\f2 TOTE.UP (TOTE.DN){\xe{\v \i0\scaps0\b0\f2 TOTE.UP (TOTE.DN)}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 This is a central output. It contains LDA and QP energies. These values are relative to a Fermi energy determined by the smearing method. It contains two kind of QP energies {\i0\scaps0\b0\f3 QP QPnoZ}. The first line contains the Fermi energy in Ry determined by the smearing method. It is also shown in the end of {\i0\scaps0\b0\f2 DOSACC.lda}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 12.7  \i0\scaps0\b0\f2 TOTE2.UP (TOTE2.DN){\xe{\v \i0\scaps0\b0\f2 TOTE2.UP (TOTE2.DN)}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 This is a central output. It contains zero-level shifts from {\i0\scaps0\b0\f2 TOTE.UP}. The first line contains the Fermi energy in eV (= the Fermi energy in {\i0\scaps0\b0\f2 TOTE.UP} but it is in Ry) and three energy shifts {\i0\scaps0\b0\f3 E_shift}, which are the same values in the 4th line of {\i0\scaps0\b0\f2 QPU}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb569 \fi300 \f2 Note that all {\i0\scaps0\b0\f2 *.chk} files are just to check calculations (not read in by successive executions).\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 12.8  \i0\scaps0\b0\f2 DOSACC.lda{\xe{\v \i0\scaps0\b0\f2 DOSACC.lda}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 This lists all the eigenvalues in ascendant order. States with almost the same eigenvalues are degenerated states. The 4th column contains number of electrons up to the eigenvalue.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 12.9  \i0\scaps0\b0\f2 DOSACC2.lda{\xe{\v \i0\scaps0\b0\f2 DOSACC2.lda}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 This is similar with {\i0\scaps0\b0\f2 DOSACC.lda}. But we remove the degeneracy.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 12.10  \i0\scaps0\b0\f2 Core_ibas*_l*.chk{\xe{\v \i0\scaps0\b0\f2 Core_ibas*_l*.chk}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 Used core eigenfunctions.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \f2 12.11  \i0\scaps0\b0\f2 VXCFP.chk{\xe{\v \i0\scaps0\b0\f2 VXCFP.chk}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 This contains eigenvalues and {{\field{\*\fldinst{ EQ {\f5\u9001*}{\u968*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}})|{\i V}\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})|{\u968*}\\s\\do5({\fs16 {\i0\scaps0\b k}{\i n}}){\f5\u9002*}}}{\fldrslt }}
} in both units, Ry and eV. See below.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb689 \fi0 \f2 12.12  The Fermi energies in this {{\i G}{\i W}}code.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \f2 We mainly have two kinds of Fermi energy {{\field{\*\fldinst{ EQ {\i E}\\s\\up({\fs16 \i0\scaps0\b0\f0 smear,\i0\scaps0\b0\f0 FEERMI})}}{\fldrslt }}
} {{\field{\*\fldinst{ EQ {\i E}\\s\\up({\fs16 \i0\scaps0\b0\f0 tetra,\i0\scaps0\b0\f0 FEERMI})}}{\fldrslt }}
}.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 1.\tab
At first eigenvalues given by {\i0\scaps0\b0\f3 lmfgw} is in {\i0\scaps0\b0\f2 VXCFP.chk}. You can see { \fs18  {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 \f2 \fs18 
\par %head VXCFP.chk
\par ### LDA exchange correlation ###
\par #   qvec                 ikp iband    eigen       VXC(ntotal)     VXC(nvalence)    eigen(eV)    VXC(ntotal)(eV)      VXC(nvalence)
\par   0.0000  0.0000  0.0000  1  1     -0.96932423     -1.00727912      0.00000000    -13.18843159    -13.70483831      0.00000000
\par ...
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 \f2 These are raw values. {\i0\scaps0\b0\f2 TOTE} contains the eigenvalues but relative to a Fermi energy {{\field{\*\fldinst{ EQ {\i E}\\s\\up({\fs16 \i0\scaps0\b0\f0 smear,\i0\scaps0\b0\f0 FEERMI})}}{\fldrslt }}
} which is determined by the smearing method. It is also shown at the top part of output files {\i0\scaps0\b0\f2 lsx_sf} and {\i0\scaps0\b0\f2 lsc_sf}. And you also see the value at the end of {\i0\scaps0\b0\f2 DOSACC.lda}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 This is the head of {\i0\scaps0\b0\f2 TOTE.UP}; { \fs18  {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 \f2 \fs18 
\par %head TOTE.UP
\par           43           8  8.520283353474250E-003
\par    0.0000000   0.0000000   0.0000000    1   1  -0.1330435686590073D+02 -0.1322984339282777D+02 -0.1319228487875673D+02  0.6648715256312900D+00
\par    0.0000000   0.0000000   0.0000000    2   1  -0.7555264915356062D+00 -0.6267595395613325D+00 -0.6009483309649021D+00  0.8330216344848770D+00
\par ...
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 \f2 Here {{\field{\*\fldinst{ EQ {\i E}\\s\\up({\fs16 \i0\scaps0\b0\f0 smear,\i0\scaps0\b0\f0 FEERMI})}}{\fldrslt }}
}=8.520283353474250E-003. From the second lines, they are LDA eigenvalues and QP energies (Z included and Z=1); they are relative to the {{\field{\*\fldinst{ EQ {\i E}\\s\\up({\fs16 \i0\scaps0\b0\f0 smear,\i0\scaps0\b0\f0 FEERMI})}}{\fldrslt }}
}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 -13.18843159 eV - {{\field{\*\fldinst{ EQ {\i E}\\s\\up({\fs16 \i0\scaps0\b0\f0 smear,\i0\scaps0\b0\f0 FEERMI})}}{\fldrslt }}
}(which should be translated into in eV) = -0.1330435686590073D+02 eV. Here -13.18843159 is the value in {\i0\scaps0\b0\f2 VXCFP.chk} shown above.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 2.\tab
There is the another Fermi energy {{\field{\*\fldinst{ EQ {\i E}\\s\\up({\fs16 \i0\scaps0\b0\f0 tetra,\i0\scaps0\b0\f0 FEERMI})}}{\fldrslt }}
}, which is used by mode 11 (or mode 1) of hx0fp0 in {\i0\scaps0\b gw_lmfh}. It is determined by heftet and stored in {\i0\scaps0\b0\f2 EFERMI}.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \f2 3.\tab
{\i0\scaps0\b0\f3 hqpe} gives {\i0\scaps0\b0\f2 TOTE2.UP} and {\i0\scaps0\b0\f2 QPU}. They contains the same values. You can see {\b0\i0\scaps0\f3 eLDA  eQP  eQPnoZ  Z} not only in {\i0\scaps0\b0\f2 QPU} but also in {\i0\scaps0\b0\f2 TOTE2.UP}. At top lines of {\i0\scaps0\b0\f2 TOTE2.UP}, you see { \fs18  {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 \f2 \fs18 
\par %head TOTE2.UP
\par        43        8  0.1159252712507000D+00  0.7555207081466229D+00  0.6267572296579150D+00  0.6009467172357787D+00
\par    0.0000000   0.0000000   0.0000000    1   1  -0.1254883615775411D+02 -0.1260308616316985D+02 -0.1259133816152095D+02  0.6648715256312900D+00
\par    0.0000000   0.0000000   0.0000000    2   1  -0.5783388983382487D-05 -0.2309903417430093D-05 -0.1613729123328689D-05  0.8330216344848770D+00
\par    0.0000000   0.0000000   0.0000000    3   1  -0.1369098933889923D-05 -0.6195200397129952D-07  0.2047424042528334D-06  0.8330216088297998D+00
\par    0.0000000   0.0000000   0.0000000    4   1   0.0000000000000000D+00  0.0000000000000000D+00  0.0000000000000000D+00  0.8330216340404680D+00
\par ..
\par \par
}},\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li600\fi0 \f2 where a number in first line {{\field{\*\fldinst{ EQ {\i E}\\s\\up({\fs16 \i0\scaps0\b0\f0 smear,\i0\scaps0\b0\f0 FEERMI})}}{\fldrslt }}
}= 0.1159252712507000D+00 eV =8.520283353474250E-003 Ry, the same as the previous one. This is a case when you did hqpe with augment 4 (it means we set the 4th-band eigenvalue zero). Another 3 values in the first line are shifts from {\i0\scaps0\b0\f2 TOTE}. Shown eshift(eLDA) = 0.7555207081466229D+00 eV. E.g., the second line shows\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 -0.1254883615775411D+02 eV= -0.1330435686590073D+02(in TOTE) + eshift(eLDA) eV.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \f2 When you do {\i0\scaps0\b0\f3 hqpemetal}, three shifts at the first line in {\i0\scaps0\b0\f2 TOTE2.UP} is determined so as to give the eigenvalues relative to the Fermi energies shown in {\i0\scaps0\b0\f2 EFERMI}, {\i0\scaps0\b0\f2 EFERMI.QP1}, and {\i0\scaps0\b0\f2 EFERMI.QPz=1}. These are Fermi energies by tetrahedron method.\par
}\~\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb100 \fi0 \f2 As for {\i0\scaps0\b gwband_lmf}, it recalculates eigenvalues for all {\i0\scaps0\b q} along SYML. Then\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 the default "zerolevel" = {{\field{\*\fldinst{ EQ {\i E}\\s\\up({\fs16 \i0\scaps0\b0\f0 smear,\i0\scaps0\b0\f0 FEERMI})}}{\fldrslt }}
} - eshift(lda). Because the eigenvalues given by this bandmode are presumably the same, we have\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 Shown LDA eigenvalue\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 = -13.18843159(raw data by band mode\emdash same as that in VXCFP.chk) - zerolevel\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 = (-13.18843159 - EFERMIsmear) + eshift(lda).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 = -0.1330435686590073D+02( this is in TOTE.UP) + eshift(lda)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 = -0.1254883615775411D+02( this is in TOTE2.UP).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \f2 It means that values in {\i0\scaps0\b0\f2 TOTE2.UP} recovers. But if raw data by band mode is different from it, these is a trouble. It does not recover the values in {\i0\scaps0\b0\f2 TOTE2.UP}(={\i0\scaps0\b0\f2 QPU}).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \f2 As for the QPE, we calculate the difference from LDA values in TOTE2.UP at first, and add the difference to the Shown LDA eigenvalue.\par
\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 13  mkGWIN_lmf2 and its I/O Files\par
(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 QPNT.chk contains irreducible k point for given n1 n2 n3; KPTin1BZ.gwinit.chk contain all k points in Brillouin Zone).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The purpose of the script {\i0\scaps0\b mkGWIN_lmf2} is to give a template {\i0\scaps0\b0\f2 GWinput.tmp}. The script is complicated because of historical reasons. However, its essential is simple; we calls three executions in this script as\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b0\f3 echo 0 {|} lmfgw si}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b0\f3 echo 1 {|} gwinit}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\i0\scaps0\b0\f3 echo {\u8722?100} {|} qg4gw}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 . We explain each by each.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 {\*\bkmkstart BMlmfgw}13.1{\*\bkmkend BMlmfgw}  \i0\scaps0\b echo\~0{|}lmfgw{\xe{\v \i0\scaps0\b lmfgw00}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  makes SYMOPS LATTC CLASS NLAindx.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWIN0{\xe{\v \i0\scaps0\b0\f2 GWIN0}}} : This is a file, which contains your supplied n1 n2 n3 when you invoke the script. This file is given within the script of mkGWIN_lmf2 (as "here document"). { {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b 
\par cat <<EOF >GWIN0
\par n1 n2 n3
\par  $n1 $n2 $n3
\par cut
\par  4.0 3.0
\par alpha
\par  1
\par Number of bands
\par  999 99999.0 
\par  999 3.0 
\par EOF
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} ctrl.si{\xe{\v \i0\scaps0\b0\f2 ctrl.si}}} : Master input file of lmf calculation. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} LATTC{\xe{\v \i0\scaps0\b0\f2 LATTC}}} : contains the information of primitive translation vectors, lmxa and konf. See {\field{\*\fldinst{\lang1024 REF BMlattc \\* MERGEFORMAT }}{\fldrslt{?}}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} SYMOPS{\xe{\v \i0\scaps0\b0\f2 SYMOPS}}} : The point group operations. See {\field{\*\fldinst{\lang1024 REF BMsymops \\* MERGEFORMAT }}{\fldrslt{?}}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} CLASS{\xe{\v \i0\scaps0\b0\f2 CLASS}}} : Equivalent atomic positions are called as \rquote class\rquote . This small file contains a map between atomic site and \rquote class\rquote .\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} NLAindx{\xe{\v \i0\scaps0\b0\f2 NLAindx}}} : This file contains indexes ({{\field{\*\fldinst{ EQ p\\s\\do5({\fs16 \i0\scaps0\b0\f0 valence})\\,l\\,a}}{\fldrslt }}
} ) for orbitals in the MT. ({{\field{\*\fldinst{ EQ p\\s\\do5({\fs16 \i0\scaps0\b0\f0 valence})}}{\fldrslt }}
} is radial function index, {a} is atomic site index). Eigenfunctions are expanded in this order. }\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} ldima{\xe{\v \i0\scaps0\b0\f2 ldima}}} : Number of MTOs for each atomic site. (this is used only from {\i0\scaps0\b0\f3 hqpe_sc}\emdash QSGW mode).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} ves*{\xe{\v \i0\scaps0\b0\f2 ves*}}} : not meaningful at this stage\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} rhoMT*{\xe{\v \i0\scaps0\b0\f2 rhoMT*}}} : not meaningful at this stage\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 13.2  \i0\scaps0\b gwinit{\xe{\v \i0\scaps0\b gwinit}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Get GWIN_V2.tmp and QPNT.tmp\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWIN0{\xe{\v \i0\scaps0\b0\f2 GWIN0}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} LATTC{\xe{\v \i0\scaps0\b0\f2 LATTC}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} SYMOPS{\xe{\v \i0\scaps0\b0\f2 SYMOPS}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} NLAindx{\xe{\v \i0\scaps0\b0\f2 NLAindx}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWIN_V2.tmp{\xe{\v \i0\scaps0\b0\f2 GWIN_V2.tmp}}} : A part of GWinput.tmp\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QPNT.tmp{\xe{\v \i0\scaps0\b0\f2 QPNT.tmp}}} : A part of GWinput.tmp\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} (KPNTin1BZ.gwinit.chk){\xe{\v \i0\scaps0\b0\f2 (KPNTin1BZ.gwinit.chk)}}} : check KPNT in the 1BZ.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b  \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b If {\i0\scaps0\b0\f2 SYML} exist, {\i0\scaps0\b gwinit} gives also a template {\i0\scaps0\b0\f2 QPNTforSYML.tmp} suitable for such {\i0\scaps0\b0\f2 SYML}. Here {\i0\scaps0\b0\f2 SYML} specify how to plot the energy band. See explanation for {\i0\scaps0\b bandplot} script.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b  \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b Note that {\i0\scaps0\b0\f2 LATTC SYMOPS CLASS NLAindx} are overwritten when you execute {\i0\scaps0\b gw_lmfh} because we repeat {\i0\scaps0\b echo\~0{|}lmf} at the head of {\i0\scaps0\b gw_lmfh}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 13.3  \i0\scaps0\b echo\~-100{|}qg4gw{\xe{\v \i0\scaps0\b qg4gw}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Generate GWinput.tmp\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWIN0{\xe{\v \i0\scaps0\b0\f2 GWIN0}}} : (copy of {\i0\scaps0\b0\f2 GWIN0.tmp} by {\i0\scaps0\b gwinit})\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWIN_V2{\xe{\v \i0\scaps0\b0\f2 GWIN_V2}}} : (copy of {\i0\scaps0\b0\f2 GWIN_V2.tmp} by {\i0\scaps0\b gwinit})\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QPNT{\xe{\v \i0\scaps0\b0\f2 QPNT}}} : (copy of {\i0\scaps0\b0\f2 QPNT.tmp} by {\i0\scaps0\b gwinit})\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWinput{\xe{\v \i0\scaps0\b0\f2 GWinput}}} : (this is copied to {\i0\scaps0\b0\f2 GWinput.tmp})\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b This command "echo\~-100{|}qg4gw" is a file converter from these two files into {\i0\scaps0\b0\f2 GWinput}. And it is copied to {\i0\scaps0\b0\f2 GWinput.tmp}. ({\i0\scaps0\b0\f3 mkGIN_lmf} keeps {\i0\scaps0\b0\f2 GWinput} if it exist before you invoke it.).\par
\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 {\*\bkmkstart BMgwscscript}14{\*\bkmkend BMgwscscript}  gwsc script and its I/O Files\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 In {\i0\scaps0\b0\f3 gwsc}, we have a loop of QSGW self-consistency. Look into the {\i0\scaps0\b0\f3 gwsc} script. In each iteration, we perform these fortran programs;\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 { {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par 
\par  NO_MPI=0 #this is used for non-mpi versions of fortran program.
\par 
\par  ### self-consistent calculation for given Sigma(self-energy) ###
\par 
\par           run_arg '---' $MPI_SIZE $nfpgw   /lmf-MPIK    llmf $TARGET
\par 
\par 
\par  ### Preparation stage ##############################################
\par 
\par  argin=0;  run_arg $argin $NO_MPI  $nfpgw   /lmfgw      llmfgw00 $TARGET 
\par  argin=1;  run_arg $argin $NO_MPI  $nfpgw   /qg4gw      lqg4gw   #Generate requied q+G v
\par  argin=1;  run_arg $argin $MPI_SIZE $nfpgw  /lmfgw-MPIK llmfgw01 $TARGET
\par            run_arg  '---' $NO_MPI   $nfpgw  /lmf2gw     llmf2gw  #reform data for gw
\par 
\par  ### Main stage of gw ################################################
\par 
\par  argin=0;  run_arg $argin $NO_MPI   $nfpgw  /rdata4gw_v2 lrdata4gw_v2 #prepare files
\par  argin=1;  run_arg $argin $NO_MPI $nfpgw    /heftet      leftet # A file EFERMI for hx0fp0
\par  argin=1;  run_arg $argin $NO_MPI $nfpgw    /hchknw      lchknw # A file NW, containing nw 
\par 
\par   ## Core part of the self-energy (exchange only) ##
\par 
\par   argin=3;  run_arg $argin $NO_MPI $nfpgw    /hbasfp0    lbasC # Product basis generation 
\par   argin=3;  run_arg $argin $MPI_SIZE $nfpgw  /hvccfp0    lvccC # Coulomb matrix for lbasC 
\par   argin=3;  run_arg $argin $MPI_SIZE $nfpgw  /hsfp0_sc   lsxC  # Sigma from core1
\par 
\par 
\par   ## Valence part of the self-energy Sigma ##
\par 
\par   argin=0;  run_arg $argin $NO_MPI $nfpgw   /hbasfp0     lbas # Product basis generation 
\par   argin=0;  run_arg $argin $MPI_SIZE $nfpgw /hvccfp0     lvcc # Coulomb matrix for lbas 
\par   argin=1;  run_arg $argin $MPI_SIZE $nfpgw /hsfp0_sc    lsx  # Exchange Sigma
\par   argin=11; run_arg $argin $MPI_SIZE $nfpgw /hx0fp0_sc   lx0 $lx0_para_option #x0 part
\par   argin=2;  run_arg $argin $MPI_SIZE $nfpgw /hsfp0_sc    lsc  #correlation Sigma
\par   argin=0;  run_arg $argin $NO_MPI $nfpgw   /hqpe_sc     lqpe #all Sigma are combined.
\par 
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 {\i0\scaps0\b run_arg}:\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 Here a subroutine of bash {\i0\scaps0\b run_arg} was used, which is given in {\i0\scaps0\b0\f2 ecalj/lm7K}; it just invoke a command with the argument {\b0\i0\scaps0\f3 $argin} (this is read by read(*,*) in fortran). In cases with {\b0\i0\scaps0\f3 MPI_SIZE}{/=0}, mpirun is invoked. Console out put go to l* files. For example, {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li512\ri512\fi300 {\b0\i0\scaps0\f3 argin=2; run_arg $argin $MPI_SIZE $nfpgw /hsfp0_sc  lsc #correlation Sigma} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 invokes {\i0\scaps0\b0\f3 hsfp0_sc} with argument \rquote 2\rquote  by mpirun with the -np $MPI_SIZE. Console outputs are written into logfiles such as {\i0\scaps0\b0\f2 lqpe}. {\b0\i0\scaps0\f3 $nfpgw} contains path to the execution binaries.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0  \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 In the following, We explain input/output files for each fortran program. Note that \ldblquote {\i0\scaps0\b0\f3 echo 0{|}lmfgw}\rdblquote  means invoking {\i0\scaps0\b0\f3 lmfgw} with {\b0\i0\scaps0\f3 argin=0}.\par
\column
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 14.1  \i0\scaps0\b echo 0{|} lmfgw si{\xe{\v \i0\scaps0\b lmfgw00}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b See Sec.{\field{\*\fldinst{\lang1024 REF BMlmfgw \\* MERGEFORMAT }}{\fldrslt{13.1}}}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.2  \i0\scaps0\b echo 1{|} qg4gw{\xe{\v \i0\scaps0\b qg4gw00}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b This makes {\i0\scaps0\b q} points, and {\i0\scaps0\b G} vectors for these {\i0\scaps0\b q}. ({\i0\scaps0\b q} was {\i0\scaps0\b k} in previous sections.) Main routine of qg4gw is {\i0\scaps0\b0\f3 fpgw/main/qg4gw.m.F} and calls {\i0\scaps0\b0\f3 fpgw/gwsrc/mkqg.F}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWinput{\xe{\v \i0\scaps0\b0\f2 GWinput}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} LATTC{\xe{\v \i0\scaps0\b0\f2 LATTC}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} SYMOPS{\xe{\v \i0\scaps0\b0\f2 SYMOPS}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QGpsi{\xe{\v \i0\scaps0\b0\f2 QGpsi}}} : (bin) q and G vector for the eigenfunctions.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QGcou{\xe{\v \i0\scaps0\b0\f2 QGcou}}} : (bin) q and G vector for the Coulomb matrix\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} Q0P{\xe{\v \i0\scaps0\b0\f2 Q0P}}} : offset-{{\u915*}} points which are the replacement of the q=0 points. See section{\field{\*\fldinst{\lang1024 REF BMxxx \\* MERGEFORMAT }}{\fldrslt{?}}}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QIBZ{\xe{\v \i0\scaps0\b0\f2 QIBZ}}} : q points in the Irreducible BZ.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} BZDATA{\xe{\v \i0\scaps0\b0\f2 BZDATA}}} : (bin) BZ data for integration (include tetrahedrons if necessary). See e.g. {\i0\scaps0\b0\f3 main/hx0fp0.sc.F} and search "{\i0\scaps0\b0\f3 call read_BZDATA}", which is a readin routine of this file defined in {\i0\scaps0\b0\f3 rwbzdata.F}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} KPTin1BZ.mkqg.chk{\xe{\v \i0\scaps0\b0\f2 KPTin1BZ.mkqg.chk}}} : list of q in the 1st BZ for check.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QBZ{\xe{\v \i0\scaps0\b0\f2 QBZ}}} : q point in the 1st BZ.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} EPSwklm{\xe{\v \i0\scaps0\b0\f2 EPSwklm}}} : Required information for the BZ integration (mainly in order to evaluate the weight in the {{\u915*}} cell). See Eq.xxx in 
[{\field{\*\fldinst{\lang1024 REF BIB_xxx \\* MERGEFORMAT }}{\fldrslt{xxx}}}
].\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.3  \i0\scaps0\b echo\~1{|}lmfgw si{\xe{\v \i0\scaps0\b lmfgw01}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b Calculate eigenfunctions, eigenvalues and {{\field{\*\fldinst{ EQ {\f5\u9001*}{\u968*}|H\\s\\do5({\fs16 \i0\scaps0\b0\f0 KS})|{\u968*}{\f5\u9002*}}}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} ctrl.si{\xe{\v \i0\scaps0\b0\f2 ctrl.si}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} rst.si{\xe{\v \i0\scaps0\b0\f2 rst.si}}} : (bin) Restart file of the lmf calculation. It contains all information\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} sigm.si{\xe{\v \i0\scaps0\b0\f2 sigm.si}}} : (bin) If this exist and \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QGpsi,QGcou,Q0P{\xe{\v \i0\scaps0\b0\f2 QGpsi,QGcou,Q0P}}} : :\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} NLAindx{\xe{\v \i0\scaps0\b0\f2 NLAindx}}} : :\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} gwa.si{\xe{\v \i0\scaps0\b0\f2 gwa.si}}} : (bin) atomic data\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} gwb.si{\xe{\v \i0\scaps0\b0\f2 gwb.si}}} : (bin) band data\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} gw1.si{\xe{\v \i0\scaps0\b0\f2 gw1.si}}} : (bin) {{\field{\*\fldinst{ EQ {\f5\u9001*}{\u968*}|H\\s\\do5({\fs16 \i0\scaps0\b0\f0 KS})|{\u968*}{\f5\u9002*}}}{\fldrslt }}
} \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} gw2.si{\xe{\v \i0\scaps0\b0\f2 gw2.si}}} : (bin) {{\field{\*\fldinst{ EQ {\f5\u9001*}{\u968*}|H\\s\\do5({\fs16 \i0\scaps0\b0\f0 KS})\u8722?V\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})(n\\s\\do5({\fs16 \i0\scaps0\b0\f0 total}))|{\u968*}{\f5\u9002*}}}{\fldrslt }}
}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} vxc.si,evec.si{\xe{\v \i0\scaps0\b0\f2 vxc.si,evec.si}}} : (bin) used in hqpe.sc.m.f as "v_xc" and "evec").\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b {\i0\scaps0\b0\f2 vxc.si} contains {{\field{\*\fldinst{ EQ {\f5\u9001*}{\u968*}|V\\s\\do5({\fs16 \i0\scaps0\b0\f0 xc})(n\\s\\do5({\fs16 \i0\scaps0\b0\f0 total}))|{\u968*}{\f5\u9002*}}}{\fldrslt }}
} including off-diagonal part. {\i0\scaps0\b0\f2 evec.si} contains eigenfunctions.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} normchk.si{\xe{\v \i0\scaps0\b0\f2 normchk.si}}} : norm check (only for check) This is like this { {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b 
\par > head -20 normchk.si
\par #       IPW         IPW(diag)   Onsite(tot)   Onsite(phi)      Total
\par       0.436015      0.805123      0.563972      0.562573      0.999988
\par       0.339134      0.620353      0.660515      0.656881      0.999649
\par       0.339133      0.620353      0.660516      0.656882      0.999649
\par       0.339133      0.620353      0.660516      0.656882      0.999649
\par       0.507738      0.648515      0.492040      0.487673      0.999778
\par ...
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b This check is sometimes important for debugging and to determine the cutoff parameter {\i0\scaps0\b0\f3 QGcut_psi}. The first line (corresponding to 1st band of 1st q point) means that total normalization almost unity = 0.999988 = 0.436015 + 0.563972. Because we expand the MTO by IPW, the normalization is a bit different from unity, especially for higher bands. You can see that it get closer to unity for larger QGcut_psi, though it does not reach to unity because of some contribution of the higher angular momentum contribution within MT. [Values of {\b0\i0\scaps0\f3 Onsite(phi)} are not correctly shown in the case when you use local orbital.]\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b Due to historical reason, data in {\i0\scaps0\b0\f2 vxc.si} and {\i0\scaps0\b0\f2 exec.si} and others contains duplicated data. \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.4  \i0\scaps0\b lmf2gw{\xe{\v \i0\scaps0\b lmf2gw}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b All the required information are stored into {\i0\scaps0\b0\f2 DATA4GW_V2} and {\i0\scaps0\b0\f2 CphiGeig}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} gwa.si{\xe{\v \i0\scaps0\b0\f2 gwa.si}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} gwb.si{\xe{\v \i0\scaps0\b0\f2 gwb.si}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} gw1.si{\xe{\v \i0\scaps0\b0\f2 gw1.si}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} gw2.si{\xe{\v \i0\scaps0\b0\f2 gw2.si}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} Q0P{\xe{\v \i0\scaps0\b0\f2 Q0P}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} CLASS{\xe{\v \i0\scaps0\b0\f2 CLASS}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} NLAindx{\xe{\v \i0\scaps0\b0\f2 NLAindx}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} DATA4GW_V2{\xe{\v \i0\scaps0\b0\f2 DATA4GW_V2}}} : (bin) Main data for GW calculations. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b I/O of {\i0\scaps0\b0\f2 DATA4GW_V2} is controlled by {\i0\scaps0\b0\f3 gwinput.f}, which contains detailed information.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} CphiGeig{\xe{\v \i0\scaps0\b0\f2 CphiGeig}}} : (bin) Eigenfunctions for GW calculations.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} VXCFP.chk{\xe{\v \i0\scaps0\b0\f2 VXCFP.chk}}} : Eigenvalue and Vxc check (only used for check)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b It is like this; { \fs14  {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 \fs14 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \fs14 \b 
\par ### LDA exchange correlation ###
\par #   qvec              ikp iband    eigen        VXC(ntotal)    VXC(nvalence)      eigen(eV)    VXC(ntotal)(eV)  VXC(nvalence)
\par 0.0000  0.0000  0.0000  1  1     -0.68505346     -0.91850436      0.00000000     -9.32070032    -12.49698668      0.00000000
\par 0.0000  0.0000  0.0000  1  2      0.19292662     -0.99853478      0.00000000      2.62492096    -13.58586453      0.00000000
\par 0.0000  0.0000  0.0000  1  3      0.19292763     -0.99853469      0.00000000      2.62493477    -13.58586334      0.00000000
\par 0.0000  0.0000  0.0000  1  4      0.19292777     -0.99853461      0.00000000      2.62493664    -13.58586222      0.00000000
\par  ...
\par \par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b Here {\i0\scaps0\b0\f3 VXC(nvalence)} is not used now. The eigenvalue in {\i0\scaps0\b0\f3 eigen} is in Ry. \par
{\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \b \emdash  This is the end of the preparation stage. \emdash  \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb284 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b From here, the main stage.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.5  \i0\scaps0\b rdata4gw_v2{\xe{\v \i0\scaps0\b rdata4gw_v2}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Read {\i0\scaps0\b0\f2 DATA4GW_V2} and some files, and decompose it into files required in the following {GW}steps. (checked! dec2014)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWinput{\xe{\v \i0\scaps0\b0\f2 GWinput}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} DATA4GW_V2{\xe{\v \i0\scaps0\b0\f2 DATA4GW_V2}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} CphiGeig{\xe{\v \i0\scaps0\b0\f2 CphiGeig}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QGpsi{\xe{\v \i0\scaps0\b0\f2 QGpsi}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QGcou{\xe{\v \i0\scaps0\b0\f2 QGcou}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} Q0P{\xe{\v \i0\scaps0\b0\f2 Q0P}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QIBZ{\xe{\v \i0\scaps0\b0\f2 QIBZ}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} SYMOPS{\xe{\v \i0\scaps0\b0\f2 SYMOPS}}} : points group operations.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} hbe.d{\xe{\v \i0\scaps0\b0\f2 hbe.d}}} : data size\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} Core_ibas*_l*.chk{\xe{\v \i0\scaps0\b0\f2 Core_ibas*_l*.chk}}} : core eigenfunctions just for check.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} LMTO{\xe{\v \i0\scaps0\b0\f2 LMTO}}} : basic date for the crystal.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} EValue{\xe{\v \i0\scaps0\b0\f2 EValue}}} : (bin) valence eigen value\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} ECORE{\xe{\v \i0\scaps0\b0\f2 ECORE}}} : core data and core eigenvalues\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} CPHI{\xe{\v \i0\scaps0\b0\f2 CPHI}}} : (bin) Coefficients of eigenfunctions as for the atomic-like argumentation waves in MTs\rquote .\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GEIG{\xe{\v \i0\scaps0\b0\f2 GEIG}}} : (bin) Coefficients of eigenfunctions as for IPW.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PHIVC{\xe{\v \i0\scaps0\b0\f2 PHIVC}}} : (bin) All the radial functions.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} @MNLA_CPHI{\xe{\v MNLA_CPHI}}} : index set for {\i0\scaps0\b0\f2 CPHI}. This is not refereed just a check write.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} @MNLA_core{\xe{\v MNLA_core}}} : index set for core. This is not refereed just a check write.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} VXCFP{\xe{\v \i0\scaps0\b0\f2 VXCFP}}} : (bin) this is for diagonal elements of {{\field{\*\fldinst{ EQ V\\s\\up({\fs16 \i0\scaps0\b0\f0 LDA,\i0\scaps0\b0\f0 xc})(n\\s\\do5({\fs16 \i0\scaps0\b0\f0 total}))}}{\fldrslt }}
}. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PPOVLI.*{\xe{\v \i0\scaps0\b0\f2 PPOVLI.*}}} : (bin) Overlap matrix of IPW. xxxxxxxxxx\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PPOVLG.*{\xe{\v \i0\scaps0\b0\f2 PPOVLG.*}}} : (bin) PPOVLG Overlap matrix xxxxxxxxxxoxf IPW. not exactly the the overlap matrix. see around line 500 in rdata4gw.m.f\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PPOVL0{\xe{\v \i0\scaps0\b0\f2 PPOVL0}}} : (bin) xxxxxxxxxxxxx\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} HVCCIN{\xe{\v \i0\scaps0\b0\f2 HVCCIN}}} : (bin) Required inputs for hvccfp0. Information in this files. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} NQIBZ{\xe{\v \i0\scaps0\b0\f2 NQIBZ}}} : q point info. Only used for parallel test mode.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} normchk.dia{\xe{\v \i0\scaps0\b0\f2 normchk.dia}}} : Norm check. These numbers should be almost the same as those in normchk.si\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb170 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b These files are input for the following steps. The name of file {\i0\scaps0\b0\f2 {\scaps0\b0\i foo}U} means that it relates to up-spin. We have {\i0\scaps0\b0\f2 {\scaps0\b0\i foo}D} files in the case of spin-polarized calculation with {\i0\scaps0\b0\f3 nspin=2}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.6  \i0\scaps0\b echo\~1{|}heftet{\xe{\v \i0\scaps0\b heftet}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Get the Fermi energy {\i0\scaps0\b0\f2 EFERMI} by tetrahedron method. It is used in {\i0\scaps0\b hx0fp0}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} EVU{\xe{\v \i0\scaps0\b0\f2 EVU}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} BZDATA{\xe{\v \i0\scaps0\b0\f2 BZDATA}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWinput{\xe{\v \i0\scaps0\b0\f2 GWinput}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} ECORE{\xe{\v \i0\scaps0\b0\f2 ECORE}}} : (dummy)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} SYMOPS{\xe{\v \i0\scaps0\b0\f2 SYMOPS}}} : (dummy) \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} LMTO{\xe{\v \i0\scaps0\b0\f2 LMTO}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} hbe.d{\xe{\v \i0\scaps0\b0\f2 hbe.d}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} EFERMI{\xe{\v \i0\scaps0\b0\f2 EFERMI}}} : contains Fermi energy given by the tetrahedron method. It is used in {\i0\scaps0\b hx0fp0} but not in {\i0\scaps0\b hsfp0}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} DOSACC.lda,DOSACC2.lda{\xe{\v \i0\scaps0\b0\f2 DOSACC.lda,DOSACC2.lda}}} : They are lists of the all the eigenvalues from the bottom. {\i0\scaps0\b0\f2 DOSACC2.lda} is a list to show only the un-degenerated eigenvalues. They are just check write. But it is an indicator for you to determine {\b0\i0\scaps0\f3 esmr} in {\i0\scaps0\b0\f2 GWinput}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.7  \i0\scaps0\b hchknw{\xe{\v \i0\scaps0\b hchknw}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Calculate the required number of {{\u969*}} points along real axis.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b This {\i0\scaps0\b0\f2 NW} is not essentially used in {\i0\scaps0\b0\f3 gw_lmfh} (but required as a dummy file). Only used in {\i0\scaps0\b0\f3 gw_lmf}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} BZDATA{\xe{\v \i0\scaps0\b0\f2 BZDATA}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWinput{\xe{\v \i0\scaps0\b0\f2 GWinput}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} ECORE{\xe{\v \i0\scaps0\b0\f2 ECORE}}} : (dummy)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} SYMOPS{\xe{\v \i0\scaps0\b0\f2 SYMOPS}}} : (dummy) \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} NW{\xe{\v \i0\scaps0\b0\f2 NW}}} : contains number of {{\u969*}} points.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.8  \i0\scaps0\b echo\~3{|}hbasfp0{\xe{\v \i0\scaps0\b hbasfp0}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Make product basis.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b Mode 3 is for the core states. It generate a product basis on each MT suitable to expand to calculate the exchange part due to core. See explanations for the input file of {\i0\scaps0\b0\f2 GWinput}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} LMTO{\xe{\v \i0\scaps0\b0\f2 LMTO}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PHIVC{\xe{\v \i0\scaps0\b0\f2 PHIVC}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWinput{\xe{\v \i0\scaps0\b0\f2 GWinput}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} BASFP*{\xe{\v \i0\scaps0\b0\f2 BASFP*}}} : (bin) Product basis functions\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PPBRD_V2_*{\xe{\v \i0\scaps0\b0\f2 PPBRD_V2_*}}} : (bin) Radial integrals on each MT, symbolically written as {{\field{\*\fldinst{ EQ  \\i \\in(,, ){\u966*}(r){\u966*}(r)B(r)dr}}{\fldrslt }}
}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PHIV.chk{\xe{\v \i0\scaps0\b0\f2 PHIV.chk}}} : Valence radial functions (for check).\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.9  \i0\scaps0\b echo 0{|} hvccfp0{\xe{\v \i0\scaps0\b hvccfp0}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Calculate the Coulomb matrix in the Mixed basis\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} HVCCIN{\xe{\v \i0\scaps0\b0\f2 HVCCIN}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} Q0P{\xe{\v \i0\scaps0\b0\f2 Q0P}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} BASFP*{\xe{\v \i0\scaps0\b0\f2 BASFP*}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} VCCFP{\xe{\v \i0\scaps0\b0\f2 VCCFP}}} : The Coulomb matrix expanded in the mixed basis\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} Mix0vec{\xe{\v \i0\scaps0\b0\f2 Mix0vec}}} : This is used only for dielectric-constant calculation (mode 2 or 3 of {\i0\scaps0\b hx0fp0}). This contains the expansion of the plane wave {{\plain exp}(i{\i0\scaps0\b qr})} in the mixed basis. See Usuda\rquote s note.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.10  \i0\scaps0\b echo\~3{|}hsfp0{\xe{\v \i0\scaps0\b hsfp0}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Exchange part of the self-energy for the core\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWIN_V2,LMTO,ECORE{\xe{\v \i0\scaps0\b0\f2 GWIN_V2,LMTO,ECORE}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} CLASS{\xe{\v \i0\scaps0\b0\f2 CLASS}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} hbe.d{\xe{\v \i0\scaps0\b0\f2 hbe.d}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} Q0P{\xe{\v \i0\scaps0\b0\f2 Q0P}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PPBRD_V2_*{\xe{\v \i0\scaps0\b0\f2 PPBRD_V2_*}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} CPHI{\xe{\v \i0\scaps0\b0\f2 CPHI}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GEIG{\xe{\v \i0\scaps0\b0\f2 GEIG}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} VCCFP{\xe{\v \i0\scaps0\b0\f2 VCCFP}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PPOVL{\xe{\v \i0\scaps0\b0\f2 PPOVL}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} SEXcoreU{\xe{\v \i0\scaps0\b0\f2 SEXcoreU}}} : The core part of the exchange self-energy for {\i0\scaps0\b q} and band index specified in {\i0\scaps0\b0\f3 {<}QPNT{>}}. See {\field{\*\fldinst{\lang1024 REF BMmainoutput \\* MERGEFORMAT }}{\fldrslt{?}}}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.11  \i0\scaps0\b echo\~0{|}hsfp0{\xe{\v \i0\scaps0\b hbasfp0}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Make product basis for the valence part.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.12  \i0\scaps0\b echo\~1{|}hsfp0{\xe{\v \i0\scaps0\b hsfp0}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Exchange part of the self-energy for the valence part.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} XCU{\xe{\v \i0\scaps0\b0\f2 XCU}}} : The LDA exchange self-energy for {\i0\scaps0\b q} and band index specified in {\i0\scaps0\b0\f3 {<}QPNT{>}}. See {\field{\*\fldinst{\lang1024 REF BMmainoutput \\* MERGEFORMAT }}{\fldrslt{?}}}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} SEXU{\xe{\v \i0\scaps0\b0\f2 SEXU}}} : The valence part of the exchange self-energy for {\i0\scaps0\b q} and band index specified in {\i0\scaps0\b0\f3 {<}QPNT{>}}. See {\field{\*\fldinst{\lang1024 REF BMmainoutput \\* MERGEFORMAT }}{\fldrslt{?}}}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.13  \i0\scaps0\b echo\~11{|}hx0fp0{\xe{\v \i0\scaps0\b hx0fp0}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Screened Coulomb interaction {W}(Sergey mode)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWinput, LMTO, ECORE, EVU{\xe{\v \i0\scaps0\b0\f2 GWinput, LMTO, ECORE, EVU}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} NW{\xe{\v \i0\scaps0\b0\f2 NW}}} : dummy\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} hbe.d{\xe{\v \i0\scaps0\b0\f2 hbe.d}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} Q0P{\xe{\v \i0\scaps0\b0\f2 Q0P}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PPBRD_V2_*{\xe{\v \i0\scaps0\b0\f2 PPBRD_V2_*}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} CPHI,GEIG{\xe{\v \i0\scaps0\b0\f2 CPHI,GEIG}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PPOVL{\xe{\v \i0\scaps0\b0\f2 PPOVL}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} VCCFP{\xe{\v \i0\scaps0\b0\f2 VCCFP}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} ANFcond{\xe{\v \i0\scaps0\b0\f2 ANFcond}}} : (optional) This file is to specify antiferro condition. This should not exist for other cases. This file should be given by hand.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} WV.d{\xe{\v \i0\scaps0\b0\f2 WV.d}}} : size of the dielectric function\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} WVR{\xe{\v \i0\scaps0\b0\f2 WVR}}} : (bin) {W\u8722?v} in the expansion of mixed basis along the real axis\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} WVI{\xe{\v \i0\scaps0\b0\f2 WVI}}} : (bin) {W\u8722?v} in the expansion of mixed basis along the imaginary axis\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.14  \i0\scaps0\b echo\~12{|}hsfp0{\xe{\v \i0\scaps0\b hsfp0}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Correlation part of the self-energy(Sergey mode)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} GWinput, LMTO, ECORE, SYMOPS{\xe{\v \i0\scaps0\b0\f2 GWinput, LMTO, ECORE, SYMOPS}}} : These are readin by {\i0\scaps0\b0\f3 genallcf_v3}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} CLASS, hbe.d, EVU, Q0P{\xe{\v \i0\scaps0\b0\f2 CLASS, hbe.d, EVU, Q0P}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PPBRD_V2_*{\xe{\v \i0\scaps0\b0\f2 PPBRD_V2_*}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b Radial integrals on each MT, symbolically written as {{\field{\*\fldinst{ EQ  \\i \\in(,, ){\u966*}(r){\u966*}(r)B(r)dr}}{\fldrslt }}
}. These are generated by {\i0\scaps0\b0\f2 hbasfp0}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} CPHI,GEIG{\xe{\v \i0\scaps0\b0\f2 CPHI,GEIG}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} PPOVL{\xe{\v \i0\scaps0\b0\f2 PPOVL}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} WV.d, WVR, WVI{\xe{\v \i0\scaps0\b0\f2 WV.d, WVR, WVI}}} : \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} SECU{\xe{\v \i0\scaps0\b0\f2 SECU}}} : The correlation part of the self-energy for {\i0\scaps0\b q} and band index specified in {\i0\scaps0\b0\f2 {<}QPNT{>}}. See {\field{\*\fldinst{\lang1024 REF BMmainoutput \\* MERGEFORMAT }}{\fldrslt{?}}}.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b 14.15  \i0\scaps0\b echo 0{|}hqpe{\xe{\v \i0\scaps0\b hqpe}}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b \emdash  Summarize the output\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Input files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} SEXcoreU,XCU,SEXU,SECU{\xe{\v \i0\scaps0\b0\f2 SEXcoreU,XCU,SEXU,SECU}}} : See {\field{\*\fldinst{\lang1024 REF BMmainoutput \\* MERGEFORMAT }}{\fldrslt{?}}}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {Output files}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} QPU{\xe{\v \i0\scaps0\b0\f2 QPU}}} : The QP energies and related value summary in human interface. See {\field{\*\fldinst{\lang1024 REF BMmainoutput \\* MERGEFORMAT }}{\fldrslt{?}}}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} TOTE{\xe{\v \i0\scaps0\b0\f2 TOTE}}} : The detailed values of the QP energies. See {\field{\*\fldinst{\lang1024 REF BMmainoutput \\* MERGEFORMAT }}{\fldrslt{?}}}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \b {\i0\scaps0\b0\f2 {{\u8226*}} TOTE2{\xe{\v \i0\scaps0\b0\f2 TOTE2}}} : The detailed values of the QP energy. See {\field{\*\fldinst{\lang1024 REF BMmainoutput \\* MERGEFORMAT }}{\fldrslt{?}}}. This is used for {\i0\scaps0\b bndplot}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \b   NOTE: For example, if you do {\b0\i0\scaps0\f3 \{echo 4$|$hqpe\}\{hqpe\}}, it just shift zero level of QPE, so that 4th line (counted from top) eigenvalue (in QPU) is to be zero.\par
\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 {\*\bkmkstart BMchecklist}15{\*\bkmkend BMchecklist}  Check list for convergence on GW calculations\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Results could be dependent on cutoff parameters in {\i0\scaps0\b0\f2 GWinput}. In my opinion, generally speaking, it is so easy to have convergence more than {{\f5\u8764*}} 0.1eV for band gap...\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Number of k points {\i0\scaps0\b0\f3 n1n2n3}.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Probably {4{\u215*}4{\u215*}4} (or {6{\u215*}6{\u215*}6}) are reasonable choice for insulator in the case of two atoms such as GaAs. In other words, \lquote \rdblquote used periodic cell volume\rdblquote  = {4{\u215*}4{\u215*}4{\u215*}} (# of atoms) {{\u215*}} (Volume per atom)\rdblquote . For example, for {{\field{\*\fldinst{ EQ 2{\u215*}2\\s\\up5({\fs16 3})=16}}{\fldrslt }}
} atoms per cell, we can use {2{\u215*}2{\u215*}2} instead of {4{\u215*}4{\u215*}4} (this is the same as in the case of LDA).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 For metals, {12{\u215*}12{\u215*}12} or more per atom may be required. But it depends on case by case.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
MTO\rquote s and APWs. Basis for eigenfunctions.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 If we like to get \ldblquote best converged results, we may need to use large enough MTO\rquote s. (I think the default setting is reasonable; but there is a room to change MTO settings in {\i0\scaps0\b0\f2 ctrl.*}.). But, in cases, we can not use large APW cutoff ({\b0\i0\scaps0\f3 pwemax}) more than {3.0{\f5\u8764*}4.0} Ry because of poor linear dependency of basis set (calculation in LDA level fails). In such a case, we need to use \ldblquote smaller MT radius {\b0\i0\scaps0\f3 R=}\rdblquote . Then we may need semi-core as local orbital when \ldblquote its spillout in the outside of MTs is too large\rdblquote .\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 In {\i0\scaps0\b0\f2 GWinput}, we can set the number of unoccupied states which you take into account by {\i0\scaps0\b0\f3 emax_chi0}, {\i0\scaps0\b0\f3 emax_sigm},{\i0\scaps0\b0\f3 nband_chi0}, and {\i0\scaps0\b0\f3 nband_sigm}. But we usually unset them except {\i0\scaps0\b0\f3 emax_sigm} for {\i0\scaps0\b0\f3 gwsc}.\par
(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 We may need a kind of completeness of the basis set; the completeness could be important from the view of \lquote Coulomb hole\rquote  picture.)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 NOTE: Current PMT-QSGW method 
[{\field{\*\fldinst{\lang1024 REF BIB_xxx \\* MERGEFORMAT }}{\fldrslt{xxx}}}
] expand the static version of self-energy of QSGW just in the basis of MTO\rquote s (no APWs). Thus the expansion can be unsatisfactory (it depends on case by case, and required convergence). In such a case, we inevitably have to use empty spheres (MTO\rquote s) which is for empty region.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Cores.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 We usually use all cores as {\i0\scaps0\b core1} (exchange only core). If necessary, it is better to treat shallow cores by the local orbitals (such cores are treated as valence).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \emdash followings are obsolate \emdash \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 If we treat cores by {\i0\scaps0\b core2} (not only for exchange, but also in dielectric functions), we have to be careful about the core wave orthogonalization with respect to valence eigenfuncitons; this is a little complicated; probably it is better not to use {\i0\scaps0\b core2}).\par
(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 This is related to {\i0\scaps0\b0\f3 CoreOrth} (only for core2). If it affects so much, {{\i D}} function might be too poor due to the poor orthogonality condition between core and valence.) (NOTE: {\i0\scaps0\b0\f3 CoreOrth} is not maintained recently)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 ------------- \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 QpGcut_psi} IPW cutoff to expand eigenfuncitons in the interstitial region. We usually use {\b0\i0\scaps0\f3 QpGcut\\_psi 4.0}. Usually not so bad. Larger is better but expensive. You may test calculations with {\b0\i0\scaps0\f3 QpGcut\\_psi 3.0}, and how much difference of results.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 QpGcut_cou} IPW cutoff to expand the Coulomb interaction in the interstitial region (Mixed product basis(MPB) consist of this IPW and PB). interstitial region. We usually use {\b0\i0\scaps0\f3 QpGcut\\_cou 3.0}. Usually not so bad. Larger is better but expensive. You may test calculations with {\b0\i0\scaps0\f3 QpGcut\\_cou 2.5}, and how much difference of results.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Product basis section.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 At least, {\b0\i0\scaps0\f3 lcutmx}=4 will be necessary for atoms with d electrons. (but {\b0\i0\scaps0\f3 lcutmx}=2 look reasonable for oxygen, {\b0\i0\scaps0\f3 lcutmx}=1 for hydrogen. Need check).\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 esmr}.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 In our experience, {\b0\i0\scaps0\f3 esmr=0.003000} (default) is reasonable. But there is a room to check stability on it for metals. In principle, for larger n1n2n3, we can use smaller {\b0\i0\scaps0\f3 esmr}.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 dw, omg_c} {\i0\scaps0\b0\f3 niw}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 It will be worth to try to check how much the results changed due to them. But usually {\b0\i0\scaps0\f3 dw=0.005, omg_c=0.04} is not so bad a choice. As for {\b0\i0\scaps0\f3 niw=10} seems to be not so bad usually, but it is safer to check the convergence on it (test cases with {\b0\i0\scaps0\f3 niw=6,10,12,16}).\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 deltaw}. {{\f5\u8764*}0.01} a.u. will be not so bad. See two Z values shown in {\i0\scaps0\b0\f2 SXCU}. It is better to try to check how about the dependence on this.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 chi_regqbz off}. (on is default). If off, we use off-Gamma mesh (Gamma point is between mesh points) for dielectric functions when we perform GW or QSGW. \ldblquote chi_regqbz off\rdblquote  may accelerate convergence on number of k points.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 PWMODE=1} in ctrl This used fixed number of G vector determined at q=0 \par
}\column
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 \par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 {\*\bkmkstart BMlinearr}16{\*\bkmkend BMlinearr}  Linear response calculations\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 With these scripts for linear response calculations, {\b0\i0\scaps0\f3 eps*}, we can calculate {{\i0\scaps0\b q}}-dependent dielectric funciton {{\u949*}({\u969*},{\i0\scaps0\b q})} (and {{\i v}}, {{\i W}}) (and {{\u967*}} for spin fluctuation). But (because of numerical reason), we can not use {{\i0\scaps0\b q}=0} limit. (if {|{\i0\scaps0\b q}|} is too small, we have numerical problem, zero divided by zero, because we have not implemented the version to use {{\i0\scaps0\b q}=0}.) {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 eps_lmfh}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Dielectric function epsilon with local field correction. Expensive calculation (we may need to reduce number of wing parts in future...).\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 epsPP_lmfh}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 epsilon without local field correction. {{\field{\*\fldinst{ EQ 1\u8722?{\f5\u9001*}{\i e}\\s\\up5({\fs16 {\i i}{\i0\scaps0\b q}{\i0\scaps0\b r}})|{\i v}|{\i e}\\s\\up5({\fs16 {\i i}{\i0\scaps0\b q}{\i0\scaps0\b r}}){\f5\u9002*}{\f5\u9001*}{\i e}\\s\\up5({\fs16 {\i i}{\i0\scaps0\b q}{\i0\scaps0\b r}})| \\b ({\u967*}\\s\\up5({\fs16 0}))|{\i e}\\s\\up5({\fs16 {\i i}{\i0\scaps0\b q}{\i0\scaps0\b r}}){\f5\u9002*}}}{\fldrslt }}
}\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 epsPP_lmfh_chipm}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 For spin susceptibility. This essentially calculate non-interacting spin susceptibility. Then it is used for the calculation of full spin susceptibility with {\b0\i0\scaps0\f3 util/calj_*.F} programs (small quick programs). See spin wave paper. See spin susceptibility section Sec.{\field{\*\fldinst{\lang1024 REF BMxxx \\* MERGEFORMAT }}{\fldrslt{?}}}.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
(not maintained now; we will recover this){\i0\scaps0\b0\f3 eps_lmfh_chipm}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 This gives full non-interacting spin susceptibility. Testing. We have to determine {{\i U}} (Stoner {{\i I}}) for the determination of full spin susceptibility. TDLDA? or so?\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\i0\scaps0\b0\f3 (This is old mode \emdash  not maintained) epsPP_lmfh_chipm_q}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 For spin susceptibility, spin susceptibility {{\field{\*\fldinst{ EQ {\f5\u9001*}{\i e}\\s\\up5({\fs16 {\i i}{\i q}{\i r}})|{\u967*}({\i q}\\,{\u969*})|{\i e}\\s\\up5({\fs16 {\i i}{\i q}{\i r}}){\f5\u9002*}}}{\fldrslt }}
} In this script, You have to assign that isp=1 is majority, isp=2 is minority. This is with long wave approximation. \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb100 \fi300 ---------------------\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {{\u8226*}} We use the histogram method (the Hilbert transformation method); we first calculate its imaginary parts with the tetrahedron technique for dielectric functions. Then we get its real part by the Hilbert transformation.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 You need to choose {\i0\scaps0\b0\f3 HisBin_dw,HisBin_ratio}. The width of histogram bins are getting larger when omega gets larger. dw is the size of histogram-bin width at omega=0. At omega=omg_c, its width gets twiced.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To plot dielectric function with reasonable resolution, it might be better to set {\b0\i0\scaps0\f3 dw 0.001} and {\b0\i0\scaps0\f3 omg_c 0.1} for example. You may have to choose small enough omega for spin wave mode as 0.001 Ry (Or smaller). omg_c is given like 0.05 Ry or so. But sometimes it can be like 1Ry.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {{\u8226*}} {\i0\scaps0\b0\f3 epsPP_lmfh} only calculation an matrix element of dielectric funciton for {{\i e}{\i x}{\i p}({\i i}{\i0\scaps0\b q}{\i0\scaps0\b r})}. Thus very faster than {\i0\scaps0\b0\f3 eps_lmfh} mode. It uses a a special product basis set for cases without inversion (problem is in how to expand {{\plain exp}({\i i}{\i0\scaps0\b q}{\i0\scaps0\b r})} in the MPB; the product basis is not from phi and phidot, but from spherical Bessel functions).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par In *_lmfh_* modes( I now use little for *_lmf_* modes), you can use small enough delta.
\par Use small enough delta (=-1e-8 a.u.) for spin wave modes (also you can use it for 
\par dielectric function and GW).  This is necessary because pole is too smeared 
\par if you use larger delta.
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 16.1  eps_lmfh, epsPP_lmfh: the dielectric functions\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 You can invoke the script, e.g. as "{\i0\scaps0\b0\f3 eps_lmfh}  si".\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 ----------------\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Specify {{\i0\scaps0\b q}} point in {\b0\i0\scaps0\f3 <QforEPS>} or so. Mesh for {{\u969*}} is specified by {\i0\scaps0\b0\f3 dw, omg_c}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The obtained data are in {\i0\scaps0\b0\f2 EPS*.dat} and {\i0\scaps0\b0\f2 EPS*.nlfc.dat}. {\i0\scaps0\b0\f2 EPS*.nlfc.dat} contains the result without local-field correction {\i0\scaps0\b0\f2 EPS*.dat} contains the result with local-field correction (this is generated only for {\b0\i0\scaps0\f3 eps_lmfh}. Both of them contains\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\i0\scaps0\b q}(1:3), {{\u969*}}, Re({{\u949*}}) Im({{\u949*}}), Re(1/{{\u949*}}), In(1/{{\u949*}})\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 in each line.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
This code works OK only for {{\i0\scaps0\b q}} is near 0. Be careful for {{\i0\scaps0\b q}{\u8594*}0} limit. Too small {{\i0\scaps0\b q}} can give strange spectrum at high energy (real part is affected by it)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 Because {{\i0\scaps0\b q}{\u8594*}0} gives too large cancellation effects (the denominator and numerator go to zero\emdash it means we need very accurate orthogonalization between occupied and unoccupied states). This is a kind of disadvantage of our method (though there is an advantage\emdash  our code can calculate dielectric function even for metal as far as you use large enough number of {{\i0\scaps0\b k}} point.)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
The calculate of dielectric functions usually requires so many {{\i k}} point. For example, for Si, {\b0\i0\scaps0\f3 n1 n2 n3 = 4 4 4} is too small. It gives too large dielectric constants {{\f5\u8764*}19.4} though the converged value should be {{\f5\u8764*}13}. (we need 10x10x10 or more like 20x20x20 for some reasonable results). For GaAs, we observed that reasonable {{\u949*}({\u969*})} requires rather large number of {{\i0\scaps0\b q}} points like 15x15x15 or 20x20x20 for {\i0\scaps0\b0\f3 n1n2n3}. This is too time-consuming to get result (but you can use \ldblquote very small product basis\rdblquote (just sp polarization for this purpose; it makes speed up so much). Or, you can calculate "{{\u949*}({\u969*})} without LFC". See section for {\i0\scaps0\b0\f3 eps_PP_lmfh}.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
Core orthogonalization problem (only when core2 is used)\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 ----{\i0\scaps0\b0\f3 CoreOrth} is not maintained recently \emdash  {\i0\scaps0\b0\f3 CoreOrth} gives so serious effect for {{\u949*}({\u969*})}, if you include some cores as "{\i0\scaps0\b core2}" in the product basis setting. (This means that you includes transitions from "{\i0\scaps0\b core2} to valence" in the calculation of {{\u949*}({\u969*})}).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 Then you have to use "{\i0\scaps0\b0\f3 CoreOrth} on". Without it, you will have rather large imaginary part at rather high energy Such transitions from core to higher valence bands is artificial due to the incomplete orthogonality between core and the higher bands. However, shallower {{\i d}} semi-core might be deformed too much by this option. Try to plot {\i0\scaps0\b0\f2 Core_*.chk} files, which contains core radial functions. Anyway, it is better to treat shallow core as valence by \ldblquote local orbital\rdblquote . \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 16.2  epsPP_lmfh: the dielectric function(No LFC\emdash  faster)\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 You can calculate {{\u949*}} without LFC by {\i0\scaps0\b epsPP_lmfh}. It is very faster than {\i0\scaps0\b0\f3 eps_lmfh}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To calculate {{\u949*}({\i0\scaps0\b q},{\u969*})} without LFC accurately, the best basis set for the expansion of the Coulomb matrix within MT is apparently not the product basis, but the Bessel functions corresponding to the plane waves {{\plain exp}({\i i}{\i0\scaps0\b qr})}. We use such a basis in this mode. However, our experience shows that the changes are little even with the usual product basis (we don\rquote t describe this here).\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 16.3  How to calculate correct dielectric funciton?\par
(\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 this subsection is essentially OK... but need to clean it up. dec2014)\par
{\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \fi0 
\par 
\par There are prolems to calculate correct epsilon.
\par At first, we talk about epsPP_lmfh, which is No LFC. Main problem are 
\par 
\par -----------------
\par 1.Convergence for number of k point(specified by n1n2n3). 
\par   Roughly speaking, 20x20x20 is required for not-so-bad results for Fe and Ni.
\par   It is better to do 30x30x30 to see convergence check.
\par   However, in the case of ZB-MnAs (maybe because of simple structure around Ef),
\par   it requires less q points.
\par 
\par   figs are for GaAs.
\par   fig001: n1n2n3 convergence for Chi_RegQbz = on  case.
\par   fig002: n1n2n3 convergence for Chi_RegQbz = off case.
\par   (Chi_RegQbz in explained in General section in this manual).
\par 
\par   As you see, k points convergence looks a little better in Chi_RegQbz=off
\par   (mesh not including gamma). However a little ploblem is that its thereshold around 
\par   0.5eV is too high and slowly changing.
\par 
\par   fig003: Alouanis'(from Arnaud)  vs. ``Chi_RegQbz = on'' vs. ``Chi_RegQbz = off''
\par   As you see, the threshold of the Red line (20x20x20 Chi_RegQbz=on) and Alouani's 
\par   are almost the same, but the red line is too oscilating at the low energy part.
\par   On the other hand, ``Chi_RegQbz = off'' in Green broken line is not so satisfactory
\par   at the low energy part. 
\par 
\par   fig.gas_eps_kconf.pdf shows the convergence behevior of epsilon for 
\par   
\par    
\par 2.$q \\to 0$ convergence (this is related to whether Chi_RegQbz=on or off).
\par   If you use very small q like q=0.001 is GaAs, it can cause a problem.
\par   Use q=0.01 or larger (maybe q=0.02 or more is safer). 
\par   Very small q can give numerical error for high-energy region.
\par 
\par   In fig004, we show the high energy tail part of Im $\\epsilon(\\omega)$ for GaAs case.
\par   At q=0.01 (this means q= 2*pi/alat * (0 0 0.01)), the imaginary part
\par   is a little too large . Less than 80eV, q=0.02 gives good results when compared with
\par   other high q results, though it still has noise above 80eV.
\par   In fig005, I showed the same results compared with Alouani's (his is up to 40eV).
\par   Both gives rather good agreements. As you see, q=0.06 or above might be necessary
\par   to get reasonable convergence for high energy part abouve 40eV.
\par 
\par   We have to be careful for this poorness in high energy part--- it may effect
\par   low-energy Re[$\\epsion$] through KK relation. However this can be very small
\par   ehough.
\par   In fig.gas_eps_qconv.jpg, we checked the convergence of eps (\\omega=0,q) for q \\to 0.
\par   As you see, it gives convergence, however, q=0.01 is a little out of 
\par   curve---this should be because of the poorness in the high energy part.
\par   so q=0.02 or q=0.03 is safer, and you can get eps within 1 percenr accuracy.
\par 
\par 3. Including Core for dielectric constant is dangerous. 
\par    It can cause very poor results if you include core part in GWinput.
\par    You need to include core just as valence (with local orbital).
\par 
\par    In fig008, we showed core effects. It starts from \\approx 16eV 
\par    (this is core to conduction transition).
\par    fig007 showd the check about the q point dependence---even with large q,
\par    it would not change.
\par    These shows that the core excitation can have larger energy range.
\par    This is in contrast to the valence case 
\par    (then the most of excitaion is limited to less than 10eV).
\par    We have to be careful for such high-energy exciation... The LMTO basis might
\par    be not so good for high energy.
\par 
\par 4. basis set.
\par    Use QpGcut_psi \\approx 3.0 a.u. or so (as same as GW calculation).
\par    In the case of epsPP* mode, 
\par    QpGcut_cou can be very small--- In our codes now, 
\par    ngc>=1 should be for all q vector shown in lqg4gw02 (output of echo 2|qg4gw).
\par    [In principle, it should be only for the q vector for which we calculate epsilon.
\par     But there is a technical poorness in our code---
\par     (maybe) a problem here; the plane-wave part of the eigenfunction generated 
\par     in lmfgw is not correctly passed to lmf2gw when ngc=0].
\par 
\par 
\par -- eps_lmfh: including LFC ----------------------------------
\par To include eps with LFC, do eps_lmfh. 
\par But lcutmx=2 seems to be good enough to get 0.5 percent error (maybe better than this).
\par Test it 10x10x10 or so. (I need to repeat if necessary).
\par Further you can use smaller QpGcut_cou like 2.2 or so, 
\par with rather smaller product basis (up to p timed d, not including f).
\par 
\par Note: epsPP_lmfh is designed to use good basis to calculate eps 
\par without LFC. This is usually in agreement with what you obtained by eps_lmfh;
\par however it can give slight difference when you use small product basis.
\par 
\par 
\par ---Summary --------------------
\par So in conclusion, I think a best way to do is
\par 
\par 1. set q=0.02 [q=2pi/alat(0 0 0.02)] or so for GaAs case.
\par    If you want to check, do q=0.03 and q=0.06 also.
\par 
\par    ``Chi_RegQbz = off'' is better for matrials like GaAs with direct gap.
\par 
\par 2. You can use small QpGcut_cou but all ngc should be one or more.
\par 
\par 3. As for the Product basis setting in epsPP* scripts, only
\par    lcutmx and tolerance (this can be like 0.001 or so) are relevant.
\par    E.g. set lcutmx=4 or so.
\par 
\par 4. Do nk=20 18 16 and take interpolarion to determine eps(omega=0, q=0).
\par 
\par 5. To get eps with LFC, set QpGcut_cut as xxx, and set lcutmx=2 where
\par    (occupied sp) \\timex (unoccupied spd) are included.
\par    But correct EPS*.nolfc.d is rather from epsPP_lmfh script.
\par 
\par \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 {-90}{}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 fig001\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {-90}{}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 fig002\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {-90}{}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 fig003\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {-90}{}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 fig004\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {-90}{}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 fig005\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {-90}{}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 fig007\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {-90}{}\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 fig008\par
\column
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 17  Utility\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
{\i0\scaps0\b structure tool} viewvesta,ctrl2vasp,vasp2ctrl\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \li600\fi0 \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
{\i0\scaps0\b Other calculation examples} A recent paper by Deguch et al 
[{\field{\*\fldinst{\lang1024 REF BIB_deguchi2016 \\* MERGEFORMAT }}{\fldrslt{12}}}
] contains a link to a sample package. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
{\i0\scaps0\b cif to PROCAR} {\par
\pard\plain\s38\ql\widctlpar\f3\fs20\sl240\slmult1 \li600\fi0 
\par ./cif2cell --vasp-cartesian --vasp-format=5 cifs/BaTiO3_cubic.cif 
\par \par
}}\page {\field{\*\fldinst{INDEX \\c 2}}{\fldrslt{}}}{\column
\pard\plain\s61\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb220 \fi0 {\plain\b\fs32 References}\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \sb60 \li450\fi0 [{\v\*\bkmkstart BIB_kotani2015pmt}1{\*\bkmkend BIB_kotani2015pmt}]\tab
Takao Kotani, Hiori Kino, and Hisazumu Akai. Formulation of the augmented plane-wave and muffin-tin orbital method. {\i Journal of the Physical Society of Japan}, 84(3):034702, March 2015.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_kotani_quasiparticle_2014}2{\*\bkmkend BIB_kotani_quasiparticle_2014}]\tab
Takao Kotani. Quasiparticle self-consistent {GW} method based on the augmented plane-wave and muffin-tin orbital method. {\i J. Phys. Soc. Jpn.}, 83(9):094711 [11 Pages], September 2014. {WOS}:000340822100029.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_kotani07a}3{\*\bkmkend BIB_kotani07a}]\tab
Takao Kotani, Mark van Schilfgaarde, and Sergey\~V. Faleev. Quasiparticle self-consistent gw method: A basis for the independent-particle approximation. {\i Physical Review B}, 76(16):165106, 2007.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_di_valentin_quasiparticle_2014}4{\*\bkmkend BIB_di_valentin_quasiparticle_2014}]\tab
Fabien Bruneval and Matteo Gatti. Quasiparticle self-consistent {GW} method for the spectral properties of complex materials. In Cristiana Di\~Valentin, Silvana Botti, and Matteo Cococcioni, editors, {\i First Principles Approaches to Spectroscopic Properties of Complex Materials}, volume 347, pages 99\endash 135. Springer Berlin Heidelberg, Berlin, Heidelberg, 2014.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_Kotani2002}5{\*\bkmkend BIB_Kotani2002}]\tab
T.\~Kotani and M.\~van Schilfgaarde. {All-electron GW approximation with the mixed basis expansion based on the full-potential LMTO method}. {\i Solid State Communications}, 121(9-10):461\endash 465, 2002.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_Friedrich2012}6{\*\bkmkend BIB_Friedrich2012}]\tab
Christoph Friedrich, Markus Betzinger, Martin Schlipf, Stefan Bl\'fcgel, and Arno Schindlmayr. {Hybrid functionals and GW approximation in the FLAPW method.} {\i Journal of physics. Condensed matter : an Institute of Physics journal}, 24(29):293201, July 2012.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_Kotani2010}7{\*\bkmkend BIB_Kotani2010}]\tab
Takao Kotani and Mark van Schilfgaarde. {Fusion of the LAPW and LMTO methods: The augmented plane wave plus muffin-tin orbital method}. {\i Physical Review B}, 81(12):125117 (2010) [5 pages], March 2010.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_soler89}8{\*\bkmkend BIB_soler89}]\tab
Jos\'e9\~M. Soler and Arthur\~R. Williams. Simple formula for the atomic forces in the augmented-plane-wave method. {\i Phys. Rev. B}, 40(3):1560\endash 1564, Jul 1989.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_soler90}9{\*\bkmkend BIB_soler90}]\tab
Jos\'e9\~M Soler and Arthur\~R Williams. {No Title}. {\i Phys. Rev. B}, 42:9728, 1990.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_kotani_formulation_2015}10{\*\bkmkend BIB_kotani_formulation_2015}]\tab
Takao Kotani, Hiori Kino, and Hisazumu Akai. Formulation of the {Augmented} {Plane}-{Wave} and {Muffin}-{Tin} {Orbital} {Method}. {\i Journal of the Physical Society of Japan}, 84(3):034702, March 2015.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_rath75}11{\*\bkmkend BIB_rath75}]\tab
J.\~Rath and A.J. Freeman. Generalized magnetic susceptibilities in metals: {A}pplication of the analytic tetrahedron linear energy method to {Sc}. {\i Phys. Rev. B}, 11:2109, 1975.\par
\pard\plain\s62\ql\fi-567\li567\sb0\sa0\f0\fs20\sl240\slmult1 \li450\fi0 [{\v\*\bkmkstart BIB_deguchi2016}12{\*\bkmkend BIB_deguchi2016}]\tab
D\~Deguch, K\~Sato, H\~Kino, and T\~Kotani. Accurate energy bands calculated by the hybrid quasiparticle self-consistent {GW} method implemented in the ecalj package. {\i Journal of the Physical Society of Japan}, page accepted, 2016.\par
}}}
